A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     1


MACRO ASSEMBLER A51 V8.01
OBJECT MODULE PLACED IN C:\sbcHex\fedysbcmhex.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE fedysbcmhex.a51 SET(SMALL) DEBUG OBJECT(C:\sbcHex\fedysbcmhex.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     
                       2     
                       3     
                       4     
                       5     
                       6     
                       7     
                       8     
                       9     
                      10     
                      11     
                      12     
                      13     
                      14     
                      15     
                      16     
                      17     
                      18     
                      19     
                      20     
                      21     
                      22     
                      23     
                      24     
                      25     
                      26     
                      27     
                      28     
                      29     
                      30     
                      31     
                      32     
                      33     
                      34     
                      35     
                      36     
                      37     
                      38     
                      39     
                      40     
                      41     
                      42     
                      43     
                      44     
                      45     
                      46     
                      47     
                      48     
                      49     
                      50     
                      51     
                      52     
                      53     
                      54     
                      55     
                      56     
                      57     
                      58     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     2

                      59     
                      60     
                      61     
                      62     
                      63     
                      64     
                      65     
                      66     
                      67     
                      68     
                      69     
                      70     
                      71     
                      72     
                      73     
                      74     
                      75     
                      76     
                      77     
                      78     
                      79     
                      80     
                      81     
                      82     
                      83     
                      84     
                      85     
                      86     
                      87     
                      88     
                      89     
                      90     
                      91     
                      92     
                      93     
                      94     
                      95     
                      96     
                      97     
                      98     
                      99     
                     100     
                     101     
                     102     
                     103     
                     104     
                     105     
                     106     
                     107     
                     108     
                     109     
                     110     
                     111     
                     112     
                     113     
                     114     
                     115     
                     116     
                     117     
                     118     
                     119     
                     120     
                     121     
                     122     
                     123     
                     124     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     3

                     125     
                     126     
                     127     
                     128     
                     129     
                     130     
                     131     
                     132     
                     133     
                     134     
                     135     
                     136     
                     137     
                     138     
                     139     
                     140     
                     141     
                     142     
                     143     
                     144     
                     145     
                     146     
                     147     
                     148     
                     149     
                     150     
                     151     
                     152     
                     153     
                     154     
                     155     
                     156     
                     157     
                     158     
                     159     
                     160     
                     161     
                     162     
                     163     
                     164     
                     165     
                     166     
                     167     
                     168     
                     169     
                     170     
                     171     
                     172     
                     173     
                     174     
                     175     
                     176     
                     177     
                     178     
                     179     
                     180     
                     181     
                     182     
                     183     
                     184     
                     185     
                     186     
                     187     
                     188     
                     189     
                     190     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     4

                     191     
                     192     
                     193     
                     194     
                     195     
                     196     
                     197     
                     198     
                     199     
                     200     
                     201     
                     202     
                     203     
                     204     
                     205     
                     206     
                     207     
                     208     
                     209     
                     210     
                     211     
                     212     
                     213     
                     214     
                     215     
                     216     
                     217     
                     218     
                     219     
                     220     
                     221     
                     222     
                     223     
                     224     
                     225     
                     226     
                     227     
                     228     
                     229     
                     230     
                     231     
                     232     
                     233     
                     234     
                     235     
                     236     
                     237     
                     238     
                     239     
                     240     
                     241     
                     242     
                     243     
                     244     
                     245     
                     246     
                     247     
                     248     
                     249     
                     250     
                     251     
                     252     
                     253     
                     254     
                     255     
                     256     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     5

                     257     
                     258     
                     259     
                     260     
                     261     
                     262     
                     263     
                     264     
                     265     
                     266     
                     267     
                     268     
                     269     
                     270     
                     271     
                     272     
                     273     
                     274     
                     275     
                     276     
                     277     
                     278     
                     279     
                     280     
                     281     
                     282     
                     283     
                     284     
                     285     
                     286     
                     287     
                     288     
                     289     
                     290     
                     291     
                     292     
                     293     
                     294     
                     295     
                     296     
                     297     
                     298     
                     299     
                     300     
                     301     
                     302     
                     303     
                     304     
                     305     
                     306     
                     307     
                     308     
                     309     
                     310     
                     311     
                     312     
                     313     
                     314     
                     315     
                     316     
                     317     
                     318     
                     319     
                     320     
                     321     
                     322     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     6

                     323     
                     324     
                     325     
                     326     
                     327     
                     328     
                     329     
                     330     
                     331     
                     332     
                     333     
                     334     
                     335     
                     336     
                     337     
                     338     
                     339     
                     340     
                     341     
                     342     
                     343     
                     344     
                     345     
                     346     
                     347     
                     348     
                     349     
                     350     
                     351     
                     352     
                     353     
                     354     
                     355     
                     356     
                     357     
                     358     
                     359     
                     360     
                     361     
                     362     
                     363     
                     364     
                     365     
                     366     
                     367     
                     368     
                     369     
                     370     
                     371     
                     372     
                     373     
                     374     
                     375     
                     376     
                     377     
                     378     
                     379     
                     380     
                     381     
                     382     
                     383     
                     384     
                     385     
                     386     
                     387     
                     388     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     7

                     389     
                     390     
                     391     
                     392     
                     393     
                     394     
                     395     
                     396     
                     397     
                     398     
                     399     
                     400     
                     401     
                     402     
                     403     
                     404     
                     405     
                     406     
                     407     
                     408     
                     409     
                     410     
                     411     
                     412     
                     413     
                     414     
                     415     
                     416     
                     417     
                     418     
                     419     
                     420     
                     421     
                     422     
                     423     
                     424     
                     425     
                     426     
                     427     
                     428     
                     429     
                     430     
                     431     
                     432     
                     433     
                     434     
                     435     
                     436     
                     437     
                     438     
                     439     
                     440     
                     441     
                     442     
                     443     
                     444     
                     445     
                     446     
                     447     
                     448     
                     449     
                     450     
                     451     
                     452     
                     453     
                     454     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     8

                     455     
                     456     
                     457     
                     458     
                     459     
                     460     
                     461     
                     462     
                     463     
                     464     
                     465     
                     466     
                     467     
                     468     
                     469     
                     470     
                     471     
                     472     
                     473     
                     474     
                     475     
                     476     
                     477     
                     478     
                     479     
                     480     
                     481     
                     482     
                     483     
                     484     
                     485     
                     486     
                     487     
                     488     
                     489     
                     490     
                     491     
                     492     
                     493     
                     494     
                     495     
                     496     
                     497     
                     498     
                     499     
                     500     
                     501     
                     502     
                     503     
                     504     
                     505     
                     506     
                     507     
                     508     
                     509     
                     510     
                     511     
                     512     
                     513     
                     514     
                     515     
                     516     ; THIS PROGRAM IS WRITTEN TO SATISFACTORILY GENERATE ALL THE INSTRUCTION SET (246) OF THE 8
                             085 MICROPROCESSOR
                     517     
                     518     ; ================================================ MEMORY LOCATIONS =======================
                             =============================================
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE     9

                     519     ;                                       SMDC            EQU             30H                
                                                  ; SUB MEM DELAY COUNTER 4 X 500ms 
                     520     ;                                       CDM                     EQU             31H        
                                                          ; CHARACTER DISPLAY MEMORY (ACTS LIKE A TEMPORARY SAFE)
                     521     ;                                       NC                      EQU             32H        
                                                          ; NIBBLE COUNTER (THE NO. OF INTENDED NIBBLE TO BE OBTAINED IS LOADED IN IT)
                     522     ;                                       BYTE1           EQU             33H                
                                                  ; 1ST BYTE CODE'S TEMPORARY LOCATION (FOR OPCODE ONLY)
                     523     ;                                       BTYE2           EQU             34H                
                                                  ; 2ND BYTE CODE'S TEMPORARY LOCATION (FOR DATA OR LOWER ORDER BYTE OF 
                             AN ADDRESS), FOR 8051 34H = 3RD
                     524     ;                                       BYTE3           EQU     35H                        
                                          ; 3RD BYTE CODE'S TEMPORARY LOCATION (FOR THE HIGH ORDER BYTE OF AN ADDRESS), FOR 8051 35H = 2ND
                     525     ;                                       H2AIM           EQU             36H                
                                                  ; HEX_2_ASCII INPUT MEMORY 
                     526     ;                                       CH2ALOB         EQU             37H                
                                                  ; CONVERTED HEX_2_ASCII LOW ORDER BYTE (CONTENT IS IN ASCII, READY FOR DISPLAY)
                     527     ;                                       CH2AHOB         EQU             38H                
                                                  ; CONVERTED HEX_2_ASCII HIGH ORDER BYTE (CONTENT IS IN ASCII, READY FOR DISPLAY)
                     528     ;                                       NAHLOB          EQU             39H                
                                                  ; NEXT ADDRESS HOLDERS FOR LOB OR ADDRESS_DISPLAY_CONTROL'S INPUT MEM 
                             LOC 1 (THEY TEMPORARILY STORE THE CURRENT ADDRESS WHEN WRITING PROGRAM)
                     529     ;                                       NAHHOB          EQU             3AH                
                                                  ; NEXT ADDRESS HOLDERS FOR HOB OR ADDRESS_DISPLAY_CONTROL'S INPUT MEM LOC 2
                     530     ;                                       MHC                     EQU             3BH        
                                                          ; M_HEX DIGIT COUNTER
                     531     ;                                       VHADM1          EQU             3CH                
                                                  ; V_HEX ADDRESS DISPLAY MEMORY LOC. 1 FOR LOB
                     532     ;                                       VHADM2          EQU             3DH                
                                                  ; V_HEX ADDRESS DISPLAY MEMORY LOC. 2 FOR HOB
                     533     ;                                       SASML1          EQU             3EH                
                                                  ; START'S ADDRESS STORAGE MEM LOC. 1 FOR LOB (STORES THE BEGINNING ADDRESS)
                     534     ;                                       SASML2          EQU             3FH                
                                                  ; START'S ADDRESS STORAGE MEM LOC. 2 FOR HOB (STORES THE BEGINNING ADDRESS)
                     535     ;                                       EASML1          EQU             40H                
                                                  ; END'S ADDRESS STORAGE MEM LOC. 1 FOR LOB (STORES THE LAST/END ADDRESS)
                     536     ;                                       EASML2          EQU             41H                
                                                  ; END'S ADDRESS STORAGE MEM LOC. 2 FOR HOB (STORES THE LAST/END ADDRESS)
                     537     ; THE ADDRESS OF THE RESERVED AREAS CONTAINING THE RESULTS (OR CONTENT) OF THE EXAMINED REG
                             ISTERS ARE SAVED IN THE FOLLOWING MEMORY LOCATIONS
                     538     ;                                       PAM1            EQU             42H                
                                                  ; PAGE/SCREEN ADDRESS MEMORY LOCATION 1 FOR LOB(FOR CANCEL SR ONLY) = 
                             EXAMINED REGISTER A (LOB ADDRESS)
                     539     ;                                       PAM2            EQU             43H                
                                                  ; PAGE/SCREEN ADDRESS MEMORY LOCATION 2 FOR HOB(FOR CANCEL SR ONLY)   
                               = EXAMINED REGISTER A (HOB ADDRESS)
                     540     ;                                       EXRB1           EQU             44H                
                                                  ; EXAMINED REGISTER B (LOB ADDRESS)
                     541     ;                                       EXRB2           EQU             45H                
                                                  ; EXAMINED REGISTER B (HOB ADDRESS)
                     542     ;                                       EXRC1           EQU             46H                
                                                  ; EXAMINED REGISTER C (LOB ADDRESS)
                     543     ;                                       EXRC2           EQU             47H                
                                                  ; EXAMINED REGISTER C (HOB ADDRESS)
                     544     ;                                       EXRD1           EQU             48H                
                                                  ; EXAMINED REGISTER D (LOB ADDRESS)
                     545     ;                                       EXRD2           EQU             49H                
                                                  ; EXAMINED REGISTER D (HOB ADDRESS)
                     546     ;                                       EXRE1           EQU             4AH                
                                                  ; EXAMINED REGISTER E (LOB ADDRESS)
                     547     ;                                       EXRE2           EQU             4BH                
                                                  ; EXAMINED REGISTER E (HOB ADDRESS)
                     548     ;                                       EXRH1           EQU             4CH                
                                                  ; EXAMINED REGISTER H (LOB ADDRESS)
                     549     ;                                       EXRH2           EQU             4DH                
                                                  ; EXAMINED REGISTER H (HOB ADDRESS)
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    10

                     550     ;                                       EXRL1           EQU             4EH                
                                                  ; EXAMINED REGISTER L (LOB ADDRESS)
                     551     ;                                       EXRL2           EQU             4FH                
                                                  ; EXAMINED REGISTER L (HOB ADDRESS)
                     552     ;                                       DML1            EQU             50H                
                                                  ; DELAY'S MEM LOCATION 1
                     553     ;                                       DML2            EQU             51H                
                                                  ; DELAY'S MEM LOCATION 2
                     554     ;                                       DML3            EQU             52H                
                                                  ; DELAY'S MEM LOCATION 3
                     555     
                     556     ; used for correction
                     557     ;                                       submem_keypad_buffer equ   7FH             OUT OF A
                             BOUT FORTY REMAINING OF 128 RAM MEMORY
                     558                                             
                     559     ; ================================================= FLAG LOCATIONS ========================
                             =============================================
                     560     ;                                       SMF                     BIT             00H        
                                                          ; SUB MEM FLAG
                     561     ;                                       KPF                     BIT             01H        
                                                          ; KEY PRESSED FLAG
                     562     ;                                       HNF                     BIT             02H        
                                                          ; HEX NIBBLE FLAG
                     563     ;                                       NTF                     BIT             03H        
                                                          ; NEXT TYPE FLAG (OPCODE TYPE 03H = 0, OPERAND TYPE 03H = 1)
                     564     ;                                       BIF                     BIT             04H        
                                                          ; BYTE INDICATOR FLAG (INDICATES WHEN AN OPERAND IS A 2 BYTE(4
                              NIBBLES) OR 1 BYTE (2NIBBLES) )
                     565     ;                                       NMCF            BIT             05H                
                                                  ; NIBBLE MARRIAGE CONTROL FLAG
                     566     ;                                       MCF                     BIT             06H        
                                                          ; MARRIAGE COMPLETION FLAG ONLY FOR HIGH ORDER BYTE (MCF = 1 ON MARRIAGE COMPLETION)
                     567     ;                                       NOTF8085        BIT             07H                
                                                  ; NEXT OPERAND TYPE FLAG (DATA TYPE OPERAND 07H = 0, ADDRESS TYPE OPERAND 07H = 1) FOR 8085 ONLY
                     568     ;                                       NSF                     BIT             08H        
                                                          ; NEXT SUB MEM FLAG (SELECTS THE PART OF THE NEXT SR MEANT FOR SUB MEM)
                     569     ;                                       CPLTF           BIT             09H                
                                                  ; CODE/PROGRAMMING LANGUAGE TYPE FLAG
                     570     ;                                       MHF                     BIT             0AH        
                                                          ; M_HEX FLAG FOR SWAP SELECTION (HELPS TO FORMAT DATA IN MHEX SR)               
                     571     ;                                       VHDF            BIT             0BH                
                                                  ; V_HEX DECREMENT FLAG
                     572     ;                                       EF                      BIT             0CH        
                                                          ; END'S FLAG
                     573     ;                                       CPUTF           BIT             0DH                
                                                  ; CUP TYPE FLAG (0DH = 0 FOR 8085, 0DH = 1 FOR 8051)
                     574     ;                                       NOTF___         BIT             0EH                
                                                  ; NEXT OPERAND TYPE FLAG (DATA TYPE OPERAND 0EH = 0, ADDRESS TYPE OPERAND 0EH = 1) FOR 8051 ONLY
                     575     ;                                       VNF___          BIT             0FH                
                                                  ; VALID NUMBER FLAG. IF BIT ADDR 0FH = 1 THE KEY PRESSED IS A VALID NU
                             MBER ELSE INVALID. FOR 8051 ONLY
                     576     ;                                       OTF1___         BIT             10H                
                                                  ; OPERAND TYPE FLAG 1    FOR 8051
                     577     ;                                       OTF2___         BIT             11H                
                                                  ; OPERAND TYPE FLAG 2
                     578     ;                                       OTF3___         BIT             12H                
                                                  ; OPERAND TYPE FLAG 3
                     579     
                     580     ; ==================================================== MACROS =============================
                             =============================================
                     581     CLR_LCD                         MACRO                                                      
                                          ; CLEAR LCD
                     582                                     MOV             A, #01H
                     583                                     LCALL           LCD_CMD                                    
                                                                                                                                          
                     584                                     ENDM  
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    11

                     585     ; -----------------------------------------------------------------------------------------
                             ---------------------------------------------
                     586     D_STR                           MACRO                                                      
                                          ; DISPLAY STRINGS OF CHARACTER
                     587                                     LCALL           LCD_CMD
                     588                                     LCALL           DISP_CHAR
                     589                                     ENDM
                     590     ; ========================================================  MAIN  =========================
                             =============================================
0000                 591                                             ORG                     0000H
0000 806E            592                                             JMP                     MAIN                       
                                                  ; ON SYSTEM RESET, JUMP TO MAIN
                     593                                             
0003                 594                                             ORG                     0003H
0003 020F50          595                                             JMP                     SECOND_FUNCTION            
                                          ; ON SYSTEM EXTERNAL INTERRUPT 0, JUMP TO THE ISR 'SECOND_FUNCTION'
                     596     
0070                 597                                             ORG                     0070H
0070                 598     MAIN:                                                                                      
                                                  ; THE MAIN PROGRAM BEGINS HERE
0070 758157          599                                             MOV                     SP, #57H                   
                                                  ; INITIALIZATION OF THE TOP OF THE STACK(40 BYTES OF MEM. ARE AVAILABLE ON THIS INITIALIZATION)
0073 7590FF          600                                             MOV             P1,#0FFH                           
                                          ; MAKE PORT1 AN INPUT PORT
0076 75B0CC          601                                             MOV             P3, #11001100B                     
                                   ; corrected. formerly was      #00001000B
0079 1210FC          602                                             LCALL           LCD_SET                            
                                          ; SET THE LCD FOR PROPER PERFORMANCE
007C 1214B4          603                                             LCALL           INTRO_MSG                          
                                          ; CALLS AN OSR TO DISPLAY LINE 1: '   SBC 8085uP   '
                     604                                                                                                
                                                          ;                         LINE 2: 'by IFEDIORA E.C.'  OR 'by FEDYRONIX INC'
007F 121078          605     MAIN1:                          CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED TO CONTINUE
0082 3001FA          606                                             JNB                     01H, MAIN1
0085 C201            607                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     608                                                                                                
                                                          
                     609                                             CLR_LCD                                            
                                                  ; CLEAR THE LCD (NOTE THIS RESET THE ADDRESS OF THE DDRAM TO 80H
008C 121531          612                                             LCALL           INTRO_CPU_TYPE                     
                                  ; CALLS AN OSR TO DISPLAY LINE 1: 'Press 3 for 8085'
                     613                                                                                                
                                                          ;                         LINE 2: 'Press 4 for 8051' 
008F 121078          614     MAIN1_1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE THAT EITHER '3' OR '4' KEY IS DEPRESSED
0092 3001FA          615                                             JNB                     01H, MAIN1_1
0095 C201            616                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     617     
0097 B43304          618                                             CJNE            A, #'3', MAIN1_2
009A C20D            619                                             CLR                     0DH                        
                                                          ; SELECTS 8085 CPU INSTRUCTION SET
009C 8005            620                                             SJMP            MAIN1_3corrected
009E B434EE          621     MAIN1_2:                        CJNE            A, #'4', MAIN1_1
00A1 D20D            622                                             SETB            0DH                                
                                                  ; SELECTS 8051 CPU INSTRUCTION SET
                     623                                                                                                
                                                                                                  
00A3                 624     MAIN1_3corrected:
                     625                                             CLR_LCD                                            
                                                  ; CLEAR THE LCD (NOTE THIS RESET THE ADDRESS OF THE DDRAM TO 80H
00A8 1214E7          628                                             LCALL           INTRO_CPLT                         
                                          ; CALLS AN OSR TO DISPLAY LINE 1: 'Press 0 for MHEX'
                     629                                                                                                
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    12

                                                          ;                         LINE 2: 'Press 1 for ASM' 
00AB 121078          630     MAIN1_3:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE THAT EITHER '0' OR '1' KEY IS DEPRESSED
00AE 3001FA          631                                             JNB                     01H, MAIN1_3
00B1 C201            632                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     633     
00B3 B43007          634                                             CJNE            A, #'0', MAIN1_4
00B6 C209            635                                             CLR                     09H                        
                                                          ; SELECTS MHEX
00B8 753B02          636                                             MOV                     3BH, #02H                  
                                                  ; MOVE '2' INTO THE MHEX COUNTER
00BB 8005            637                                             SJMP            MAIN1_5
00BD B431EB          638     MAIN1_4:                        CJNE            A, #'1', MAIN1_3
00C0 D209            639                                             SETB            09H                                
                                                  ; SELECTS ASM
                     640     
00C2 D288            641     MAIN1_5:                        SETB            IT0                                        
                                          ; corrected. this line wasn't here before
00C4 C289            642                                             CLR                     IE0                        
                                                          ; corrected. this line wasn't here before
00C6 75A881          643                                             MOV             IE, #10000001B                     
                                  ; ENABLE THE !INT0 EXTERNAL INTERRUPT (SECOND_FUNCTION ISR)
                     644     
                     645                                             CLR_LCD
00CE 121519          648                                             LCALL           INTRO_SUBMEM_REQUEST            ; C
                             ALLS AN OSR TO DISPLAY ON LINE 1: 'Enter start addr'
                     649     ; corrected to 50 times with 20mS delay. Not also that the label for the delay was changed 
                             from LCD_DLY gto DELAY_20mS
00D1 753032          650                                             MOV                     30H,#32H                   
                                                  ; LOAD '50DEC IN HEX (32H)' INTO THE COUNTER (50 TIMES) 
00D4 75B0CC          651                                             MOV             P3, #11001100B                     
                                   ; corrected. formerly was      #00001000B
                     652     
00D7 3000FD          653                                             JNB                     00H, $                     
                                                  ; STAY HERE TILL THE SUB MEM IS PRESSED
                     654     ; corrected
00DA C200            655                                             CLR                     00H                        
                                                          ; refreshes sub mem flag. this line wasn't here before
                     656                                             ; 8085 OR 8051?
00DC 200D05          657                                             JB                      0DH, ___8051               
                                          ; IF 0DH = 1 (8051) JUMP TO 8051 ASM/INSTR. SET ELSE CONTINUE WITH 8085 ASM/INSTR. SET
                     658     
00DF 300918          659                                             JNB                     09H, M_HEX                 
                                                  ; USE MACHINE LANGUAGE FOR 09H = 0 ELSE USE ASM FOR 09H = 1
00E2 8064            660                                             JMP                     MAIN2
                     661     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
00E4                 662     ___8051:                        
                     663                                             ;JNB                    09H, M_HEX                 
                                                          ; USE MACHINE LANGUAGE FOR 09H = 0 ELSE USE ASM FOR 09H = 1
                     664                                             D_STR                                              
                                                  ; A LCD SCREEN CLEAR THUS DDRAM ADDRESS AUTOMATICALLY RESETS TO LINE 1
00EA 38303531        667                                             DB                      '8051 LOOP YES',0          
                                  ; LINE 1
00EE 204C4F4F                
00F2 50205945                
00F6 5300                    
00F8 80FE            668                                             JMP                     $
                     669     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                     670     
                     671     
                     672     ; =*=*=*=*=*=*=*=*=*=*=*=*=*   MACHINE LANGUAGE (IN HEX, MHEX) AS THE CODE/PROGRAMMING LANG
                             UAGE TYPE (CPLT)  =*=*=*=*=*=*=*=*=*=*=*=*=*=
                     673     ; THIS MANIS SEGMENT/SUBROUTINE IS DEDICATED FOR MHEX
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    13

                     674     ; THE CHOICE WOULD ALWAYS BE BETWEEN MACHINE LANGUAGE (IN HEX, MHEX) AND ASSEMBLY LANGUAGE 
                             (ASM)
                     675     ; A TEST FLAG SHOULD COME AFTER SUB MEM FLAG IN THE MAIN PROGRAM
                     676               
                     677     ; -----------------------------------------------------------------------------------------
                             ---------------------------------------------
                     678     
                     679     
                     680     
                     681     
                     682     
                     683     
                     684     
                     685     
                     686     
                     687     
                     688     
                     689     
                     690     
                     691     
                     692     
                     693     
                     694     
                     695     
                     696                             
                     697     
00FA                 698     M_HEX:                  
                     699     ; ELOO PLEASE INCLUDE THE INSTRUCTIONS TO CARRY OUT DISPLAY ON LINE 2 HERE
00FA 121078          700                                     CALL            KEYPAD_ID                                  
                                          ; ENSURE A KEY(1ST KEY) IS DEPRESSED
00FD 3001FA          701                                     JNB                     01H, M_HEX
0100 C201            702                                     CLR                     01H                                
                                                          ; GET READY FOR NEXT KEY
0102 F531            703                                     MOV                     31H, A
                     704     
0104 B43001          705                                     CJNE            A, #30H, MH_1                              
                                  ; THE CONTENT OF 'A' MUST SATISFY THE FOLLOWING INEQUALITY: 30H =< A =< 46H
0107 C3              706                                     CLR                     C                                  
                                                          ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                     707     
0108 40F0            708     MH_1:                   JC                      M_HEX                                      
                                          ; IF A > 30 CONTINUE ELSE GO BACK TO MHEX
010A 9430            709                                     SUBB            A, #30H                                    
                                          ; SUBTRACT 30H FROM A REGISTER
010C B40A01          710                                     CJNE            A, #0AH, MH_2                              
                                  
010F C3              711                                     CLR                     C                                  
                                                          ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                     712     
0110 4008            713     MH_2:                   JC                      MH_4
0112 9407            714                                     SUBB            A, #07H                                    
                                          ; SUBTRACT 07H FROM 'A' REGISTER
0114 B40F01          715                                     CJNE            A, #0FH, MH_3                              
                                  ; CHECK IF THE RESULT OF THE SUBTRACTION IS GREATER THAN 0FH; IF SO EXIT THE SR ELSE CONTINUE
0117 D3              716                                     SETB            C                                          
                                                  ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                     717     
0118 50E0            718     MH_3:                   JNC                     M_HEX                                      
                                          ; START AFRESH (ie MHEX) IF THE KEYPAD INPUT DOES NOT SATISFY THE ABOVE INEQUALITY
                     719                                                                                                
                                                          ; ELSE CONTINUE
011A B20A            720     MH_4:                   CPL                     0AH                                        
                                                  ; FORMAT THE DATA AND SAVE TEMPORARILY IN THE MEM LOC 33H
011C 300A05          721                                     JNB                     0AH, MH_5
011F C4              722                                     SWAP            A
0120 F533            723                                     MOV                     33H, A                             
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    14

                                                  
0122 8004            724                                     SJMP            MH_6                                       
                                          ; SKIP OPERATIONS IN LABEL MHEX_5
                     725     
0124 4533            726     MH_5:                   ORL                     A, 33H                                     
                                          ; FORMAT COMPLETED
0126 F533            727                                     MOV                     33H, A                             
                                                  ; CARRY OUT THE FINAL SAVE
                     728                                     
0128 E531            729     MH_6:                   MOV                     A, 31H                                     
                                          ; LOAD THE ASCII CODE FOR THE CURRENT CHARARTER TO BE DISPLAYED
012A 121111          730                                     CALL            LCD_SHO
                     731     
012D D53BCA          732                                     DJNZ            3BH, M_HEX                                 
                                          ; DECREMENT AND JUMP TILL ZERO TO CONTINUE
                     733     
0130 121078          734     MH_7:                   CALL            KEYPAD_ID                                          
                                  ; ENSURE A KEY IS DEPRESSED
0133 3001FA          735                                     JNB                     01H, MH_7
0136 C201            736                                     CLR                     01H     
                     737     
0138 B42AF5          738                                     CJNE            A, #'*', MH_7                              
                                  ; WAIT FOR 'NEXT KEY' TO BE PRESSED
                     739     
013B 753B02          740                                     MOV                     3BH, #02H                          
                                                  ; LOAD ANOTHER TWO DIGIT COUNT INTO MHC FOR THE NEXT INPUT (INSTRUCTION SET)
                     741     
013E C203            742                                     CLR                     03H                                
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
0140 120FF3          743                                     CALL            NEXT                                       
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE HEX CODE IN THE EXTERNAL MEMORY
0143 120F9E          744                                     CALL            ADDRESS_DISPLAY_CONTROL                 ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
                     745     
0146 01FA            746                                     AJMP            M_HEX                                      
                                          
                     747     
                     748     
                     749     ; =*=*=*=*=*=*=*=*=*=*=*=*=*        ASSEMBLY LANGUAGE AS THE CODE/PROGRAMMING LANGUAGE TYPE
                              (CPLT) FOR 8085        =*=*=*=*=*=*=*=*=*=*=*=*=*=
                     750     
0148 74C0            751     MAIN2:                          MOV                     A, #0C0H                           
                                          ; INSTRUCTION/COMMAND TO CARRY OUT DISPLAY ON LINE 2
014A 1210E6          752                                             CALL            LCD_CMD
                     753                                             ; INCLUDE CODE TO REFRESH SOME MEM LOCATION USED AS
                              COUNTER IN THE PROGRAM
                     754                                             
                     755     ; ---------------------------------------------- FIRST CHARATER KEY COMBINATION -----------
                             ------------------------------------------
                     756     
                     757     
014D 121078          758     ASM:                            CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (1ST KEY) IS DEPRESSED
0150 3001FA          759                                             JNB                     01H, ASM
0153 C201            760                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     761     
0155 B44102          762                                             CJNE            A, #'A', ASM1_1                    
                                  ; JUMP TO A'S SECOND CHARACTER ELSE CONTINUE
0158 8071            763                                             JMP                     A2
015A B44302          764     ASM1_1:                         CJNE            A, #'C', ASM1_2                         ; J
                             UMP TO C'S SECOND CHARACTER ELSE CONTINUE 
015D 412C            765                                             JMP                     C2
015F B44402          766     ASM1_2:                         CJNE            A, #'D', ASM1_3                         ; J
                             UMP TO D'S SECOND CHARACTER ELSE CONTINUE 
0162 41F7            767                                             JMP                     D2
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    15

0164 B4450D          768     ASM1_3:                         CJNE            A, #'E', ASM1_4                         ; E
                             VALUATE E (ie EI) ELSE CONTINUE
0167 121111          769                                             CALL            LCD_SHO
016A 7449            770                                             MOV                     A, #'I'
016C 7533FB          771                                             MOV                     33H, #0FBH                 
                                                  ; LOAD ITS 8085 INST. SET
016F 12111E          772                                             CALL            FLY_OPCODE                         
                                          ; EXPORT THE OPCODE
0172 80D4            773                                             SJMP            MAIN2
                     774     
0174 B44812          775     ASM1_4:                         CJNE            A, #'H', ASM1_5                         ; E
                             VALUATE H (ie HLT) ELSE CONTINUE
0177 121111          776                                             CALL            LCD_SHO
017A 744C            777                                             MOV                     A, #'L'
017C 121111          778                                             CALL            LCD_SHO
017F 7454            779                                             MOV                     A, #'T'
0181 753376          780                                             MOV                     33H, #76H                  
                                                  ; LOAD ITS 8085 INST. SET
0184 12111E          781                                             CALL            FLY_OPCODE                         
                                          ; EXPORT THE OPCODE
0187 80BF            782                                             SJMP            MAIN2
                     783     
0189 B44902          784     ASM1_5:                         CJNE            A, #'I', ASM1_6                         ; J
                             UMP TO I'S SECOND CHARACTER ELSE CONTINUE 
018C 6146            785                                             JMP                     I2
018E B44A02          786     ASM1_6:                         CJNE            A, #'J', ASM1_7                         ; J
                             UMP TO J'S SECOND CHARACTER ELSE CONTINUE 
0191 616D            787                                             JMP                     J2
0193 B44C02          788     ASM1_7:                         CJNE            A, #'L', ASM1_8                         ; J
                             UMP TO L'S SECOND CHARACTER ELSE CONTINUE 
0196 8107            789                                             JMP                     L2
0198 B44D02          790     ASM1_8:                         CJNE            A, #'M', ASM1_9                         ; J
                             UMP TO M'S SECOND CHARACTER ELSE CONTINUE 
019B 8156            791                                             JMP                     M2
                     792     
019D B44E12          793     ASM1_9:                         CJNE            A, #'N', ASM1_10                        ; E
                             VALUATE N (ie NOP) ELSE CONTINUE
01A0 121111          794                                             CALL            LCD_SHO
01A3 744F            795                                             MOV                     A, #'O'
01A5 121111          796                                             CALL            LCD_SHO
01A8 7450            797                                             MOV                     A, #'P'
01AA 753300          798                                             MOV                     33H, #00H                  
                                                  ; LOAD ITS 8085 INST. SET
01AD 12111E          799                                             CALL            FLY_OPCODE                         
                                          ; EXPORT THE OPCODE
01B0 8096            800                                             SJMP            MAIN2
                     801     
01B2 B44F02          802     ASM1_10:                        CJNE            A, #'O', ASM1_11                        ; J
                             UMP TO O'S SECOND CHARACTER ELSE CONTINUE 
01B5 8177            803                                             JMP                     O2
01B7 B45002          804     ASM1_11:                        CJNE            A, #'P', ASM1_12                        ; J
                             UMP TO P'S SECOND CHARACTER ELSE CONTINUE 
01BA 81B1            805                                             JMP                     _P2
01BC B45202          806     ASM1_12:                        CJNE            A, #'R', ASM1_13                        ; J
                             UMP TO R'S SECOND CHARACTER ELSE CONTINUE 
01BF 81EC            807                                             JMP                     _R2
01C1 B45302          808     ASM1_13:                        CJNE            A, #'S', ASM1_14                        ; J
                             UMP TO S'S SECOND CHARACTER ELSE CONTINUE 
01C4 C12C            809                                             JMP                     S2
01C6 B45884          810     ASM1_14:                        CJNE            A, #'X', ASM                            ; J
                             UMP TO X'S SECOND CHARACTER ELSE START AFRESH 
01C9 C1E9            811                                             JMP                     X2
                     812     
                     813     ; ------------------------------------------ SECOND, THIRD & FOURTH CHARACTER KEY COMBINATI
                             ON -----------------------------------------------------------
                     814     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    16

                     815     ; FOR 'A' AS FIRST CHARACTER
01CB 121111          816     A2:                                     CALL            LCD_SHO
01CE 121078          817     A2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
01D1 3001FA          818                                             JNB                     01H, A2_1
01D4 C201            819                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     820     
01D6 B4430D          821                                             CJNE            A, #'C', A2_2                      
                                  ; ACI
01D9 121111          822                                             CALL            LCD_SHO
01DC 7449            823                                             MOV                     A, #'I'
01DE 7533CE          824                                             MOV                     33H, #0CEH                 
                                                  ; LOAD ITS 8085 INST. SET
01E1 12113C          825                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
01E4 2148            826                                             AJMP            MAIN2
                     827     
01E6 B44420          828     A2_2:                           CJNE            A, #'D', A2_3                           ; C
                             HECK MATCH FOR AD'S THIRD CHARACTER ELSE CONTINUE 
01E9 121111          829                                             CALL            LCD_SHO
01EC 121078          830     A2_2L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
01EF 3001FA          831                                             JNB                     01H, A2_2L1
01F2 C201            832                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     833                                     
01F4 B44302          834                                             CJNE            A, #'C', A2_2L2                    
                                  ; ADC
01F7 E13D            835                                             JMP                     ADC_                       
                                                  ; JUMP TO ADC OPERAND ELSE CONTINUE
01F9 B44402          836     A2_2L2:                         CJNE            A, #'D', A2_2L3                         ; A
                             DD
01FC E191            837                                             JMP                     ADD_                       
                                                  ; JUMP TO ADD OPERAND ELSE CONTINUE
01FE B449EB          838     A2_2L3:                         CJNE            A, #'I', A2_2L1                         ; A
                             DI
0201 7533C6          839                                             MOV                     33H, #0C6H                 
                                                  ; LOAD ITS 8085 INST. SET
0204 12113C          840                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0207 2148            841                                             AJMP            MAIN2
                     842     
0209 B44EC2          843     A2_3:                           CJNE            A, #'N', A2_1                           ; C
                             HECK MATCH FOR AN'S THIRD CHARACTER ELSE CONTINUE 
020C 121111          844                                             CALL            LCD_SHO
020F 121078          845     A2_3L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0212 3001FA          846                                             JNB                     01H, A2_3L1
0215 C201            847                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     848     
0217 B44102          849                                             CJNE            A, #'A', A2_3L2                    
                                  ; ANA
021A E1E5            850                                             JMP                     ANA_                       
                                                  ; JUMP TO ANA OPERAND ELSE CONTINUE
021C B449F0          851     A2_3L2:                         CJNE            A, #'I', A2_3L1                         ; A
                             NI 
                     852     ; corrected
021F 121111          853                                             call            LCD_SHO
0222 7533E6          854                                             MOV                     33H, #0E6H                 
                                                  ; LOAD ITS 8085 INST. SET
0225 7420            855                                             mov                     A, #' '
0227 12113C          856                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
022A 2148            857                                             AJMP            MAIN2
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    17

                     858     
                     859     ; FOR 'C' AS FIRST CHARACTER
022C 121111          860     C2:                                     CALL            LCD_SHO
022F 121078          861     C2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0232 3001FA          862                                             JNB                     01H, C2_1
0235 C201            863                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     864     
0237 B44112          865                                             CJNE            A, #'A', C2_2                      
                                  ; CALL
                     866                                             D_STR
0240 414C4C00        869                                             DB                      'ALL',0
0244 7533CD          870                                             MOV                     33H, #0CDH                 
                                                  ; LOAD ITS 8085 INST. SET
0247 121186          871                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
024A 2148            872                                             AJMP            MAIN2
                     873     
024C B44308          874     C2_2:                           CJNE            A, #'C', C2_3                           ; C
                             C 
024F 7533DC          875                                             MOV                     33H, #0DCH
0252 121184          876                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0255 2148            877                                             AJMP            MAIN2
                     878     
0257 B44D32          879     C2_3:                           CJNE            A, #'M', C2_4                           ; C
                             M'S THIRD CHARACTER ELSE CONTINUE 
025A 121111          880                                             CALL            LCD_SHO
025D 121078          881     C2_3L1:                         CALL            KEYPAD_ID
0260 3001FA          882                                             JNB                     01H, C2_3L1                
                                                  ; GET READY FOR NEXT KEY
0263 C201            883                                             CLR                     01H
                     884     
0265 B42A08          885                                             CJNE            A, #'*', C2_3L2                    
                                  ; CM
0268 7533FC          886                                             MOV                     33H, #0FCH
026B 121186          887                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
026E 2148            888                                             AJMP            MAIN2
0270 B44108          889     C2_3L2:                         CJNE            A, #'A', C2_3L3                         ; C
                             MA
0273 75332F          890                                             MOV                     33H, #2FH                  
                                                  ; LOAD ITS 8085 INST. SET
0276 12111E          891                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0279 2148            892                                             AJMP            MAIN2
                     893     
027B B44308          894     C2_3L3:                         CJNE            A, #'C', C2_3L4                         ; C
                             MC
027E 75333F          895                                             MOV                     33H, #3FH                  
                                                  ; LOAD ITS 8085 INST. SET
0281 12111E          896                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD OPCODE IN-TAKE
0284 2148            897                                             AJMP            MAIN2
                     898     
0286 B450D4          899     C2_3L4:                         CJNE            A, #'P', C2_3L1
0289 020839          900                                             JMP                     CMP_                       
                                                  ; JUMP TO CMP'S OPERAND CHARACTER ELSE CONTINUE 
                     901     ; -------
028C B44E21          902     C2_4:                           CJNE            A, #'N', C2_5                           ; J
                             UMP TO CN'S THIRD CHARACTER ELSE CONTINUE 
028F 121111          903                                             CALL            LCD_SHO
0292 121078          904     C2_4L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0295 3001FA          905                                             JNB                     01H, C2_4L1
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    18

0298 C201            906                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     907     
029A B44308          908                                             CJNE            A, #'C', C2_4L2                    
                                  ; CNC
029D 7533D4          909                                             MOV                     33H, #0D4H
02A0 121184          910                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02A3 2148            911                                             AJMP            MAIN2
02A5 B45AEA          912     C2_4L2:                         CJNE            A, #'Z', C2_4L1                         ; C
                             NZ
02A8 7533C4          913                                             MOV                     33H, #0C4H
02AB 121184          914                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02AE 2148            915                                             AJMP            MAIN2
                     916     
02B0 B45037          917     C2_5:                           CJNE            A, #'P', C2_6                           ; J
                             UMP TO CP'S THIRD CHARACTER ELSE CONTINUE 
02B3 121111          918                                             CALL            LCD_SHO
02B6 121078          919     C2_5L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
02B9 3001FA          920                                             JNB                     01H, C2_5L1
02BC C201            921                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     922     
02BE B42A08          923                                             CJNE            A, #'*', C2_5L2                    
                                  ; CP
02C1 7533F4          924                                             MOV                     33H, #0F4H                 
                                                  ; LOAD ITS 8085 INST. SET
02C4 121186          925                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02C7 2148            926                                             AJMP            MAIN2
02C9 B44508          927     C2_5L2:                         CJNE            A, #'E', C2_5L3                         ; C
                             PE
02CC 7533EC          928                                             MOV                     33H, #0ECH
02CF 121184          929                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02D2 2148            930                                             AJMP            MAIN2
                     931     
02D4 B44908          932     C2_5L3:                         CJNE            A, #'I', C2_5L4                         ; C
                             PI
02D7 7533FE          933                                             MOV                     33H, #0FEH                 
                                                  ; LOAD ITS 8085 INST. SET
02DA 12113C          934                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
02DD 2148            935                                             AJMP            MAIN2
                     936     
02DF B44FD4          937     C2_5L4:                         CJNE            A, #'O', C2_5L1                         ; C
                             PO
02E2 7533E4          938                                             MOV                     33H, #0E4H                 
                                                  ; LOAD ITS 8085 INST. SET
02E5 121184          939                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02E8 2148            940                                             AJMP            MAIN2
                     941     
                     942     
02EA B45A08          943     C2_6:                           CJNE            A, #'Z', C2_7                           ; J
                             UMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
02ED 7533CC          944                                             MOV                     33H, #0CCH                 
                                                  ; LOAD ITS 8085 INST. SET
02F0 121184          945                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02F3 2148            946                                             AJMP            MAIN2
02F5 412F            947     C2_7:                           AJMP            C2_1                                       
                                  ; I PLACE THIS INSTRUCTION HERE DUE OUT OF RANGE ERROR
                     948     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    19

                     949     ; FOR 'D' AS FIRST CHARACTER
02F7 121111          950     D2:                                     CALL            LCD_SHO
02FA 121078          951     D2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
02FD 3001FA          952                                             JNB                     01H, D2_1
0300 C201            953                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     954     
0302 B4411C          955                                             CJNE            A, #'A', D2_2                      
                                  ; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
0305 121111          956                                             CALL            LCD_SHO
0308 121078          957     D2_1L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
030B 3001FA          958                                             JNB                     01H, D2_1L1                
                                                  ; GET READY FOR NEXT KEY
030E C201            959                                             CLR                     01H
                     960     
0310 B44108          961                                             CJNE            A, #'A', D2_1L2                    
                                  ; DAA
0313 753327          962                                             MOV                     33H, #27H                  
                                                  ; LOAD ITS 8085 INST. SET
0316 12111E          963                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0319 2148            964                                             AJMP            MAIN2
031B B444EA          965     D2_1L2:                         CJNE            A, #'D', D2_1L1                         ; D
                             AD
031E 02088D          966                                             JMP                     DAD_                       
                                                  ; JUMP TO DAD'S OPERAND CHARACTER ELSE CONTINUE 
                     967     
0321 B44317          968     D2_2:                           CJNE            A, #'C', D2_3                           ; J
                             UMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
0324 121111          969                                             CALL            LCD_SHO
0327 121078          970     D2_2L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
032A 3001FA          971                                             JNB                     01H, D2_2L1                
                                                  ; GET READY FOR NEXT KEY
032D C201            972                                             CLR                     01H             
                     973                                             
032F B45203          974                                             CJNE            A, #'R', D2_2L2                    
                                  ; DCR
0332 0208C6          975                                             JMP                     DCR_                       
                                                  ; JUMP TO DCR'S OPERAND CHARACTER ELSE CONTINUE 
0335 B458EF          976     D2_2L2:                         CJNE            A, #'X', D2_2L1                         ; D
                             CX
0338 02091A          977                                             JMP                     DCX_                       
                                                  ; JUMP TO DCX'S OPERAND CHARACTER ELSE CONTINUE 
                     978                                                                                                
                                          
033B B449BC          979     D2_3:                           CJNE            A, #'I', D2_1                           ; J
                             UMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
033E 7533F3          980                                             MOV                     33H, #0F3H                 
                                                  ; LOAD ITS 8085 INST. SET
0341 12113C          981                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0344 2148            982                                             AJMP            MAIN2
                     983     
                     984     ; FOR 'I' AS FIRST CHARACTER
0346 121111          985     I2:                                     CALL            LCD_SHO
0349 744E            986                                             MOV                     A, #'N'                    
                                              ; SHOW 'IN' AT ONCE AND WAIT FOR 'NEXT SR', CHARACTER 'R' OR 'X'
034B 121111          987                                             CALL            LCD_SHO
034E 121078          988     I2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0351 3001FA          989                                             JNB                     01H, I2_1
0354 C201            990                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    20

                     991     
0356 B42A08          992                                             CJNE            A, #'*', I2_2                      
                                  ; IN
0359 7533DB          993                                             MOV                     33H, #0DBH                 
                                                  ; LOAD ITS 8085 INST. SET
035C 12113E          994                                             CALL            FLY_DATA_SKIP                      
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
035F 2148            995                                             AJMP            MAIN2           
0361 B45203          996     I2_2:                           CJNE            A, #'R', I2_3
0364 020953          997                                             JMP                     INR_                       
                                                  ; JUMP TO INR'S OPERAND CHARACTER ELSE CONTINUE 
0367 B458E4          998     I2_3:                           CJNE            A, #'X', I2_1
036A 0209A7          999                                             JMP                     INX_                       
                                                  ; JUMP TO INX'S OPERAND CHARACTER ELSE CONTINUE 
                    1000     
                    1001     ; FOR 'J' AS FIRST CHARACTER
036D 121111         1002     J2:                                     CALL            LCD_SHO
0370 121078         1003     J2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0373 3001FA         1004                                             JNB                     01H, J2_1
0376 C201           1005                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1006     
0378 B44308         1007                                             CJNE            A, #'C', J2_2                      
                                  ; JC
037B 7533DA         1008                                             MOV                     33H, #0DAH                 
                                                  ; LOAD ITS 8085 INST. SET
037E 121184         1009                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0381 2148           1010                                             AJMP            MAIN2
                    1011     
0383 B44D21         1012     J2_2:                           CJNE            A, #'M', J2_3                           ; J
                             M'S THIRD CHARACTER ELSE CONTINUE 
0386 121111         1013                                             CALL            LCD_SHO
0389 121078         1014     J2_2L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
038C 3001FA         1015                                             JNB                     01H, J2_2L1
038F C201           1016                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1017     
0391 B42A08         1018                                             CJNE            A, #'*', J2_2L2                    
                                  ; JM
0394 7533FA         1019                                             MOV                     33H, #0FAH                 
                                                  ; LOAD ITS 8085 INST. SET
0397 121186         1020                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
039A 2148           1021                                             AJMP            MAIN2           
039C B450EA         1022     J2_2L2:                         CJNE            A, #'P', J2_2L1                         ; J
                             MP
039F 7533C3         1023                                             MOV                     33H, #0C3H                 
                                                  ; LOAD ITS 8085 INST. SET
03A2 121184         1024                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
03A5 2148           1025                                             AJMP            MAIN2                           
                    1026     
03A7 B44E21         1027     J2_3:                           CJNE            A, #'N', J2_4                           ; J
                             N'S THIRD CHARACTER ELSE CONTINUE 
03AA 121111         1028                                             CALL            LCD_SHO
03AD 121078         1029     J2_3L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
03B0 3001FA         1030                                             JNB                     01H, J2_3L1
03B3 C201           1031                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1032     
03B5 B44308         1033                                             CJNE            A, #'C', J2_3L2                    
                                  ; JNC
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    21

03B8 7533D2         1034                                             MOV                     33H, #0D2H                 
                                                  ; LOAD ITS 8085 INST. SET
03BB 121184         1035                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
03BE 2148           1036                                             AJMP            MAIN2
03C0 B45AEA         1037     J2_3L2:                         CJNE            A, #'Z', J2_3L1                         ; J
                             NZ
03C3 7533C2         1038                                             MOV                     33H, #0C2H                 
                                                  ; LOAD ITS 8085 INST. SET
03C6 121184         1039                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
03C9 2148           1040                                             AJMP            MAIN2    
                    1041     
03CB B4502C         1042     J2_4:                           CJNE            A, #'P', J2_5                           ; J
                             P'S THIRD CHARACTER ELSE CONTINUE 
03CE 121111         1043                                             CALL            LCD_SHO
03D1 121078         1044     J2_4L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
03D4 3001FA         1045                                             JNB                     01H, J2_4L1
03D7 C201           1046                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1047     
03D9 B42A08         1048                                             CJNE            A, #'*', J2_4L2                    
                                  ; JP
03DC 7533F2         1049                                             MOV                     33H, #0F2H                 
                                                  ; LOAD ITS 8085 INST. SET
03DF 121186         1050                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
03E2 2148           1051                                             AJMP            MAIN2           
03E4 B44508         1052     J2_4L2:                         CJNE            A, #'E', J2_4L3                         ; J
                             PE
03E7 7533EA         1053                                             MOV                     33H, #0EAH                 
                                                  ; LOAD ITS 8085 INST. SET
03EA 121184         1054                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
03ED 2148           1055                                             AJMP            MAIN2
03EF B44FDF         1056     J2_4L3:                         CJNE            A, #'O', J2_4L1                         ; J
                             PO
03F2 7533E2         1057                                             MOV                     33H, #0E2H                 
                                                  ; LOAD ITS 8085 INST. SET
03F5 121184         1058                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
03F8 2148           1059                                             AJMP            MAIN2
                    1060     
03FA B45A08         1061     J2_5:                           CJNE            A, #'Z', J2_6                           ; J
                             Z 
03FD 7533CA         1062                                             MOV                     33H, #0CAH                 
                                                  ; LOAD ITS 8085 INST. SET
0400 121184         1063                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0403 2148           1064                                             AJMP            MAIN2
0405 6170           1065     J2_6:                           AJMP            J2_1                                       
                                  ; I PLACE THIS INSTRUCTION HERE DUE OUT OF RANGE ERROR
                    1066     
                    1067     ; FOR 'L' AS FIRST CHARACTER
0407 121111         1068     L2:                                     CALL            LCD_SHO
040A 121078         1069     L2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
040D 3001FA         1070                                             JNB                     01H, L2_1
0410 C201           1071                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1072     
0412 B44421         1073                                             CJNE            A, #'D', L2_2                      
                                  ; JUMP TO LDA'S FOURTH CHARACTER ELSE CONTINUE
0415 121111         1074                                             CALL            LCD_SHO
0418 7441           1075                                             MOV                     A, #'A'                    
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    22

                                                  
041A 121111         1076                                             CALL            LCD_SHO
041D 121078         1077     L2_1L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(4TH ALPHABET KEY) IS DEPRESSED
0420 3001FA         1078                                             JNB                     01H, L2_1L1
0423 C201           1079                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1080     
0425 B42A08         1081                                             CJNE            A, #'*', L2_1L2                    
                                  ; LDA
0428 75333A         1082                                             MOV                     33H, #3AH                  
                                                  ; LOAD ITS 8085 INST. SET
042B 121186         1083                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
042E 2148           1084                                             AJMP            MAIN2           
0430 B458EA         1085     L2_1L2:                         CJNE            A, #'X', L2_1L1                         ; L
                             DAX
0433 0209E0         1086                                             JMP                     LDAX_                      
                                                  ; JUMP TO LDAX'S OPERANDS ELSE CONTINUE
                    1087     
0436 B44812         1088     L2_2:                           CJNE            A, #'H', L2_3                           ; L
                             HLD 
                    1089                                             D_STR
043F 484C4400       1092                                             DB                      'HLD',0
0443 75332A         1093                                             MOV                     33H, #2AH                  
                                                  ; LOAD ITS 8085 INST. SET
0446 121186         1094                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0449 2148           1095                                             AJMP            MAIN2
                    1096     
044B B458BC         1097     L2_3:                           CJNE            A, #'X', L2_1                           ; J
                             UMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
044E 121111         1098                                             CALL            LCD_SHO
0451 7449           1099                                             MOV                     A, #'I'
0453 020A04         1100                                             JMP                     LXI_                       
                                                  ; JUMP TO LXI'S OPERANDS ELSE CONTINUE  
                    1101     
                    1102     ; FOR 'M' AS FIRST CHARACTER
0456 121111         1103     M2:                                     CALL            LCD_SHO
0459 121078         1104     M2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
045C 3001FA         1105                                             JNB                     01H, M2_1
045F C201           1106                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1107     
0461 B44F08         1108                                             CJNE            A, #'O', M2_2                      
                                  ; MOV
0464 121111         1109                                             CALL            LCD_SHO
0467 7456           1110                                             MOV                     A, #'V'
0469 020A3D         1111                                             JMP                     MOV_                       
                                                  ; JUMP TO MOV'S OPERAND CHARACTERS ELSE CONTINUE
                    1112     
046C B456EA         1113     M2_2:                           CJNE            A, #'V', M2_1                           ; M
                             VI
046F 121111         1114                                             CALL            LCD_SHO
0472 7449           1115                                             MOV                     A, #'I'
0474 020D0F         1116                                             JMP                     MVI_                       
                                                  ; JUMP TO MOV'S OPERAND CHARACTERS ELSE CONTINUE
                    1117     
                    1118     ; FOR 'O' AS FIRST CHARACTER
0477 121111         1119     O2:                                     CALL            LCD_SHO
047A 121078         1120     O2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
047D 3001FA         1121                                             JNB                     01H, O2_1
0480 C201           1122                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    23

                    1123     
0482 B4521C         1124                                             CJNE            A, #'R', O2_2                      
                                  ; JUMP TO OR'S THIRD CHARACTERS ELSE CONTINUE
0485 121111         1125                                             CALL            LCD_SHO
0488 121078         1126     O2_1L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
048B 3001FA         1127                                             JNB                     01H, O2_1L1
048E C201           1128                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1129     
0490 B44103         1130                                             CJNE            A, #'A', O2_1L2                    
                                  ; ORA
0493 020D63         1131                                             JMP                     ORA_                       
                                                  ; JUMP TO ORA'S OPERAND CHARACTERS ELSE CONTINUE
0496 B449EF         1132     O2_1L2:                         CJNE            A, #'I', O2_1L1                         ; O
                             RI
0499 7533F6         1133                                             MOV                     33H, #0F6H                 
                                                  ; LOAD ITS 8085 INST. SET
049C 12113C         1134                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
049F 2148           1135                                             AJMP            MAIN2
                    1136     
04A1 B455D6         1137     O2_2:                           CJNE            A, #'U', O2_1                           ; O
                             UT 
04A4 121111         1138                                             CALL            LCD_SHO
04A7 7454           1139                                             MOV                     A, #'T'
04A9 7533D3         1140                                             MOV                     33H, #0D3H                 
                                                  ; LOAD ITS 8085 INST. SET
04AC 12113C         1141                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
04AF 2148           1142                                             AJMP            MAIN2
                    1143     
                    1144     ; FOR 'P' AS FIRST CHARACTER
04B1 121111         1145     _P2:                            CALL            LCD_SHO
04B4 121078         1146     _P2_1:                          CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
04B7 3001FA         1147                                             JNB                     01H, _P2_1
04BA C201           1148                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1149     
04BC B44312         1150                                             CJNE            A, #'C', _P2_2                     
                                  ; PCHL
                    1151                                             D_STR
04C5 43484C00       1154                                             DB                      'CHL',0
04C9 7533E9         1155                                             MOV                     33H, #0E9H                 
                                                  ; LOAD ITS 8085 INST. SET
04CC 121120         1156                                             CALL            FLY_OPCODE_SKIP                    
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
04CF 2148           1157                                             AJMP            MAIN2
04D1 B44F08         1158     _P2_2:                          CJNE            A, #'O', _P2_3                          ; P
                             OP
04D4 121111         1159                                             CALL            LCD_SHO
04D7 7450           1160                                             MOV                     A, #'P'
04D9 020DB7         1161                                             JMP                     POP_                       
                                                  ; JUMP TO POP'S OPERAND CHARACTERS ELSE CONTINUE 
04DC B455D5         1162     _P2_3:                          CJNE            A, #'U', _P2_1                          ; P
                             USH
                    1163                                             D_STR
04E5 55534800       1166                                             DB                      'USH',0
04E9 020DF5         1167                                             JMP                     PUSH_                      
                                                  ; JUMP TO PUSH'S OPERAND CHARACTERS ELSE CONTINUE 
                    1168     
                    1169     ; FOR 'R' AS FIRST CHARACTER
04EC 121111         1170     _R2:                            CALL            LCD_SHO
04EF 121078         1171     _R2_1:                          CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    24

04F2 3001FA         1172                                             JNB                     01H, _R2_1
04F5 C201           1173                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1174     
04F7 B44121         1175                                             CJNE            A, #'A', _R2_2                     
                                  ; JUMP TO RA'S THIRD CHARACTERS ELSE CONTINUE
04FA 121111         1176                                             CALL            LCD_SHO
04FD 121078         1177     _R2_1L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0500 3001FA         1178                                             JNB                     01H, _R2_1L1
0503 C201           1179                                             CLR                     01H             
                    1180     
0505 B44C08         1181                                             CJNE            A, #'L', _R2_1L2                   
                                  ; RAL
0508 753317         1182                                             MOV                     33H, #17H                  
                                                  ; LOAD ITS 8085 INST. SET
050B 12111E         1183                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
050E 2148           1184                                             AJMP            MAIN2
0510 B452EA         1185     _R2_1L2:                        CJNE            A, #'R', _R2_1L1                        ; R
                             AR
0513 75331F         1186                                             MOV                     33H, #1FH                  
                                                  ; LOAD ITS 8085 INST. SET
0516 12111E         1187                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0519 2148           1188                                             AJMP            MAIN2
                    1189     ; -------
051B B44308         1190     _R2_2:                          CJNE            A, #'C', _R2_3                          ; R
                             C 
051E 7533D8         1191                                             MOV                     33H, #0D8H                 
                                                  ; LOAD ITS 8085 INST. SET
0521 12111E         1192                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0524 2148           1193                                             AJMP            MAIN2
                    1194     ; -------
0526 B4450D         1195     _R2_3:                          CJNE            A, #'E', _R2_4                          ; R
                             ET 
0529 121111         1196                                             CALL            LCD_SHO
052C 7454           1197                                             MOV                     A, #'T'
052E 7533C9         1198                                             MOV                     33H, #0C9H                 
                                                  ; LOAD ITS 8085 INST. SET
0531 12111E         1199                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0534 2148           1200                                             AJMP            MAIN2
                    1201     ; -------
0536 B4490D         1202     _R2_4:                          CJNE            A, #'I', _R2_5                          ; R
                             IM
0539 121111         1203                                             CALL            LCD_SHO
053C 744D           1204                                             MOV                     A, #'M'
053E 753320         1205                                             MOV                     33H, #20H                  
                                                  ; LOAD ITS 8085 INST. SET
0541 12111E         1206                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0544 2148           1207                                             AJMP            MAIN2
                    1208     ; -------
0546 B44C0D         1209     _R2_5:                          CJNE            A, #'L', _R2_6                          ; R
                             LC 
0549 121111         1210                                             CALL            LCD_SHO
054C 7443           1211                                             MOV                     A, #'C'
054E 753307         1212                                             MOV                     33H, #07H                  
                                                  ; LOAD ITS 8085 INST. SET
0551 12111E         1213                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0554 2148           1214                                             AJMP            MAIN2
                    1215     ; -------
0556 B44D08         1216     _R2_6:                          CJNE            A, #'M', _R2_7                          ; R
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    25

                             M 
0559 7533F8         1217                                             MOV                     33H, #0F8H                 
                                                  ; LOAD ITS 8085 INST. SET
055C 12111E         1218                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
055F 2148           1219                                             AJMP            MAIN2
                    1220     ; -------
0561 B44E21         1221     _R2_7:                          CJNE            A, #'N', _R2_8                          ; J
                             UMP TO RN'S THIRD CHARATER ELSE CONTINUE
0564 121111         1222                                             CALL            LCD_SHO
0567 121078         1223     _R2_7L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
056A 3001FA         1224                                             JNB                     01H, _R2_7L1
056D C201           1225                                             CLR                     01H             
                    1226     
056F B44308         1227                                             CJNE            A, #'C', _R2_7L2                   
                                  ; RNC
0572 7533D0         1228                                             MOV                     33H, #0D0H                 
                                                  ; LOAD ITS 8085 INST. SET
0575 12111E         1229                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0578 2148           1230                                             AJMP            MAIN2
057A B45AEA         1231     _R2_7L2:                        CJNE            A, #'Z', _R2_7L1                        ; R
                             NZ
057D 7533C0         1232                                             MOV                     33H, #0C0H                 
                                                  ; LOAD ITS 8085 INST. SET
0580 12111E         1233                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0583 2148           1234                                             AJMP            MAIN2
                    1235     ; -------
0585 B4502C         1236     _R2_8:                          CJNE            A, #'P', _R2_9                          ; J
                             UMP TO RP'S THIRD CHARACTER ELSE CONTINUE 
0588 121111         1237                                             CALL            LCD_SHO
058B 121078         1238     _R2_8L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
058E 3001FA         1239                                             JNB                     01H, _R2_8L1
0591 C201           1240                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1241     
0593 B42A08         1242                                             CJNE            A, #'*', _R2_8L2                   
                                  ; RP
0596 7533F0         1243                                             MOV                     33H, #0F0H                 
                                                  ; LOAD ITS 8085 INST. SET
0599 121120         1244                                             CALL            FLY_OPCODE_SKIP                    
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
059C 2148           1245                                             AJMP            MAIN2           
                    1246     
059E B44508         1247     _R2_8L2:                        CJNE            A, #'E', _R2_8L3                        ; R
                             PE
05A1 7533E8         1248                                             MOV                     33H, #0E8H                 
                                                  ; LOAD ITS 8085 INST. SET
05A4 12111E         1249                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
05A7 2148           1250                                             AJMP            MAIN2
                    1251     
05A9 B44FDF         1252     _R2_8L3:                        CJNE            A, #'O', _R2_8L1                        ; R
                             PO
05AC 7533E0         1253                                             MOV                     33H, #0E0H                 
                                              ; LOAD ITS 8085 INST. SET
05AF 12111E         1254                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
05B2 2148           1255                                             AJMP            MAIN2
                    1256     ; -------
05B4 B4520D         1257     _R2_9:                          CJNE            A, #'R', _R2_10                         ; R
                             RC 
05B7 121111         1258                                             CALL            LCD_SHO
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    26

05BA 7443           1259                                             MOV                     A, #'C'
05BC 75330F         1260                                             MOV                     33H, #0FH                  
                                                  ; LOAD ITS 8085 INST. SET
05BF 12111E         1261                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
05C2 2148           1262                                             AJMP            MAIN2
                    1263     ; -------
05C4 B45358         1264     _R2_10:                         CJNE            A, #'S', _R2_11                         ; R
                             ST
05C7 121111         1265                                             CALL            LCD_SHO
05CA 7454           1266                                             MOV                     A, #'T'
05CC 121111         1267                                             CALL            LCD_SHO                            
                                          
05CF 7420           1268                                             MOV                     A, #' '
05D1 121111         1269                                             CALL            LCD_SHO                            
                                          ; GET RST'S 4TH CHARACTER
                    1270     
05D4 121078         1271     _R2_10L1:                       CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
05D7 3001FA         1272                                             JNB                     01H, _R2_10L1              
                                          
05DA C201           1273                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1274     
05DC B43005         1275                                             CJNE            A, #'0', _R2_10L2                  
                                  ; RST 0
05DF 7533C7         1276                                             MOV                     33H, #0C7H                 
                                                  ; LOAD ITS 8085 INST. SET
05E2 8036           1277                                             SJMP            _R2_10L9
05E4 B43105         1278     _R2_10L2:                       CJNE            A, #'1', _R2_10L3                       ; R
                             ST 1
05E7 7533CF         1279                                             MOV                     33H, #0CFH                 
                                                  ; LOAD ITS 8085 INST. SET
05EA 802E           1280                                             SJMP            _R2_10L9
05EC B43205         1281     _R2_10L3:                       CJNE            A, #'2', _R2_10L4                       ; R
                             ST 2
05EF 7533D7         1282                                             MOV                     33H, #0D7H                 
                                                  ; LOAD ITS 8085 INST. SET
05F2 8026           1283                                             SJMP            _R2_10L9
05F4 B43305         1284     _R2_10L4:                       CJNE            A, #'3', _R2_10L5                       ; R
                             ST 3
05F7 7533DF         1285                                             MOV                     33H, #0DFH                 
                                                  ; LOAD ITS 8085 INST. SET
05FA 801E           1286                                             SJMP            _R2_10L9
05FC B43405         1287     _R2_10L5:                       CJNE            A, #'4', _R2_10L6                       ; R
                             ST 4
05FF 7533E7         1288                                             MOV                     33H, #0E7H                 
                                                  ; LOAD ITS 8085 INST. SET
0602 8016           1289                                             SJMP            _R2_10L9
0604 B43505         1290     _R2_10L6:                       CJNE            A, #'5', _R2_10L7                       ; R
                             ST 5
0607 7533EF         1291                                             MOV                     33H, #0EFH                 
                                                  ; LOAD ITS 8085 INST. SET
060A 800E           1292                                             SJMP            _R2_10L9
060C B43605         1293     _R2_10L7:                       CJNE            A, #'6', _R2_10L8                       ; R
                             ST 6
060F 7533F7         1294                                             MOV                     33H, #0F7H                 
                                                  ; LOAD ITS 8085 INST. SET
0612 8006           1295                                             SJMP            _R2_10L9
0614 B437BD         1296     _R2_10L8:                       CJNE            A, #'7', _R2_10L1                       ; R
                             ST 7
0617 7533FF         1297                                             MOV                     33H, #0FFH                 
                                                  ; LOAD ITS 8085 INST. SET
061A 12111E         1298     _R2_10L9:                       CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
061D 2148           1299                                             AJMP            MAIN2
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    27

                    1300     ; -------
061F B45A08         1301     _R2_11:                         CJNE            A, #'Z', _R2_12                         ; J
                             UMP TO AD'S THIRD CHARACTER ELSE CONTINUE 
0622 7533C8         1302                                             MOV                     33H, #0C8H                 
                                                  ; LOAD ITS 8085 INST. SET
0625 12111E         1303                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0628 2148           1304                                             AJMP            MAIN2
062A 81EF           1305     _R2_12:                         AJMP            _R2_1                                      
                                  ; I PLACED THIS INSTRUCTION DUE TO OUT OF RANGE ERROR
                    1306     
                    1307     ; FOR 'S' AS FIRST CHARACTER
062C 121111         1308     S2:                                     CALL            LCD_SHO
062F 121078         1309     S2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0632 3001FA         1310                                             JNB                     01H, S2_1
0635 C201           1311                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1312     
0637 B4421C         1313                                             CJNE            A, #'B', S2_2                      
                                  ; JUMP TO SB'S THIRD CHARACTER
063A 121111         1314                                             CALL            LCD_SHO
063D 121078         1315     S2_1L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED 
0640 3001FA         1316                                             JNB                     01H, S2_1L1
0643 C201           1317                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
0645 B44203         1318                                             CJNE            A, #'B', S2_1L2                    
                                  ; SBB
0648 020E30         1319                                             JMP                     SBB_                       
                                                  ; JUMP TO SBB OPERAND CHARACTERS
064B B449EF         1320     S2_1L2:                         CJNE            A, #'I', S2_1L1                         ; S
                             BI                                   
064E 7533DE         1321                                             MOV                     33H, #0DEH                 
                                                  ; LOAD ITS 8085 INST. SET
0651 12113C         1322                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0654 2148           1323                                             AJMP            MAIN2
                    1324     
0656 B44812         1325     S2_2:                           CJNE            A, #'H', S2_3                           ; S
                             HLD 
                    1326                                             D_STR
065F 484C4400       1329                                             DB                      'HLD',0
0663 753322         1330                                             MOV                     33H, #22H                  
                                                  ; LOAD ITS 8085 INST. SET
0666 121186         1331                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0669 2148           1332                                             AJMP            MAIN2
066B B4490D         1333     S2_3:                           CJNE            A, #'I', S2_4                           ; S
                             IM 
066E 121111         1334                                             CALL            LCD_SHO
0671 744D           1335                                             MOV                     A, #'M'
0673 753330         1336                                             MOV                     33H, #30H                  
                                                  ; LOAD ITS 8085 INST. SET
0676 12111E         1337                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0679 2148           1338                                             AJMP            MAIN2
                    1339     
067B B45012         1340     S2_4:                           CJNE            A, #'P', S2_5                           ; S
                             PHL
                    1341                                             D_STR
0684 50484C00       1344                                             DB                      'PHL',0
0688 7533F9         1345                                             MOV                     33H, #0F9H                 
                                                  ; LOAD ITS 8085 INST. SET
068B 121186         1346                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    28

068E 2148           1347                                             AJMP            MAIN2
                    1348     
0690 B45435         1349     S2_5:                           CJNE            A, #'T', S2_6                           ; J
                             UMP TO ST'S THIRD CHARACTER ELSE CONTINUE 
0693 121111         1350                                             CALL            LCD_SHO
                    1351                                             
0696 121078         1352     S2_5L1:                         CALL            KEYPAD_ID
0699 3001FA         1353                                             JNB                     01H, S2_5L1
069C C201           1354                                             CLR                     01H     
069E B4411C         1355                                             CJNE            A, #'A', S2_5L2                    
                                  ; GET STA'S FOURTH CHARACTER
06A1 121111         1356                                             CALL            LCD_SHO                            
                                          
06A4 121078         1357     S2_5L1L1:                       CALL            KEYPAD_ID                                  
                                  
06A7 3001FA         1358                                             JNB                     01H, S2_5L1L1
06AA C201           1359                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1360     
06AC B42A08         1361                                             CJNE            A, #'*', S2_5L1L2                  
                                  ; STA
06AF 753332         1362                                             MOV                     33H, #32H                  
                                                  ; LOAD ITS 8085 INST. SET
06B2 121186         1363                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
06B5 2148           1364                                             AJMP            MAIN2           
06B7 B458EA         1365     S2_5L1L2:                       CJNE            A, #'X', S2_5L1L1                       ; S
                             TAX
06BA 020ED8         1366                                             JMP                     STAX_                      
                                                  ; JUMP TO STAX'S OPERAND CHARACTERS
                    1367     
06BD B443D6         1368     S2_5L2:                         CJNE            A, #'C', S2_5L1                         ; S
                             TC
06C0 753337         1369                                             MOV                     33H, #37H                  
                                                  ; LOAD ITS 8085 INST. SET
06C3 12111E         1370                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
06C6 2148           1371                                             AJMP            MAIN2
                    1372     
06C8 B4551C         1373     S2_6:                           CJNE            A, #'U', S2_7                           ; J
                             UMP TO SU'S THIRD CHARACTER ELSE CONTINUE 
06CB 121111         1374                                             CALL            LCD_SHO
06CE 121078         1375     S2_6L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE THAT A KEY IS PREESSED
06D1 3001FA         1376                                             JNB                     01H, S2_6L1
06D4 C201           1377                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1378     
06D6 B44203         1379                                             CJNE            A, #'B', S2_6L2                    
                                  ; SUB
06D9 020E84         1380                                             JMP                     SUB_                       
                                                  ; JUMP TO SUB'S OPERAND CHARACTERS
06DC B449EF         1381     S2_6L2:                         CJNE            A, #'I', S2_6L1                         ; S
                             UI                                   
06DF 7533D6         1382                                             MOV                     33H, #0D6H                 
                                                  ; LOAD ITS 8085 INST. SET
06E2 12113C         1383                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
06E5 2148           1384                                             AJMP            MAIN2
06E7 C12F           1385     S2_7:                           AJMP            S2_1                                       
                                  ; I PLACED THIS INSTRUCTION DUE TO OUT OF RANGE ERROR
                    1386     
                    1387     ; FOR 'X' AS FIRST CHARACTER
06E9 121111         1388     X2:                                     CALL            LCD_SHO
06EC 121078         1389     X2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    29

06EF 3001FA         1390                                             JNB                     01H, X2_1
06F2 C201           1391                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1392     
06F4 B44312         1393                                             CJNE            A, #'C', X2_2                      
                                  ; XCHG ELSE CONTINUE
                    1394                                             D_STR
06FD 43484700       1397                                             DB                      'CHG',0
0701 7533EB         1398                                             MOV                     33H, #0EBH                 
                                                  ; LOAD ITS 8085 INST. SET
0704 121120         1399                                             CALL            FLY_OPCODE_SKIP                    
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0707 2148           1400                                             AJMP            MAIN2
                    1401     
0709 B4521C         1402     X2_2:                           CJNE            A, #'R', X2_3                           ; J
                             UMP TO AD'S THIRD CHARACTER ELSE CONTINUE 
070C 121111         1403                                             CALL            LCD_SHO
070F 121078         1404     X2_2L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0712 3001FA         1405                                             JNB                     01H, X2_2L1
0715 C201           1406                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    1407                                             
0717 B44103         1408                                             CJNE            A, #'A', X2_2L2                    
                                  ; XRA
071A 020EFC         1409                                             JMP                     XRA_                       
                                                          ; JUMP TO XRA'S OPERAND CHARACTERS
071D B449EF         1410     X2_2L2:                         CJNE            A, #'I', X2_2L1                         ; X
                             RI
0720 7533EE         1411                                             MOV                     33H, #0EEH                 
                                                  ; LOAD ITS 8085 INST. SET
0723 12113C         1412                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0726 2148           1413                                             AJMP            MAIN2
                    1414     
0728 B454C1         1415     X2_3:                           CJNE            A, #'T', X2_1                           ; X
                             THL ELSE CONTINUE 
                    1416                                             D_STR
0731 54484C00       1419                                             DB                      'THL',0
0735 7533E3         1420                                             MOV                     33H, #0E3H                 
                                                  ; LOAD ITS 8085 INST. SET
0738 121120         1421                                             CALL            FLY_OPCODE_SKIP                    
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
073B 2148           1422                                             AJMP            MAIN2
                    1423     
                    1424     ; ------------------------------------------ OPERAND CHARACTER KEY COMBINATION ------------
                             -----------------------------------------------
                    1425     
                    1426     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1427     ; ***** FOR 'ADC...'
073D 121111         1428     ADC_:                           CALL            LCD_SHO
0740 7420           1429                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE 
0742 121111         1430                                             CALL            LCD_SHO
0745 121078         1431     ADC_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0748 3001FA         1432                                             JNB                     01H, ADC_L1
074B C201           1433                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1434     
074D B44105         1435                                             CJNE            A, #'A', ADC_L2                    
                                  ; ADC A
0750 75338F         1436                                             MOV                     33H, #8FH                  
                                                  ; LOAD ITS 8085 INST. SET
0753 8036           1437                                             SJMP            ADC_L9
0755 B44205         1438     ADC_L2:                         CJNE            A, #'B', ADC_L3                         ; A
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    30

                             DC B
0758 753388         1439                                             MOV                     33H, #88H                  
                                                  ; LOAD ITS 8085 INST. SET
075B 802E           1440                                             SJMP            ADC_L9
075D B44305         1441     ADC_L3:                         CJNE            A, #'C', ADC_L4                         ; A
                             DC C
0760 753389         1442                                             MOV                     33H, #89H                  
                                                  ; LOAD ITS 8085 INST. SET
0763 8026           1443                                             SJMP            ADC_L9
0765 B44405         1444     ADC_L4:                         CJNE            A, #'D', ADC_L5                         ; A
                             DC D
0768 75338A         1445                                             MOV                     33H, #8AH                  
                                                  ; LOAD ITS 8085 INST. SET
076B 801E           1446                                             SJMP            ADC_L9
076D B44505         1447     ADC_L5:                         CJNE            A, #'E', ADC_L6                         ; A
                             DC E
0770 75338B         1448                                             MOV                     33H, #8BH                  
                                                  ; LOAD ITS 8085 INST. SET
0773 8016           1449                                             SJMP            ADC_L9
0775 B44805         1450     ADC_L6:                         CJNE            A, #'H', ADC_L7                         ; A
                             DC H
0778 75338C         1451                                             MOV                     33H, #8CH                  
                                                  ; LOAD ITS 8085 INST. SET
077B 800E           1452                                             SJMP            ADC_L9
077D B44C05         1453     ADC_L7:                         CJNE            A, #'L', ADC_L8                         ; A
                             DC L
0780 75338D         1454                                             MOV                     33H, #8DH                  
                                                  ; LOAD ITS 8085 INST. SET
0783 8006           1455                                             SJMP            ADC_L9
0785 B44DBD         1456     ADC_L8:                         CJNE            A, #'M', ADC_L1                         ; A
                             DC M
0788 75338E         1457                                             MOV                     33H, #8EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1458     
078B 12111E         1459     ADC_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
078E 020148         1460                                             LJMP            MAIN2
                    1461     
                    1462     ; ***** FOR 'ADD...'
0791 121111         1463     ADD_:                           CALL            LCD_SHO
0794 7420           1464                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0796 121111         1465                                             CALL            LCD_SHO
0799 121078         1466     ADD_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
079C 3001FA         1467                                             JNB                     01H, ADD_L1
079F C201           1468                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1469     
07A1 B44105         1470                                             CJNE            A, #'A', ADD_L2                    
                                  ; ADD A
07A4 753387         1471                                             MOV                     33H, #87H                  
                                                  ; LOAD ITS 8085 INST. SET
07A7 8036           1472                                             SJMP            ADD_L9
07A9 B44205         1473     ADD_L2:                         CJNE            A, #'B', ADD_L3                         ; A
                             DD B
07AC 753380         1474                                             MOV                     33H, #80H                  
                                                  ; LOAD ITS 8085 INST. SET
07AF 802E           1475                                             SJMP            ADD_L9     
07B1 B44305         1476     ADD_L3:                         CJNE            A, #'C', ADD_L4                         ; A
                             DD C
07B4 753381         1477                                             MOV                     33H, #81H                  
                                                  ; LOAD ITS 8085 INST. SET
07B7 8026           1478                                             SJMP            ADD_L9
07B9 B44405         1479     ADD_L4:                         CJNE            A, #'D', ADD_L5                         ; A
                             DD D
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    31

07BC 753382         1480                                             MOV                     33H, #82H                  
                                                  ; LOAD ITS 8085 INST. SET
07BF 801E           1481                                             SJMP            ADD_L9
07C1 B44505         1482     ADD_L5:                         CJNE            A, #'E', ADD_L6                         ; A
                             DD E
07C4 753383         1483                                             MOV                     33H, #83H                  
                                                  ; LOAD ITS 8085 INST. SET
07C7 8016           1484                                             SJMP            ADD_L9
07C9 B44805         1485     ADD_L6:                         CJNE            A, #'H', ADD_L7                         ; A
                             DD H
07CC 753384         1486                                             MOV                     33H, #84H                  
                                                  ; LOAD ITS 8085 INST. SET
07CF 800E           1487                                             SJMP            ADD_L9
07D1 B44C05         1488     ADD_L7:                         CJNE            A, #'L', ADD_L8                         ; A
                             DD L
07D4 753385         1489                                             MOV                     33H, #85H                  
                                                  ; LOAD ITS 8085 INST. SET
07D7 8006           1490                                             SJMP            ADD_L9
07D9 B44DBD         1491     ADD_L8:                         CJNE            A, #'M', ADD_L1                         ; A
                             DD M
07DC 753386         1492                                             MOV                     33H, #86H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1493     
07DF 12111E         1494     ADD_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
07E2 020148         1495                                             LJMP            MAIN2
                    1496     
                    1497     ; ***** FOR 'ANA...'
07E5 121111         1498     ANA_:                           CALL            LCD_SHO
07E8 7420           1499                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
07EA 121111         1500                                             CALL            LCD_SHO
07ED 121078         1501     ANA_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
07F0 3001FA         1502                                             JNB                     01H, ANA_L1
07F3 C201           1503                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1504     
07F5 B44105         1505                                             CJNE            A, #'A', ANA_L2                    
                                  ; ANA A
07F8 7533A7         1506                                             MOV                     33H, #0A7H                 
                                                  ; LOAD ITS 8085 INST. SET
07FB 8036           1507                                             SJMP            ANA_L9
07FD B44205         1508     ANA_L2:                         CJNE            A, #'B', ANA_L3                         ; A
                             NA B
0800 7533A0         1509                                             MOV                     33H, #0A0H                 
                                                  ; LOAD ITS 8085 INST. SET
0803 802E           1510                                             SJMP            ANA_L9
0805 B44305         1511     ANA_L3:                         CJNE            A, #'C', ANA_L4                         ; A
                             NA C
0808 7533A1         1512                                             MOV                     33H, #0A1H                 
                                                  ; LOAD ITS 8085 INST. SET
080B 8026           1513                                             SJMP            ANA_L9
080D B44405         1514     ANA_L4:                         CJNE            A, #'D', ANA_L5                         ; A
                             NA D
0810 7533A2         1515                                             MOV                     33H, #0A2H                 
                                                  ; LOAD ITS 8085 INST. SET
0813 801E           1516                                             SJMP            ANA_L9
0815 B44505         1517     ANA_L5:                         CJNE            A, #'E', ANA_L6                         ; A
                             NA E
0818 7533A3         1518                                             MOV                     33H, #0A3H                 
                                                  ; LOAD ITS 8085 INST. SET
081B 8016           1519                                             SJMP            ANA_L9
081D B44805         1520     ANA_L6:                         CJNE            A, #'H', ANA_L7                         ; A
                             NA H
0820 7533A4         1521                                             MOV                     33H, #0A4H                 
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    32

                                                  ; LOAD ITS 8085 INST. SET
0823 800E           1522                                             SJMP            ANA_L9
0825 B44C05         1523     ANA_L7:                         CJNE            A, #'L', ANA_L8                         ; A
                             NA L
0828 7533A5         1524                                             MOV                     33H, #0A5H                 
                                                  ; LOAD ITS 8085 INST. SET
082B 8006           1525                                             SJMP            ANA_L9
082D B44DBD         1526     ANA_L8:                         CJNE            A, #'M', ANA_L1                         ; A
                             NA M
0830 7533A6         1527                                             MOV                     33H, #0A6H                 
                                                  ; LOAD ITS 8085 INST. SET
                    1528     
0833 12111E         1529     ANA_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0836 020148         1530                                             lJMP            MAIN2
                    1531     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1532     ; ***** FOR 'CMP...'
0839 121111         1533     CMP_:                           CALL            LCD_SHO
083C 7420           1534                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
083E 121111         1535                                             CALL            LCD_SHO
0841 121078         1536     CMP_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0844 3001FA         1537                                             JNB                     01H, CMP_L1
0847 C201           1538                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1539     
0849 B44105         1540                                             CJNE            A, #'A', CMP_L2                    
                                  ; CMP A
084C 7533BF         1541                                             MOV                     33H, #0BFH                 
                                                  ; LOAD ITS 8085 INST. SET
084F 8036           1542                                             SJMP            CMP_L9
0851 B44205         1543     CMP_L2:                         CJNE            A, #'B', CMP_L3                         ; C
                             MP B
0854 7533B8         1544                                             MOV                     33H, #0B8H                 
                                                  ; LOAD ITS 8085 INST. SET
0857 802E           1545                                             SJMP            CMP_L9
0859 B44305         1546     CMP_L3:                         CJNE            A, #'C', CMP_L4                         ; C
                             MP C
085C 7533B9         1547                                             MOV                     33H, #0B9H                 
                                                  ; LOAD ITS 8085 INST. SET
085F 8026           1548                                             SJMP            CMP_L9
0861 B44405         1549     CMP_L4:                         CJNE            A, #'D', CMP_L5                         ; C
                             MP D
0864 7533BA         1550                                             MOV                     33H, #0BAH                 
                                                  ; LOAD ITS 8085 INST. SET
0867 801E           1551                                             SJMP            CMP_L9
0869 B44505         1552     CMP_L5:                         CJNE            A, #'E', CMP_L6                         ; C
                             MP E
086C 7533BB         1553                                             MOV                     33H, #0BBH                 
                                                  ; LOAD ITS 8085 INST. SET
086F 8016           1554                                             SJMP            CMP_L9
0871 B44805         1555     CMP_L6:                         CJNE            A, #'H', CMP_L7                         ; C
                             MP H
0874 7533BC         1556                                             MOV                     33H, #0BCH                 
                                                  ; LOAD ITS 8085 INST. SET
0877 800E           1557                                             SJMP            CMP_L9
0879 B44C05         1558     CMP_L7:                         CJNE            A, #'L', CMP_L8                         ; C
                             MP L
087C 7533BD         1559                                             MOV                     33H, #0BDH                 
                                                  ; LOAD ITS 8085 INST. SET
087F 8006           1560                                             SJMP            CMP_L9
0881 B44DBD         1561     CMP_L8:                         CJNE            A, #'M', CMP_L1                         ; C
                             MP M
0884 7533BE         1562                                             MOV                     33H, #0BEH                 
                                                  ; LOAD ITS 8085 INST. SET
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    33

                    1563     
0887 12111E         1564     CMP_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
088A 020148         1565                                             lJMP            MAIN2
                    1566     
                    1567     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1568     ; ***** FOR 'DAD...'
088D 121111         1569     DAD_:                           CALL            LCD_SHO
0890 7420           1570                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0892 121111         1571                                             CALL            LCD_SHO
0895 121078         1572     DAD_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0898 3001FA         1573                                             JNB                     01H, DAD_L1
089B C201           1574                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1575     
089D B44205         1576                                             CJNE            A, #'B', DAD_L2                    
                                  ; DAD B
08A0 753309         1577                                             MOV                     33H, #09H                  
                                                  ; LOAD ITS 8085 INST. SET
08A3 801B           1578                                             SJMP            DAD_L5
08A5 B44405         1579     DAD_L2:                         CJNE            A, #'D', DAD_L3                         ; D
                             AD D
08A8 753319         1580                                             MOV                     33H, #19H                  
                                                  ; LOAD ITS 8085 INST. SET
08AB 8013           1581                                             SJMP            DAD_L5
08AD B44805         1582     DAD_L3:                         CJNE            A, #'H', DAD_L4                         ; D
                             AD H
08B0 753329         1583                                             MOV                     33H, #29H                  
                                                  ; LOAD ITS 8085 INST. SET
08B3 800B           1584                                             SJMP            DAD_L5
08B5 B453DD         1585     DAD_L4:                         CJNE            A, #'S', DAD_L1                         ; D
                             AD SP
08B8 121111         1586                                             CALL            LCD_SHO
08BB 7450           1587                                             MOV                     A, #'P'
08BD 753339         1588                                             MOV                     33H, #39H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1589     
08C0 12111E         1590     DAD_L5:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
08C3 020148         1591                                             lJMP            MAIN2
                    1592     
                    1593     ; ***** FOR 'DCR...'
08C6 121111         1594     DCR_:                           CALL            LCD_SHO
08C9 7420           1595                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
08CB 121111         1596                                             CALL            LCD_SHO
08CE 121078         1597     DCR_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
08D1 3001FA         1598                                             JNB                     01H, DCR_L1
08D4 C201           1599                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1600     
08D6 B44105         1601                                             CJNE            A, #'A', DCR_L2                    
                                  ; DCR A
08D9 75333D         1602                                             MOV                     33H, #3DH                  
                                                  ; LOAD ITS 8085 INST. SET
08DC 8036           1603                                             SJMP            DCR_L9
08DE B44205         1604     DCR_L2:                         CJNE            A, #'B', DCR_L3                         ; D
                             CR B
08E1 753305         1605                                             MOV                     33H, #05H                  
                                                  ; LOAD ITS 8085 INST. SET
08E4 802E           1606                                             SJMP            DCR_L9
08E6 B44305         1607     DCR_L3:                         CJNE            A, #'C', DCR_L4                         ; D
                             CR C
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    34

08E9 75330D         1608                                             MOV                     33H, #0DH                  
                                                  ; LOAD ITS 8085 INST. SET
08EC 8026           1609                                             SJMP            DCR_L9
08EE B44405         1610     DCR_L4:                         CJNE            A, #'D', DCR_L5                         ; D
                             CR D
08F1 753315         1611                                             MOV                     33H, #15H                  
                                                  ; LOAD ITS 8085 INST. SET
08F4 801E           1612                                             SJMP            DCR_L9
08F6 B44505         1613     DCR_L5:                         CJNE            A, #'E', DCR_L6                         ; D
                             CR E
08F9 75331D         1614                                             MOV                     33H, #1DH                  
                                                  ; LOAD ITS 8085 INST. SET
08FC 8016           1615                                             SJMP            DCR_L9
08FE B44805         1616     DCR_L6:                         CJNE            A, #'H', DCR_L7                         ; D
                             CR H
0901 753325         1617                                             MOV                     33H, #25H                  
                                                  ; LOAD ITS 8085 INST. SET
0904 800E           1618                                             SJMP            DCR_L9
0906 B44C05         1619     DCR_L7:                         CJNE            A, #'L', DCR_L8                         ; D
                             CR L
0909 75332D         1620                                             MOV                     33H, #2DH                  
                                                  ; LOAD ITS 8085 INST. SET
090C 8006           1621                                             SJMP            DCR_L9
090E B44DBD         1622     DCR_L8:                         CJNE            A, #'M', DCR_L1                         ; D
                             CR M
0911 753335         1623                                             MOV                     33H, #35H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1624     
0914 12111E         1625     DCR_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0917 020148         1626                                             LJMP            MAIN2
                    1627     
                    1628     ; ***** FOR 'DCX...'
091A 121111         1629     DCX_:                           CALL            LCD_SHO
091D 7420           1630                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
091F 121111         1631                                             CALL            LCD_SHO
0922 121078         1632     DCX_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0925 3001FA         1633                                             JNB                     01H, DCX_L1
0928 C201           1634                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1635     
092A B44205         1636                                             CJNE            A, #'B', DCX_L2                    
                                  ; DCX B
092D 75330B         1637                                             MOV                     33H, #0BH                  
                                                  ; LOAD ITS 8085 INST. SET
0930 801B           1638                                             SJMP            DCX_L5
0932 B44405         1639     DCX_L2:                         CJNE            A, #'D', DCX_L3                         ; D
                             CX D
0935 75331B         1640                                             MOV                     33H, #1BH                  
                                                  ; LOAD ITS 8085 INST. SET
0938 8013           1641                                             SJMP            DCX_L5
093A B44805         1642     DCX_L3:                         CJNE            A, #'H', DCX_L4                         ; D
                             CX H
093D 75332B         1643                                             MOV                     33H, #2BH                  
                                                  ; LOAD ITS 8085 INST. SET
0940 800B           1644                                             SJMP            DCX_L5
0942 B453DD         1645     DCX_L4:                         CJNE            A, #'S', DCX_L1                         ; D
                             CX SP
0945 121111         1646                                             CALL            LCD_SHO
0948 7450           1647                                             MOV                     A, #'P'
094A 75333B         1648                                             MOV                     33H, #3BH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1649     
094D 12111E         1650     DCX_L5:                         CALL            FLY_OPCODE                                 
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    35

                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0950 020148         1651                                             LJMP            MAIN2
                    1652     
                    1653     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1654     ; ***** FOR 'INR...'
0953 121111         1655     INR_:                           CALL            LCD_SHO
0956 7420           1656                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0958 121111         1657                                             CALL            LCD_SHO
095B 121078         1658     INR_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
095E 3001FA         1659                                             JNB                     01H, INR_L1
0961 C201           1660                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1661     
0963 B44105         1662                                             CJNE            A, #'A', INR_L2                    
                                  ; INR A
0966 75333C         1663                                             MOV                     33H, #3CH                  
                                                  ; LOAD ITS 8085 INST. SET
0969 8036           1664                                             SJMP            INR_L9
096B B44205         1665     INR_L2:                         CJNE            A, #'B', INR_L3                         ; I
                             NR B
096E 753304         1666                                             MOV                     33H, #04H                  
                                                  ; LOAD ITS 8085 INST. SET
0971 802E           1667                                             SJMP            INR_L9
0973 B44305         1668     INR_L3:                         CJNE            A, #'C', INR_L4                         ; I
                             NR C
0976 75330C         1669                                             MOV                     33H, #0CH                  
                                                  ; LOAD ITS 8085 INST. SET
0979 8026           1670                                             SJMP            INR_L9
097B B44405         1671     INR_L4:                         CJNE            A, #'D', INR_L5                         ; I
                             NR D
097E 753314         1672                                             MOV                     33H, #14H                  
                                                  ; LOAD ITS 8085 INST. SET
0981 801E           1673                                             SJMP            INR_L9
0983 B44505         1674     INR_L5:                         CJNE            A, #'E', INR_L6                         ; I
                             NR E
0986 75331C         1675                                             MOV                     33H, #1CH                  
                                                  ; LOAD ITS 8085 INST. SET
0989 8016           1676                                             SJMP            INR_L9
098B B44805         1677     INR_L6:                         CJNE            A, #'H', INR_L7                         ; I
                             NR H
098E 753324         1678                                             MOV                     33H, #24H                  
                                                  ; LOAD ITS 8085 INST. SET
0991 800E           1679                                             SJMP            INR_L9
0993 B44C05         1680     INR_L7:                         CJNE            A, #'L', INR_L8                         ; I
                             NR L
0996 75332C         1681                                             MOV                     33H, #2CH                  
                                                  ; LOAD ITS 8085 INST. SET
0999 8006           1682                                             SJMP            INR_L9
099B B44DBD         1683     INR_L8:                         CJNE            A, #'M', INR_L1                         ; I
                             NR M
099E 753334         1684                                             MOV                     33H, #34H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1685     
09A1 12111E         1686     INR_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
09A4 020148         1687                                             LJMP            MAIN2
                    1688     
                    1689     ; ***** FOR 'INX...'
09A7 121111         1690     INX_:                           CALL            LCD_SHO
09AA 7420           1691                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
09AC 121111         1692                                             CALL            LCD_SHO
09AF 121078         1693     INX_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    36

09B2 3001FA         1694                                             JNB                     01H, INX_L1
09B5 C201           1695                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1696     
09B7 B44205         1697                                             CJNE            A, #'B', INX_L2                    
                                  ; INX B
09BA 753303         1698                                             MOV                     33H, #03H                  
                                                  ; LOAD ITS 8085 INST. SET
09BD 801B           1699                                             SJMP            INX_L5
09BF B44405         1700     INX_L2:                         CJNE            A, #'D', INX_L3                         ; I
                             NX D
09C2 753313         1701                                             MOV                     33H, #13H                  
                                                  ; LOAD ITS 8085 INST. SET
09C5 8013           1702                                             SJMP            INX_L5
09C7 B44805         1703     INX_L3:                         CJNE            A, #'H', INX_L4                         ; I
                             NX H
09CA 753323         1704                                             MOV                     33H, #23H                  
                                                  ; LOAD ITS 8085 INST. SET
09CD 800B           1705                                             SJMP            INX_L5
09CF B453DD         1706     INX_L4:                         CJNE            A, #'S', INX_L1                         ; I
                             NX SP
09D2 121111         1707                                             CALL            LCD_SHO
09D5 7450           1708                                             MOV                     A, #'P'
09D7 753333         1709                                             MOV                     33H, #33H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1710     
09DA 12111E         1711     INX_L5:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
09DD 020148         1712                                             LJMP            MAIN2
                    1713     
                    1714     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1715     ; ***** FOR 'LDAX...'
09E0 121111         1716     LDAX_:                          CALL            LCD_SHO
09E3 7420           1717                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
09E5 121111         1718                                             CALL            LCD_SHO
09E8 121078         1719     LDAX_L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
09EB 3001FA         1720                                             JNB                     01H, LDAX_L1
09EE C201           1721                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1722     
09F0 B44205         1723                                             CJNE            A, #'B', LDAX_L2                   
                                  ; LDAX B
09F3 75330A         1724                                             MOV                     33H, #0AH                  
                                                  ; LOAD ITS 8085 INST. SET
09F6 8006           1725                                             SJMP            LDAX_L3
09F8 B444ED         1726     LDAX_L2:                        CJNE            A, #'D', LDAX_L1                        ; L
                             DAX D
09FB 75331A         1727                                             MOV                     33H, #1AH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1728     
09FE 12111E         1729     LDAX_L3:                        CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0A01 020148         1730                                             LJMP            MAIN2
                    1731     
                    1732     ; ***** FOR 'LXI...'
0A04 121111         1733     LXI_:                           CALL            LCD_SHO
0A07 7420           1734                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0A09 121111         1735                                             CALL            LCD_SHO
0A0C 121078         1736     LXI_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0A0F 3001FA         1737                                             JNB                     01H, LXI_L1
0A12 C201           1738                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    37

                    1739     
0A14 B44205         1740                                             CJNE            A, #'B', LXI_L2                    
                                  ; LXI B
0A17 753301         1741                                             MOV                     33H, #01H                  
                                                  ; LOAD ITS 8085 INST. SET
0A1A 801B           1742                                             SJMP            LXI_L5
0A1C B44405         1743     LXI_L2:                         CJNE            A, #'D', LXI_L3                         ; L
                             XI D
0A1F 753311         1744                                             MOV                     33H, #11H                  
                                                  ; LOAD ITS 8085 INST. SET
0A22 8013           1745                                             SJMP            LXI_L5
0A24 B44805         1746     LXI_L3:                         CJNE            A, #'H', LXI_L4                         ; L
                             XI H
0A27 753321         1747                                             MOV                     33H, #21H                  
                                                  ; LOAD ITS 8085 INST. SET
0A2A 800B           1748                                             SJMP            LXI_L5
0A2C B453DD         1749     LXI_L4:                         CJNE            A, #'S', LXI_L1                         ; L
                             XI SP
0A2F 121111         1750                                             CALL            LCD_SHO                            
                                          ; LOAD ITS 8085 INST. SET
0A32 7450           1751                                             MOV                     A, #'P'
0A34 753331         1752                                             MOV                     33H, #31H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1753     
0A37 12111E         1754     LXI_L5:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0A3A 020148         1755                                             LJMP            MAIN2
                    1756     
                    1757     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1758     ; ***** FOR 'MOV...'
0A3D 121111         1759     MOV_:                           CALL            LCD_SHO
0A40 7420           1760                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0A42 121111         1761                                             CALL            LCD_SHO
                    1762     
                    1763                                     ; -- A -- ;
0A45 121078         1764     MOV_A:                          CALL            KEYPAD_ID                                  
                                  ; GET THE FIRST OPERAND 
0A48 3001FA         1765                                             JNB                     01H, MOV_A
0A4B C201           1766                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1767     
0A4D B44156         1768                                             CJNE            A, #'A', MOV_B
                    1769                                             D_STR
0A56 412C2000       1772                                             DB                      'A, ',0                    
                                                  ; MOV A,
                    1773                                                                                                
                                                          
0A5A 121078         1774     MOV_AA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0A5D 3001FA         1775                                             JNB                     01H, MOV_AA
0A60 C201           1776                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1777                                             
0A62 B44105         1778                                             CJNE            A, #'A', MOV_AB                    
                                  ; MOV A, A
0A65 75337F         1779                                             MOV                     33H, #7FH                  
                                                  ; LOAD ITS 8085 INST. SET
0A68 8036           1780                                             SJMP            MOV_A_EXIT
0A6A B44205         1781     MOV_AB:                         CJNE            A, #'B', MOV_AC                         ; M
                             OV A, B 
0A6D 753378         1782                                             MOV                     33H, #78H                  
                                                  ; LOAD ITS 8085 INST. SET
0A70 802E           1783                                             SJMP            MOV_A_EXIT                         
                                                                                  
0A72 B44305         1784     MOV_AC:                         CJNE            A, #'C', MOV_AD                         ; M
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    38

                             OV A, C
0A75 753379         1785                                             MOV                     33H, #79H                  
                                                  ; LOAD ITS 8085 INST. SET
0A78 8026           1786                                             SJMP            MOV_A_EXIT                         
                                                                                  
0A7A B44405         1787     MOV_AD:                         CJNE            A, #'D', MOV_AE                         ; M
                             OV A, D
0A7D 75337A         1788                                             MOV                     33H, #7AH                  
                                                  ; LOAD ITS 8085 INST. SET
0A80 801E           1789                                             SJMP            MOV_A_EXIT                         
                                                                                  
0A82 B44505         1790     MOV_AE:                         CJNE            A, #'E', MOV_AH                         ; M
                             OV A, E
0A85 75337B         1791                                             MOV                     33H, #7BH                  
                                                  ; LOAD ITS 8085 INST. SET
0A88 8016           1792                                             SJMP            MOV_A_EXIT                         
                                                                                  
0A8A B44805         1793     MOV_AH:                         CJNE            A, #'H', MOV_AL                         ; M
                             OV A, H
0A8D 75337C         1794                                             MOV                     33H, #7CH                  
                                                  ; LOAD ITS 8085 INST. SET
0A90 800E           1795                                             SJMP            MOV_A_EXIT                         
                                                                                  
0A92 B44C05         1796     MOV_AL:                         CJNE            A, #'L', MOV_AM                         ; M
                             OV A, L
0A95 75337D         1797                                             MOV                     33H, #7DH                  
                                                  ; LOAD ITS 8085 INST. SET
0A98 8006           1798                                             SJMP            MOV_A_EXIT                         
                                                                                  
0A9A B44DBD         1799     MOV_AM:                         CJNE            A, #'M', MOV_AA                         ; M
                             OV A, M
0A9D 75337E         1800                                             MOV                     33H, #7EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1801     
0AA0 12111E         1802     MOV_A_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0AA3 020148         1803                                             LJMP            MAIN2
                    1804     
                    1805                                     ; -- B -- ;
0AA6 B44256         1806     MOV_B:                          CJNE            A, #'B', MOV_C
                    1807                                             D_STR
0AAF 422C2000       1810                                             DB                      'B, ',0                    
                                                  ; MOV B,
                    1811     
0AB3 121078         1812     MOV_BA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0AB6 3001FA         1813                                             JNB                     01H, MOV_BA
0AB9 C201           1814                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1815                                             
0ABB B44105         1816                                             CJNE            A, #'A', MOV_BB                    
                                  ; MOV B, A
0ABE 753347         1817                                             MOV                     33H, #47H                  
                                                  ; LOAD ITS 8085 INST. SET
0AC1 80DD           1818                                             SJMP            MOV_A_EXIT
0AC3 B44205         1819     MOV_BB:                         CJNE            A, #'B', MOV_BC                         ; M
                             OV B, B
0AC6 753340         1820                                             MOV                     33H, #40H                  
                                                  ; LOAD ITS 8085 INST. SET
0AC9 80D5           1821                                             SJMP            MOV_A_EXIT                         
                                                                                  
0ACB B44305         1822     MOV_BC:                         CJNE            A, #'C', MOV_BD                         ; M
                             OV B, C
0ACE 753341         1823                                             MOV                     33H, #41H                  
                                                  ; LOAD ITS 8085 INST. SET
0AD1 80CD           1824                                             SJMP            MOV_A_EXIT                         
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    39

                                                                                  
0AD3 B44405         1825     MOV_BD:                         CJNE            A, #'D', MOV_BE                         ; M
                             OV B, D
0AD6 753342         1826                                             MOV                     33H, #42H                  
                                                  ; LOAD ITS 8085 INST. SET
0AD9 80C5           1827                                             SJMP            MOV_A_EXIT                         
                                                                                  
0ADB B44505         1828     MOV_BE:                         CJNE            A, #'E', MOV_BH                         ; M
                             OV B, E
0ADE 753343         1829                                             MOV                     33H, #43H                  
                                                  ; LOAD ITS 8085 INST. SET
0AE1 80BD           1830                                             SJMP            MOV_A_EXIT                         
                                                                                  
0AE3 B44805         1831     MOV_BH:                         CJNE            A, #'H', MOV_BL                         ; M
                             OV B, H
0AE6 753344         1832                                             MOV                     33H, #44H                  
                                                  ; LOAD ITS 8085 INST. SET
0AE9 80B5           1833                                             SJMP            MOV_A_EXIT                         
                                                                                  
0AEB B44C05         1834     MOV_BL:                         CJNE            A, #'L', MOV_BM                         ; M
                             OV B, L
0AEE 753345         1835                                             MOV                     33H, #45H                  
                                                  ; LOAD ITS 8085 INST. SET
0AF1 80AD           1836                                             SJMP            MOV_A_EXIT                         
                                                                                  
0AF3 B44DBD         1837     MOV_BM:                         CJNE            A, #'M', MOV_BA                         ; M
                             OV B, M
0AF6 753346         1838                                             MOV                     33H, #46H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1839     
0AF9 12111E         1840     MOV_B_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0AFC 020148         1841                                             LJMP            MAIN2
                    1842     
                    1843                                     ; -- C -- ;
0AFF B44356         1844     MOV_C:                          CJNE            A, #'C', MOV_D
                    1845                                             D_STR
0B08 432C2000       1848                                             DB                      'C, ',0                    
                                                  ; MOV C,
                    1849     
0B0C 121078         1850     MOV_CA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0B0F 3001FA         1851                                             JNB                     01H, MOV_CA
0B12 C201           1852                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1853                                             
0B14 B44105         1854                                             CJNE            A, #'A', MOV_CB                    
                                  ; MOV C, A
0B17 75334F         1855                                             MOV                     33H, #4FH                  
                                                  ; LOAD ITS 8085 INST. SET
0B1A 8036           1856                                             SJMP            MOV_C_EXIT
0B1C B44205         1857     MOV_CB:                         CJNE            A, #'B', MOV_CC                         ; M
                             OV C, B
0B1F 753348         1858                                             MOV                     33H, #48H                  
                                                  ; LOAD ITS 8085 INST. SET
0B22 802E           1859                                             SJMP            MOV_C_EXIT                         
                                                                                  
0B24 B44305         1860     MOV_CC:                         CJNE            A, #'C', MOV_CD                         ; M
                             OV C, C
0B27 753349         1861                                             MOV                     33H, #49H                  
                                                  ; LOAD ITS 8085 INST. SET
0B2A 8026           1862                                             SJMP            MOV_C_EXIT                         
                                                                                  
0B2C B44405         1863     MOV_CD:                         CJNE            A, #'D', MOV_CE                         ; M
                             OV C, D
0B2F 75334A         1864                                             MOV                     33H, #4AH                  
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    40

                                                  ; LOAD ITS 8085 INST. SET
0B32 801E           1865                                             SJMP            MOV_C_EXIT                         
                                                                                  
0B34 B44505         1866     MOV_CE:                         CJNE            A, #'E', MOV_CH                         ; M
                             OV C, E
0B37 75334B         1867                                             MOV                     33H, #4BH                  
                                                  ; LOAD ITS 8085 INST. SET
0B3A 8016           1868                                             SJMP            MOV_C_EXIT                         
                                                                                  
0B3C B44805         1869     MOV_CH:                         CJNE            A, #'H', MOV_CL                         ; M
                             OV C, H
0B3F 75334C         1870                                             MOV                     33H, #4CH                  
                                                  ; LOAD ITS 8085 INST. SET
0B42 800E           1871                                             SJMP            MOV_C_EXIT                         
                                                                                  
0B44 B44C05         1872     MOV_CL:                         CJNE            A, #'L', MOV_CM                         ; M
                             OV C, L
0B47 75334D         1873                                             MOV                     33H, #4DH                  
                                                  ; LOAD ITS 8085 INST. SET
0B4A 8006           1874                                             SJMP            MOV_C_EXIT                         
                                                                                  
0B4C B44DBD         1875     MOV_CM:                         CJNE            A, #'M', MOV_CA                         ; M
                             OV C, M
0B4F 75334E         1876                                             MOV                     33H, #4EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1877     
0B52 12111E         1878     MOV_C_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0B55 020148         1879                                             LJMP            MAIN2
                    1880     
                    1881                                     ; -- D -- ;
0B58 B44456         1882     MOV_D:                          CJNE            A, #'D', MOV_E
                    1883                                             D_STR
0B61 442C2000       1886                                             DB                      'D, ',0                    
                                                  ; MOV D, 
                    1887     
0B65 121078         1888     MOV_DA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0B68 3001FA         1889                                             JNB                     01H, MOV_DA
0B6B C201           1890                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1891                                             
0B6D B44105         1892                                             CJNE            A, #'A', MOV_DB                    
                                  ; MOV D, A
0B70 753357         1893                                             MOV                     33H, #57H                  
                                                  ; LOAD ITS 8085 INST. SET
0B73 8036           1894                                             SJMP            MOV_D_EXIT
0B75 B44205         1895     MOV_DB:                         CJNE            A, #'B', MOV_DC                         ; M
                             OV D, B
0B78 753350         1896                                             MOV                     33H, #50H                  
                                                  ; LOAD ITS 8085 INST. SET
0B7B 802E           1897                                             SJMP            MOV_D_EXIT                         
                                                                                  
0B7D B44305         1898     MOV_DC:                         CJNE            A, #'C', MOV_DD                         ; M
                             OV D, C
0B80 753351         1899                                             MOV                     33H, #51H                  
                                                  ; LOAD ITS 8085 INST. SET
0B83 8026           1900                                             SJMP            MOV_D_EXIT                         
                                                                                  
0B85 B44405         1901     MOV_DD:                         CJNE            A, #'D', MOV_DE                         ; M
                             OV D, D
0B88 753352         1902                                             MOV                     33H, #52H                  
                                                  ; LOAD ITS 8085 INST. SET
0B8B 801E           1903                                             SJMP            MOV_D_EXIT                         
                                                                                  
0B8D B44505         1904     MOV_DE:                         CJNE            A, #'E', MOV_DH                         ; M
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    41

                             OV D, E
0B90 753353         1905                                             MOV                     33H, #53H                  
                                                  ; LOAD ITS 8085 INST. SET
0B93 8016           1906                                             SJMP            MOV_D_EXIT                         
                                                                                  
0B95 B44805         1907     MOV_DH:                         CJNE            A, #'H', MOV_DL                         ; M
                             OV D, H
0B98 753354         1908                                             MOV                     33H, #54H                  
                                                  ; LOAD ITS 8085 INST. SET
0B9B 800E           1909                                             SJMP            MOV_D_EXIT                         
                                                                                  
0B9D B44C05         1910     MOV_DL:                         CJNE            A, #'L', MOV_DM                         ; M
                             OV D, L
0BA0 753355         1911                                             MOV                     33H, #55H                  
                                                  ; LOAD ITS 8085 INST. SET
0BA3 8006           1912                                             SJMP            MOV_D_EXIT                         
                                                                                  
0BA5 B44DBD         1913     MOV_DM:                         CJNE            A, #'M', MOV_DA                         ; M
                             OV D, M
0BA8 753356         1914                                             MOV                     33H, #56H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1915     
0BAB 12111E         1916     MOV_D_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0BAE 020148         1917                                             LJMP            MAIN2
                    1918     
                    1919                                     ; -- E -- ;
0BB1 B44556         1920     MOV_E:                          CJNE            A, #'E', MOV_H
                    1921                                             D_STR
0BBA 452C2000       1924                                             DB                      'E, ',0                    
                                                  ; MOV E, 
                    1925     
0BBE 121078         1926     MOV_EA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0BC1 3001FA         1927                                             JNB                     01H, MOV_EA
0BC4 C201           1928                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1929                                             
0BC6 B44105         1930                                             CJNE            A, #'A', MOV_EB                    
                                  ; MOV E, A
0BC9 75335F         1931                                             MOV                     33H, #5FH                  
                                                  ; LOAD ITS 8085 INST. SET
0BCC 8036           1932                                             SJMP            MOV_E_EXIT
0BCE B44205         1933     MOV_EB:                         CJNE            A, #'B', MOV_EC                         ; M
                             OV E, B
0BD1 753358         1934                                             MOV                     33H, #58H                  
                                                  ; LOAD ITS 8085 INST. SET
0BD4 802E           1935                                             SJMP            MOV_E_EXIT                         
                                                                                  
0BD6 B44305         1936     MOV_EC:                         CJNE            A, #'C', MOV_ED                         ; M
                             OV E, C
0BD9 753359         1937                                             MOV                     33H, #59H                  
                                                  ; LOAD ITS 8085 INST. SET
0BDC 8026           1938                                             SJMP            MOV_E_EXIT                         
                                                                                  
0BDE B44405         1939     MOV_ED:                         CJNE            A, #'D', MOV_EE                         ; M
                             OV E, D
0BE1 75335A         1940                                             MOV                     33H, #5AH                  
                                                  ; LOAD ITS 8085 INST. SET
0BE4 801E           1941                                             SJMP            MOV_E_EXIT                         
                                                                                  
0BE6 B44505         1942     MOV_EE:                         CJNE            A, #'E', MOV_EH                         ; M
                             OV E, E
0BE9 75335B         1943                                             MOV                     33H, #5BH                  
                                                  ; LOAD ITS 8085 INST. SET
0BEC 8016           1944                                             SJMP            MOV_E_EXIT                         
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    42

                                                                                  
0BEE B44805         1945     MOV_EH:                         CJNE            A, #'H', MOV_EL                         ; M
                             OV E, H
0BF1 75335C         1946                                             MOV                     33H, #5CH                  
                                                  ; LOAD ITS 8085 INST. SET
0BF4 800E           1947                                             SJMP            MOV_E_EXIT                         
                                                                                  
0BF6 B44C05         1948     MOV_EL:                         CJNE            A, #'L', MOV_EM                         ; M
                             OV E, L
0BF9 75335D         1949                                             MOV                     33H, #5DH                  
                                                  ; LOAD ITS 8085 INST. SET
0BFC 8006           1950                                             SJMP            MOV_E_EXIT                         
                                                                                  
0BFE B44DBD         1951     MOV_EM:                         CJNE            A, #'M', MOV_EA                         ; M
                             OV E, M
0C01 75335E         1952                                             MOV                     33H, #5EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1953     
0C04 12111E         1954     MOV_E_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0C07 020148         1955                                             LJMP            MAIN2
                    1956     
                    1957                                     ; -- H -- ;
0C0A B44856         1958     MOV_H:                          CJNE            A, #'H', MOV_L
                    1959                                             D_STR
0C13 482C2000       1962                                             DB                      'H, ',0                    
                                                  ; MOV H, 
                    1963     
0C17 121078         1964     MOV_HA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0C1A 3001FA         1965                                             JNB                     01H, MOV_HA
0C1D C201           1966                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1967                                             
0C1F B44105         1968                                             CJNE            A, #'A', MOV_HB                    
                                  ; MOV H, A
0C22 753367         1969                                             MOV                     33H, #67H                  
                                                  ; LOAD ITS 8085 INST. SET
0C25 8036           1970                                             SJMP            MOV_H_EXIT
0C27 B44205         1971     MOV_HB:                         CJNE            A, #'B', MOV_HC                         ; M
                             OV H, B
0C2A 753360         1972                                             MOV                     33H, #60H                  
                                                  ; LOAD ITS 8085 INST. SET
0C2D 802E           1973                                             SJMP            MOV_H_EXIT                         
                                                                                  
0C2F B44305         1974     MOV_HC:                         CJNE            A, #'C', MOV_HD                         ; M
                             OV H, C
0C32 753361         1975                                             MOV                     33H, #61H                  
                                                  ; LOAD ITS 8085 INST. SET
0C35 8026           1976                                             SJMP            MOV_H_EXIT                         
                                                                                  
0C37 B44405         1977     MOV_HD:                         CJNE            A, #'D', MOV_HE                         ; M
                             OV H, D
0C3A 753362         1978                                             MOV                     33H, #62H                  
                                                  ; LOAD ITS 8085 INST. SET
0C3D 801E           1979                                             SJMP            MOV_H_EXIT                         
                                                                                  
0C3F B44505         1980     MOV_HE:                         CJNE            A, #'E', MOV_HH                         ; M
                             OV H, E
0C42 753363         1981                                             MOV                     33H, #63H                  
                                                  ; LOAD ITS 8085 INST. SET
0C45 8016           1982                                             SJMP            MOV_H_EXIT                         
                                                                                  
0C47 B44805         1983     MOV_HH:                         CJNE            A, #'H', MOV_HL                         ; M
                             OV H, H
0C4A 753364         1984                                             MOV                     33H, #64H                  
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    43

                                                  ; LOAD ITS 8085 INST. SET
0C4D 800E           1985                                             SJMP            MOV_H_EXIT                         
                                                                                  
0C4F B44C05         1986     MOV_HL:                         CJNE            A, #'L', MOV_HM                         ; M
                             OV H, L
0C52 753365         1987                                             MOV                     33H, #65H                  
                                                  ; LOAD ITS 8085 INST. SET
0C55 8006           1988                                             SJMP            MOV_H_EXIT                         
                                                                                  
0C57 B44DBD         1989     MOV_HM:                         CJNE            A, #'M', MOV_HA                         ; M
                             OV H, M
0C5A 753366         1990                                             MOV                     33H, #66H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1991     
0C5D 12111E         1992     MOV_H_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0C60 020148         1993                                             LJMP            MAIN2
                    1994     
                    1995                                     ; -- L -- ;
0C63 B44C56         1996     MOV_L:                          CJNE            A, #'L', MOV_M
                    1997                                             D_STR
0C6C 4C2C2000       2000                                             DB                      'L, ',0                    
                                                  ; MOV L, 
                    2001     
0C70 121078         2002     MOV_LA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0C73 3001FA         2003                                             JNB                     01H, MOV_LA
0C76 C201           2004                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2005                                             
0C78 B44105         2006                                             CJNE            A, #'A', MOV_LB                    
                                  ; MOV L, A
0C7B 75336F         2007                                             MOV                     33H, #6FH                  
                                                  ; LOAD ITS 8085 INST. SET
0C7E 8036           2008                                             SJMP            MOV_L_EXIT
0C80 B44205         2009     MOV_LB:                         CJNE            A, #'B', MOV_LC                         ; M
                             OV L, B
0C83 753368         2010                                             MOV                     33H, #68H                  
                                                  ; LOAD ITS 8085 INST. SET
0C86 802E           2011                                             SJMP            MOV_L_EXIT                         
                                                                                  
0C88 B44305         2012     MOV_LC:                         CJNE            A, #'C', MOV_LD                         ; M
                             OV L, C
0C8B 753369         2013                                             MOV                     33H, #69H                  
                                                  ; LOAD ITS 8085 INST. SET
0C8E 8026           2014                                             SJMP            MOV_L_EXIT                         
                                                                                  
0C90 B44405         2015     MOV_LD:                         CJNE            A, #'D', MOV_LE                         ; M
                             OV L, D
0C93 75336A         2016                                             MOV                     33H, #6AH                  
                                                  ; LOAD ITS 8085 INST. SET
0C96 801E           2017                                             SJMP            MOV_L_EXIT                         
                                                                                  
0C98 B44505         2018     MOV_LE:                         CJNE            A, #'E', MOV_LH                         ; M
                             OV L, E
0C9B 75336B         2019                                             MOV                     33H, #6BH                  
                                                  ; LOAD ITS 8085 INST. SET
0C9E 8016           2020                                             SJMP            MOV_L_EXIT                         
                                                                                  
0CA0 B44805         2021     MOV_LH:                         CJNE            A, #'H', MOV_LL                         ; M
                             OV L, H
0CA3 75336C         2022                                             MOV                     33H, #6CH                  
                                                  ; LOAD ITS 8085 INST. SET
0CA6 800E           2023                                             SJMP            MOV_L_EXIT                         
                                                                                  
0CA8 B44C05         2024     MOV_LL:                         CJNE            A, #'L', MOV_LM                         ; M
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    44

                             OV L, L
0CAB 75336D         2025                                             MOV                     33H, #6DH                  
                                                  ; LOAD ITS 8085 INST. SET
0CAE 8006           2026                                             SJMP            MOV_L_EXIT                         
                                                                                  
0CB0 B44DBD         2027     MOV_LM:                         CJNE            A, #'M', MOV_LA                         ; M
                             OV L, M
0CB3 75336E         2028                                             MOV                     33H, #6EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    2029     
0CB6 12111E         2030     MOV_L_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0CB9 020148         2031                                             LJMP            MAIN2
                    2032     
                    2033                                     ; -- M -- ;
0CBC B44D4E         2034     MOV_M:                          CJNE            A, #'M', MOV_A_EXTRA            ; I PLACED 
                             THIS INSTRUCTION DUE TO OUT OF RANGE ERROR
                    2035                                             D_STR                                              
                                                          
0CC5 4D2C2000       2038                                             DB                      'M, ',0                    
                                                  ; MOV M, 
                    2039     
0CC9 121078         2040     MOV_MA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND 
0CCC 3001FA         2041                                             JNB                     01H, MOV_MA
0CCF C201           2042                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2043                                             
0CD1 B44105         2044                                             CJNE            A, #'A', MOV_MB                    
                                  ; MOV M, A
0CD4 753377         2045                                             MOV                     33H, #77H                  
                                                  ; LOAD ITS 8085 INST. SET
0CD7 802E           2046                                             SJMP            MOV_M_EXIT
0CD9 B44205         2047     MOV_MB:                         CJNE            A, #'B', MOV_MC                         ; M
                             OV M, B
0CDC 753370         2048                                             MOV                     33H, #70H                  
                                                  ; LOAD ITS 8085 INST. SET
0CDF 8026           2049                                             SJMP            MOV_M_EXIT                         
                                                                                  
0CE1 B44305         2050     MOV_MC:                         CJNE            A, #'C', MOV_MD                         ; M
                             OV M, C
0CE4 753371         2051                                             MOV                     33H, #71H                  
                                                  ; LOAD ITS 8085 INST. SET
0CE7 801E           2052                                             SJMP            MOV_M_EXIT                         
                                                                                  
0CE9 B44405         2053     MOV_MD:                         CJNE            A, #'D', MOV_ME                         ; M
                             OV M, D
0CEC 753372         2054                                             MOV                     33H, #72H                  
                                                  ; LOAD ITS 8085 INST. SET
0CEF 8016           2055                                             SJMP            MOV_M_EXIT                         
                                                                                  
0CF1 B44505         2056     MOV_ME:                         CJNE            A, #'E', MOV_MH                         ; M
                             OV M, E
0CF4 753373         2057                                             MOV                     33H, #73H                  
                                                  ; LOAD ITS 8085 INST. SET
0CF7 800E           2058                                             SJMP            MOV_M_EXIT                         
                                                                                  
0CF9 B44805         2059     MOV_MH:                         CJNE            A, #'H', MOV_ML                         ; M
                             OV M, H
0CFC 753374         2060                                             MOV                     33H, #74H                  
                                                  ; LOAD ITS 8085 INST. SET
0CFF 8006           2061                                             SJMP            MOV_M_EXIT                         
                                                                                  
0D01 B44CC5         2062     MOV_ML:                         CJNE            A, #'L', MOV_MA                         ; M
                             OV M, L
0D04 753375         2063                                             MOV                     33H, #75H                  
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    45

                                                  ; LOAD ITS 8085 INST. SET
                    2064                                                                                                
                                                          ; NOTICE THAT THERE IS NO INSTRUCTION LIKE 'MOV M, M'
0D07 12111E         2065     MOV_M_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0D0A 020148         2066                                             LJMP            MAIN2
                    2067     
0D0D 4145           2068     MOV_A_EXTRA:            AJMP            MOV_A                                           ; T
                             HIS INST. WAS TO THE EFFECT OF OUT OF RANGE ERROR
                    2069     
                    2070     ; ***** FOR 'MVI...'
0D0F 121111         2071     MVI_:                           CALL            LCD_SHO
0D12 7420           2072                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0D14 121111         2073                                             CALL            LCD_SHO
0D17 121078         2074     MVI_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0D1A 3001FA         2075                                             JNB                     01H, MVI_L1
0D1D C201           2076                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2077     
0D1F B44105         2078                                             CJNE            A, #'A', MVI_L2                    
                                  ; MVI A
0D22 75333E         2079                                             MOV                     33H, #3EH                  
                                                  ; LOAD ITS 8085 INST. SET
0D25 8036           2080                                             SJMP            MVI_L9
0D27 B44205         2081     MVI_L2:                         CJNE            A, #'B', MVI_L3                         ; M
                             VI B
0D2A 753306         2082                                             MOV                     33H, #06H                  
                                                  ; LOAD ITS 8085 INST. SET
0D2D 802E           2083                                             SJMP            MVI_L9
0D2F B44305         2084     MVI_L3:                         CJNE            A, #'C', MVI_L4                         ; M
                             VI C
0D32 75330E         2085                                             MOV                     33H, #0EH                  
                                                  ; LOAD ITS 8085 INST. SET
0D35 8026           2086                                             SJMP            MVI_L9
0D37 B44405         2087     MVI_L4:                         CJNE            A, #'D', MVI_L5                         ; M
                             VI D
0D3A 753316         2088                                             MOV                     33H, #16H                  
                                                  ; LOAD ITS 8085 INST. SET
0D3D 801E           2089                                             SJMP            MVI_L9
0D3F B44505         2090     MVI_L5:                         CJNE            A, #'E', MVI_L6                         ; M
                             VI E
0D42 75331E         2091                                             MOV                     33H, #1EH                  
                                                  ; LOAD ITS 8085 INST. SET
0D45 8016           2092                                             SJMP            MVI_L9
0D47 B44805         2093     MVI_L6:                         CJNE            A, #'H', MVI_L7                         ; M
                             VI H
0D4A 753326         2094                                             MOV                     33H, #26H                  
                                                  ; LOAD ITS 8085 INST. SET
0D4D 800E           2095                                             SJMP            MVI_L9
0D4F B44C05         2096     MVI_L7:                         CJNE            A, #'L', MVI_L8                         ; M
                             VI L
0D52 75332E         2097                                             MOV                     33H, #2EH                  
                                                  ; LOAD ITS 8085 INST. SET
0D55 8006           2098                                             SJMP            MVI_L9
0D57 B44DBD         2099     MVI_L8:                         CJNE            A, #'M', MVI_L1                         ; M
                             VI M
0D5A 753336         2100                                             MOV                     33H, #36H                  
                                                  ; LOAD ITS 8085 INST. SET
                    2101     
0D5D 12113C         2102     MVI_L9:                         CALL            FLY_DATA                                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0D60 020148         2103                                             LJMP            MAIN2
                    2104     
                    2105     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    46

                    2106     ; ***** FOR 'ORA...'
0D63 121111         2107     ORA_:                           CALL            LCD_SHO
0D66 7420           2108                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0D68 121111         2109                                             CALL            LCD_SHO
0D6B 121078         2110     ORA_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0D6E 3001FA         2111                                             JNB                     01H, ORA_L1
0D71 C201           2112                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2113     
0D73 B44105         2114                                             CJNE            A, #'A', ORA_L2                    
                                  ; ORA A
0D76 7533B7         2115                                             MOV                     33H, #0B7H                 
                                                  ; LOAD ITS 8085 INST. SET
0D79 8036           2116                                             SJMP            ORA_L9
0D7B B44205         2117     ORA_L2:                         CJNE            A, #'B', ORA_L3                         ; O
                             RA B
0D7E 7533B0         2118                                             MOV                     33H, #0B0H                 
                                                  ; LOAD ITS 8085 INST. SET
0D81 802E           2119                                             SJMP            ORA_L9
0D83 B44305         2120     ORA_L3:                         CJNE            A, #'C', ORA_L4                         ; O
                             RA C
0D86 7533B1         2121                                             MOV                     33H, #0B1H                 
                                                  ; LOAD ITS 8085 INST. SET
0D89 8026           2122                                             SJMP            ORA_L9
0D8B B44405         2123     ORA_L4:                         CJNE            A, #'D', ORA_L5                         ; O
                             RA D
0D8E 7533B2         2124                                             MOV                     33H, #0B2H                 
                                                  ; LOAD ITS 8085 INST. SET
0D91 801E           2125                                             SJMP            ORA_L9
0D93 B44505         2126     ORA_L5:                         CJNE            A, #'E', ORA_L6                         ; O
                             RA E
0D96 7533B3         2127                                             MOV                     33H, #0B3H                 
                                                  ; LOAD ITS 8085 INST. SET
0D99 8016           2128                                             SJMP            ORA_L9
0D9B B44805         2129     ORA_L6:                         CJNE            A, #'H', ORA_L7                         ; O
                             RA H
0D9E 7533B4         2130                                             MOV                     33H, #0B4H                 
                                                  ; LOAD ITS 8085 INST. SET
0DA1 800E           2131                                             SJMP            ORA_L9
0DA3 B44C05         2132     ORA_L7:                         CJNE            A, #'L', ORA_L8                         ; O
                             RA L
0DA6 7533B5         2133                                             MOV                     33H, #0B5H                 
                                                  ; LOAD ITS 8085 INST. SET
0DA9 8006           2134                                             SJMP            ORA_L9
0DAB B44DBD         2135     ORA_L8:                         CJNE            A, #'M', ORA_L1                         ; O
                             RA M
0DAE 7533B6         2136                                             MOV                     33H, #0B6H                 
                                                  ; LOAD ITS 8085 INST. SET
                    2137     
0DB1 12111E         2138     ORA_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0DB4 020148         2139                                             LJMP            MAIN2
                    2140     
                    2141     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    2142     ; ***** FOR 'POP...'
0DB7 121111         2143     POP_:                           CALL            LCD_SHO
0DBA 7420           2144                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0DBC 121111         2145                                             CALL            LCD_SHO
0DBF 121078         2146     POP_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0DC2 3001FA         2147                                             JNB                     01H, POP_L1
0DC5 C201           2148                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    47

                    2149     
0DC7 B44205         2150                                             CJNE            A, #'B', POP_L2                    
                                  ; POP B
0DCA 7533C1         2151                                             MOV                     33H, #0C1H                 
                                                  ; LOAD ITS 8085 INST. SET
0DCD 8020           2152                                             SJMP            POP_L5
0DCF B44405         2153     POP_L2:                         CJNE            A, #'D', POP_L3                         ; P
                             OP D
0DD2 7533D1         2154                                             MOV                     33H, #0D1H                 
                                                  ; LOAD ITS 8085 INST. SET
0DD5 8018           2155                                             SJMP            POP_L5
0DD7 B44805         2156     POP_L3:                         CJNE            A, #'H', POP_L4                         ; P
                             OP H
0DDA 7533E1         2157                                             MOV                     33H, #0E1H                 
                                                  ; LOAD ITS 8085 INST. SET
0DDD 8010           2158                                             SJMP            POP_L5
0DDF B450DD         2159     POP_L4:                         CJNE            A, #'P', POP_L1                         ; P
                             OP PSW
                    2160                                             D_STR
0DE8 50535700       2163                                             DB                      'PSW',0
0DEC 7533F1         2164                                             MOV                     33H, #0F1H                 
                                                  ; LOAD ITS 8085 INST. SET
                    2165     
0DEF 121120         2166     POP_L5:                         CALL            FLY_OPCODE_SKIP                         ; C
                             ALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0DF2 020148         2167                                             LJMP            MAIN2
                    2168     
                    2169     ; ***** FOR 'PUSH...'
0DF5 7420           2170     PUSH_:                          MOV                     A, #' '                            
                                      ; GIVE SPACE
0DF7 121111         2171                                             CALL            LCD_SHO
0DFA 121078         2172     PUSH_L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0DFD 3001FA         2173                                             JNB                     01H, PUSH_L1
0E00 C201           2174                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2175     
0E02 B44205         2176                                             CJNE            A, #'B', PUSH_L2                   
                                  ; PUSH B
0E05 7533C5         2177                                             MOV                     33H, #0C5H                 
                                                  ; LOAD ITS 8085 INST. SET
0E08 8020           2178                                             SJMP            PUSH_L5
0E0A B44405         2179     PUSH_L2:                        CJNE            A, #'D', PUSH_L3                        ; P
                             USH D
0E0D 7533D5         2180                                             MOV                     33H, #0D5H                 
                                                  ; LOAD ITS 8085 INST. SET
0E10 8018           2181                                             SJMP            PUSH_L5
0E12 B44805         2182     PUSH_L3:                        CJNE            A, #'H', PUSH_L4                        ; P
                             USH H
0E15 7533E5         2183                                             MOV                     33H, #0E5H                 
                                                  ; LOAD ITS 8085 INST. SET
0E18 8010           2184                                             SJMP            PUSH_L5
0E1A B450DD         2185     PUSH_L4:                        CJNE            A, #'P', PUSH_L1                        ; P
                             USH PSW
                    2186                                             D_STR
0E23 50535700       2189                                             DB                      'PSW',0
0E27 7533F5         2190                                             MOV                     33H, #0F5H                 
                                                  ; LOAD ITS 8085 INST. SET
                    2191     
0E2A 121120         2192     PUSH_L5:                        CALL            FLY_OPCODE_SKIP                         ; C
                             ALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0E2D 020148         2193                                             LJMP            MAIN2
                    2194     
                    2195     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    2196     ; ***** FOR 'SBB...'
0E30 121111         2197     SBB_:                           CALL            LCD_SHO
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    48

0E33 7420           2198                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0E35 121111         2199                                             CALL            LCD_SHO
0E38 121078         2200     SBB_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0E3B 3001FA         2201                                             JNB                     01H, SBB_L1
0E3E C201           2202                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2203     
0E40 B44105         2204                                             CJNE            A, #'A', SBB_L2                    
                                  ; SBB A
0E43 75339F         2205                                             MOV                     33H, #9FH                  
                                                  ; LOAD ITS 8085 INST. SET
0E46 8036           2206                                             SJMP            SBB_L9
0E48 B44205         2207     SBB_L2:                         CJNE            A, #'B', SBB_L3                         ; S
                             BB B
0E4B 753398         2208                                             MOV                     33H, #98H                  
                                                  ; LOAD ITS 8085 INST. SET
0E4E 802E           2209                                             SJMP            SBB_L9
0E50 B44305         2210     SBB_L3:                         CJNE            A, #'C', SBB_L4                         ; S
                             BB C
0E53 753399         2211                                             MOV                     33H, #99H                  
                                                  ; LOAD ITS 8085 INST. SET
0E56 8026           2212                                             SJMP            SBB_L9
0E58 B44405         2213     SBB_L4:                         CJNE            A, #'D', SBB_L5                         ; S
                             BB D
0E5B 75339A         2214                                             MOV                     33H, #9AH                  
                                                  ; LOAD ITS 8085 INST. SET
0E5E 801E           2215                                             SJMP            SBB_L9
0E60 B44505         2216     SBB_L5:                         CJNE            A, #'E', SBB_L6                         ; S
                             BB E
0E63 75339B         2217                                             MOV                     33H, #9BH                  
                                                  ; LOAD ITS 8085 INST. SET
0E66 8016           2218                                             SJMP            SBB_L9
0E68 B44805         2219     SBB_L6:                         CJNE            A, #'H', SBB_L7                         ; S
                             BB H
0E6B 75339C         2220                                             MOV                     33H, #9CH                  
                                                  ; LOAD ITS 8085 INST. SET
0E6E 800E           2221                                             SJMP            SBB_L9
0E70 B44C05         2222     SBB_L7:                         CJNE            A, #'L', SBB_L8                         ; S
                             BB L
0E73 75339D         2223                                             MOV                     33H, #9DH                  
                                                  ; LOAD ITS 8085 INST. SET
0E76 8006           2224                                             SJMP            SBB_L9
0E78 B44DBD         2225     SBB_L8:                         CJNE            A, #'M', SBB_L1                         ; S
                             BB M
0E7B 75339E         2226                                             MOV                     33H, #9EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    2227     
0E7E 12111E         2228     SBB_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0E81 020148         2229                                             LJMP            MAIN2
                    2230     
                    2231     ; ***** FOR 'SUB...'
0E84 121111         2232     SUB_:                           CALL            LCD_SHO
0E87 7420           2233                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0E89 121111         2234                                             CALL            LCD_SHO
0E8C 121078         2235     SUB_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0E8F 3001FA         2236                                             JNB                     01H, SUB_L1
0E92 C201           2237                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2238     
0E94 B44105         2239                                             CJNE            A, #'A', SUB_L2                    
                                  ; SUB A
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    49

0E97 753397         2240                                             MOV                     33H, #97H                  
                                                  ; LOAD ITS 8085 INST. SET
0E9A 8036           2241                                             SJMP            SUB_L9
0E9C B44205         2242     SUB_L2:                         CJNE            A, #'B', SUB_L3                         ; S
                             UB B
0E9F 753390         2243                                             MOV                     33H, #90H                  
                                                  ; LOAD ITS 8085 INST. SET
0EA2 802E           2244                                             SJMP            SUB_L9
0EA4 B44305         2245     SUB_L3:                         CJNE            A, #'C', SUB_L4                         ; S
                             UB C
0EA7 753391         2246                                             MOV                     33H, #91H                  
                                                  ; LOAD ITS 8085 INST. SET
0EAA 8026           2247                                             SJMP            SUB_L9
0EAC B44405         2248     SUB_L4:                         CJNE            A, #'D', SUB_L5                         ; S
                             UB D
0EAF 753392         2249                                             MOV                     33H, #92H                  
                                                  ; LOAD ITS 8085 INST. SET
0EB2 801E           2250                                             SJMP            SUB_L9
0EB4 B44505         2251     SUB_L5:                         CJNE            A, #'E', SUB_L6                         ; S
                             UB E
0EB7 753393         2252                                             MOV                     33H, #93H                  
                                                  ; LOAD ITS 8085 INST. SET
0EBA 8016           2253                                             SJMP            SUB_L9
0EBC B44805         2254     SUB_L6:                         CJNE            A, #'H', SUB_L7                         ; S
                             UB H
0EBF 753394         2255                                             MOV                     33H, #94H                  
                                                  ; LOAD ITS 8085 INST. SET
0EC2 800E           2256                                             SJMP            SUB_L9
0EC4 B44C05         2257     SUB_L7:                         CJNE            A, #'L', SUB_L8                         ; S
                             UB L
0EC7 753395         2258                                             MOV                     33H, #95H                  
                                                  ; LOAD ITS 8085 INST. SET
0ECA 8006           2259                                             SJMP            SUB_L9
0ECC B44DBD         2260     SUB_L8:                         CJNE            A, #'M', SUB_L1                         ; S
                             UB M
0ECF 753396         2261                                             MOV                     33H, #96H                  
                                                  ; LOAD ITS 8085 INST. SET
                    2262     
0ED2 12111E         2263     SUB_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0ED5 020148         2264                                             LJMP            MAIN2
                    2265     
                    2266     ; ***** FOR 'STAX...'
0ED8 121111         2267     STAX_:                          CALL            LCD_SHO
0EDB 7420           2268                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0EDD 121111         2269                                             CALL            LCD_SHO
0EE0 121078         2270     STAX_L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0EE3 3001FA         2271                                             JNB                     01H, STAX_L1
0EE6 C201           2272                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2273     
0EE8 B44205         2274                                             CJNE            A, #'B', STAX_L2                   
                                  ; STAX B
0EEB 753302         2275                                             MOV                     33H, #02H                  
                                                  ; LOAD ITS 8085 INST. SET
0EEE 8006           2276                                             SJMP            STAX_L3
0EF0 B444ED         2277     STAX_L2:                        CJNE            A, #'D', STAX_L1                        ; S
                             TAX D
0EF3 753312         2278                                             MOV                     33H, #12H                  
                                                  ; LOAD ITS 8085 INST. SET
                    2279     
0EF6 12111E         2280     STAX_L3:                        CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0EF9 020148         2281                                             LJMP            MAIN2
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    50

                    2282     
                    2283     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    2284     ; ***** FOR 'XRA...'
0EFC 121111         2285     XRA_:                           CALL            LCD_SHO
0EFF 7420           2286                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0F01 121111         2287                                             CALL            LCD_SHO
0F04 121078         2288     XRA_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0F07 3001FA         2289                                             JNB                     01H, XRA_L1
0F0A C201           2290                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2291     
0F0C B44105         2292                                             CJNE            A, #'A', XRA_L2                    
                                  ; XRA A
0F0F 7533AF         2293                                             MOV                     33H, #0AFH                 
                                                  ; LOAD ITS 8085 INST. SET
0F12 8036           2294                                             SJMP            XRA_L9
0F14 B44205         2295     XRA_L2:                         CJNE            A, #'B', XRA_L3                         ; X
                             RA B
0F17 7533A8         2296                                             MOV                     33H, #0A8H                 
                                                  ; LOAD ITS 8085 INST. SET
0F1A 802E           2297                                             SJMP            XRA_L9
0F1C B44305         2298     XRA_L3:                         CJNE            A, #'C', XRA_L4                         ; X
                             RA C
0F1F 7533A9         2299                                             MOV                     33H, #0A9H                 
                                                  ; LOAD ITS 8085 INST. SET
0F22 8026           2300                                             SJMP            XRA_L9
0F24 B44405         2301     XRA_L4:                         CJNE            A, #'D', XRA_L5                         ; X
                             RA D
0F27 7533AA         2302                                             MOV                     33H, #0AAH                 
                                                  ; LOAD ITS 8085 INST. SET
0F2A 801E           2303                                             SJMP            XRA_L9
0F2C B44505         2304     XRA_L5:                         CJNE            A, #'E', XRA_L6                         ; X
                             RA E
0F2F 7533AB         2305                                             MOV                     33H, #0ABH                 
                                                  ; LOAD ITS 8085 INST. SET
0F32 8016           2306                                             SJMP            XRA_L9
0F34 B44805         2307     XRA_L6:                         CJNE            A, #'H', XRA_L7                         ; X
                             RA H
0F37 7533AC         2308                                             MOV                     33H, #0ACH                 
                                                  ; LOAD ITS 8085 INST. SET
0F3A 800E           2309                                             SJMP            XRA_L9
0F3C B44C05         2310     XRA_L7:                         CJNE            A, #'L', XRA_L8                         ; X
                             RA L
0F3F 7533AD         2311                                             MOV                     33H, #0ADH                 
                                                  ; LOAD ITS 8085 INST. SET
0F42 8006           2312                                             SJMP            XRA_L9
0F44 B44DBD         2313     XRA_L8:                         CJNE            A, #'M', XRA_L1                         ; X
                             RA M
0F47 7533AE         2314                                             MOV                     33H, #0AEH                 
                                                  ; LOAD ITS 8085 INST. SET
                    2315     
0F4A 12111E         2316     XRA_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0F4D 020148         2317                                             LJMP            MAIN2
                    2318     
                    2319     ; ------------------------------------------ END OF CHARACTER KEY COMBINATION -------------
                             ---------------------------------------------
                    2320     ; ================================================ INTERRUPT SUBROUTINES (ISRs) ===========
                             =============================================
0F50                2321     SECOND_FUNCTION:
0F50 1210F3         2322                                             LCALL           DELAY_20mS                         
                                          ; DELAY_500mS = 500ms
0F53 121078         2323                                             LCALL           KEYPAD_ID                          
                                          ; CALL THE KEYPAD TO SUPPLY THE ASCII OF THE KEY DEPRESSED
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    51

0F56 200106         2324                                             JB                      01H, SECOND_FUNCTIONcorrect
                             ed
0F59 D530F4         2325                                             DJNZ            30H, SECOND_FUNCTION            ; M
                             AKE THE SECOND FUNCTION ACTIVE FOR ABOUT 2 SECONDS
0F5C 30013B         2326                                             JNB                     01H, EXIT_SECOND_FUNCTION  
                                  ; IF NO KEY IS DEPRESSED AFTER 2 SECONDS, EXIT ELSE CONTINUE
0F5F                2327     SECOND_FUNCTIONcorrected:
0F5F C201           2328                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2329     ;corrected;
                    2330     ;                                       mov                     A, 7FH                     
                                                  ; RETURN THE SAVED VALUE
0F61 E531           2331                                     mov                     A, 31H                             
                                          ; RETURN THE TEMPORARY SAVE ASCII CHARACTERR OF THE KEY IDENTIFIED
                    2332     ;corrected;
                    2333                                             
0F63 B44D05         2334                                             CJNE            A, #'M', SF_1
0F66 1213F6         2335                                             LCALL           SUB_MEM                            
                                          ; CALL SUBTITUTE MEMORY OSR
0F69 802F           2336                                             SJMP            EXIT_SECOND_FUNCTION    
                    2337     
0F6B B45805         2338     SF_1:                           CJNE            A, #'X', SF_2
0F6E 1212BB         2339                                             LCALL           EXE                                
                                                  ; CALL EXECUTE OSR
0F71 8027           2340                                             SJMP            EXIT_SECOND_FUNCTION
                    2341                                                                                                
                                  
0F73 B44E09         2342     SF_2:                           CJNE            A, #'N', SF_3
0F76 1214A2         2343                                             LCALL           CANCEL                             
                                          ; CALL CANCEL OSR
0F79 758157         2344                                             MOV                     SP, #57H                   
                                                  ; INITIALIZATION OF THE TOP OF THE STACK(40 BYTES OF MEM. ARE AVAILABLE ON THIS INITIALIZATION)
0F7C 020148         2345                                             JMP                     MAIN2                      
                                                  ; START AFRESH
                    2346     
                    2347     ;SF_3:                          CJNE            A, #'C', SF_4 
                    2348     ;                                       LCALL           CPLT                               
                                          ; CALL CPLT (CODE OR PROGRAMMING LANGUAGE TYPE) OSR
                    2349     ;                                       SJMP            EXIT_SECOND_FUNCTION
                    2350                                              
0F7F B44202         2351     SF_3:                           CJNE            A, #'B', SF_4 
                    2352     ;                                       LCALL           STEP                               
                                          ; CALL STEP-BY-STEP EXECUTION OSR
0F82 8016           2353                                             SJMP            EXIT_SECOND_FUNCTION
                    2354     
0F84 B45A05         2355     SF_4:                           CJNE            A, #'Z', SF_5 
0F87 12122D         2356                                             LCALL           EXAM_REG                           
                                          ; CALL EXAM_REG SR
0F8A 800E           2357                                             SJMP            EXIT_SECOND_FUNCTION
                    2358     
0F8C B45605         2359     SF_5:                           CJNE            A, #'V', SF_6 
0F8F 121363         2360                                             LCALL           V_HEX                              
                                          ; CALL V_HEX (VIEW HEXCODE) OSR
0F92 8006           2361                                             SJMP            EXIT_SECOND_FUNCTION
                    2362     
0F94 B42A03         2363     SF_6:                           CJNE            A, #'*', EXIT_SECOND_FUNCTION 
0F97 1212BF         2364                                             LCALL           E_N_D                              
                                          ; CALL E_N_D (END PROGRAM) OSR
                    2365                                             
0F9A                2366     EXIT_SECOND_FUNCTION:
0F9A 753032         2367                                             MOV                     30H,#32H                   
                                                  ; REFRESH OR RE-INITIALIZE COUNTER BY LOADING '50dec (ie. 32H)' INTO THE COUNTER 
0F9D 32             2368                                             RETI
                    2369     
                    2370     ; =================================ORDINARY SERVICE ROUTINE (OSR)==========================
                             ==========================================
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    52

0F9E                2371     ADDRESS_DISPLAY_CONTROL:
                    2372     ; THIS SR IS USED BY FLY_OPCODE & FLY_OPERAND (ie DATA TYPE & ADDRESS TYPE) TO CONTROL THE 
                             ADDRESS DISPLAY IN LINE 1
                    2373     ; WHENEVER ENTRY IN LINE 2 IS COMPLETE AND NEXT IS PRESSED.
                    2374     ; ALSO IT IS USED BY V_HEX AND CANCEL SR TO CONTROL THE ADDRESS DISPLAY IN LINE 1
                    2375     ; THE INPUT MEMORY LOCATIONS TO THIS SUBROUTINE ARE 3AH & 39H
                    2376     
                    2377     ; IT FIRST CLEARS THE SCREEN OF THE LCD BEFORE WRITING INTO ITS LINE 1 ONLY. ALSO INCLUDE '
                             :' AFTER THE ADDRESS
                    2378     
0F9E 7401           2379                                     MOV             A, #01H
0FA0 1210E6         2380                             LCALL           LCD_CMD
                    2381     
                    2382                                     ; MOST SIGNIFICANT BYTE (MSB)
0FA3 853A36         2383                                     MOV                     36H, 3AH                           
                                  ; PLACE THE HOB OF THE CURRENT ADDRESS INTO THE INPUT MEMORY LOC. (36H) OF H2A SR
0FA6 F1D1           2384                                     CALL            HEX_2_ASCII
                    2385     
0FA8 7480           2386                                     MOV                     A, #80H                            
                                  ; LOAD A COMMAND TO DISPLAY THE CONTENT OF 38H & 37H ON LINE 1, POSITION 1 & 2
0FAA 1210E6         2387                                     CALL            LCD_CMD
                    2388     
0FAD E538           2389                                     MOV                     A, 38H                             
                                  ; 1ST NIBBLE DISPLAYED IN HEX IN POSITION 1
0FAF 121111         2390                                     CALL            LCD_SHO
                    2391     
0FB2 E537           2392                                     MOV                     A, 37H                             
                                  ; 2ND NIBBLE DISPLAYED IN HEX IN POSITION 2
0FB4 121111         2393                                     CALL            LCD_SHO
                    2394     
                    2395                                     ; LEAST SIGNIFICANT BYTE (LSB)
0FB7 853936         2396                                     MOV                     36H, 39H                           
                                  ; PLACE THE HOB OF THE CURRENT ADDRESS INTO THE INPUT MEMORY LOC. (36H) OF H2A SR
0FBA F1D1           2397                                     CALL            HEX_2_ASCII
                    2398     
0FBC E538           2399                                     MOV                     A, 38H                             
                                  ; 3RD NIBBLE DISPLAYED IN HEX IN POSITION 3
0FBE 121111         2400                                     CALL            LCD_SHO
                    2401     
0FC1 E537           2402                                     MOV                     A, 37H                             
                                  ; 4TH (LAST) NIBBLE DISPLAYED IN HEX IN POSITION 4
0FC3 121111         2403                                     CALL            LCD_SHO
                    2404     
                    2405     
0FC6 743A           2406                                     MOV                     A, #':'                            
                                  ; DISPLAY ':' PROBABLY ON LINE 1, POSITION 5 (SINCE FOUR DISPLAYS HAS BEEN CARRIED OUT)
0FC8 121111         2407                                     CALL            LCD_SHO
                    2408     
0FCB 74C0           2409                                     MOV             A, #0C0H
0FCD 1210E6         2410                                     LCALL           LCD_CMD
0FD0 22             2411                                     RET
                    2412     
0FD1                2413     HEX_2_ASCII:
                    2414     ; THIS A SR THAT TAKES CARE OF GENERATING THE EQUIVALENT ASCII CODE FROM A HEX INPUT CODE
                    2415                                     ; HIGH ORDER BYTE CONVERSION BEGINS     HERE
0FD1 E536           2416                                     MOV                     A, 36H                             
                                  ; LOAD THE HEX BYTE TO BE CONVERTED INTO 'A'
0FD3 54F0           2417                                     ANL                     A, #0F0H                           
                                  ; MASK THE LOW ORDER BYTE
0FD5 C4             2418                                     SWAP            A                                          
                                  ; HOB <==> LOB
0FD6 B40A01         2419                                     CJNE            A, #0AH, H2A_1
0FD9 C3             2420                                     CLR                     C
                    2421                                                                                                
                                          ; IF 'A' >= 0AH DO THE FOLLOWING INSTRUCTIONS
0FDA 4002           2422     H2A_1:                  JC                      H2A_2                                   ; A
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    53

                             DD 07H & LATER 30H 
0FDC 2407           2423                                     ADD                     A, #07H                            
                                  ; (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE)
                    2424     
                    2425                                                                                                
                                          ; IF 'A' < 0AH DO THE FOLLOWING INSTRUCTIONS
0FDE 2430           2426     H2A_2:                  ADD                     A, #30H                                 ; A
                             DD 30H (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE) 
                    2427     
0FE0 F538           2428                                     MOV                     38H, A                             
                                  ; SAVE THE ASCII CODE OF THE HIGH ORDER BYTE IN MEM. 38H
                    2429                                                                                                
                                          ; HIGH ORDER BYTE CONVERSION ENDS HERE
                    2430     
                    2431                                     ; LOW ORDER BYTE CONVERSION BEGINS HERE
0FE2 E536           2432                                     MOV                     A, 36H                             
                                  ; LOAD THE HEX BYTE TO BE CONVERTED INTO 'A'
0FE4 540F           2433                                     ANL                     A, #0FH                            
                                  ; MASK THE HIGH ORDER BYTE
0FE6 B40A01         2434                                     CJNE            A, #0AH, H2A_3
0FE9 C3             2435                                     CLR                     C
                    2436                                                                                                
                                          ; IF 'A' >= 0AH DO THE FOLLOWING INSTRUCTIONS
0FEA 4002           2437     H2A_3:                  JC                      H2A_4                                   ; A
                             DD 07H & LATER 30H 
0FEC 2407           2438                                     ADD                     A, #07H                            
                                  ; (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE)
                    2439     
                    2440                                                                                                
                                          ; IF 'A' < 0AH DO THE FOLLOWING INSTRUCTIONS
0FEE 2430           2441     H2A_4:                  ADD                     A, #30H                                 ; A
                             DD 30H (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE) 
                    2442     
0FF0 F537           2443                                     MOV                     37H, A                             
                                  ; SAVE THE ASCII CODE OF THE LOWER ORDER BYTE IN MEM. 37H
                    2444     
                    2445                                                                                                
                                          ; LOW ORDER BYTE CONVERSION ENDS HERE
0FF2 22             2446                                     RET
                    2447     
                    2448     ; TESTED: QC PASSED SYNTAXICALLY AND SEMANTICALLY
                    2449     
                    2450     ; -----------------------------------------------------------------------------------------
                             ---------------------------------------------
                    2451     ; THIS SUBROUTINE LOADS THE APPROPRIATE OPCODE OR OPERAND(ie DATA OR ADDRESS) INTO THEIR PE
                             RMANENT LOCATION
                    2452     ; IT DIFFRENETIATES OPCODE CALL FROM AN OPERAND CALL BY USING THE NEXT TYPE FLAG (ie NCF 03
                             H)
                    2453     ; WHEN IT IS SET IT CALLS THE OPERAND ELSE THE OPCODE, NCF IS TESTED AT THE ENTRANCE TO THE
                              SR 
                    2454     ; IT ALSO HANDLES THE SUB MEM START ADDRESS INTIALIZATION 
                    2455     
                    2456     ; THIS IS THE SR WHERE MEMORY ADDRESS INCREMENT DISPLAY REGISTER IS TO BE CONFIGURED
                    2457     ; ***ON ERROR AFTER TESTING THIS SR CHANGE DPH = 83H, & DPL = 82H(DIRECT ADDRESSING)
                    2458     
                    2459     ; ****REMEMBER TO SAVE REGS & FLAGS STILL RELEVANT TO THE CALLER PROGRAM TO AVOID DATA LOSS
                             ****
                    2460     
0FF3                2461     NEXT:                   
                    2462     ; corrected. this 2 lines of code just below were formerly not here
0FF3 C083           2463                                     PUSH            DPH                                        
                                          ; SAVE THE CONTENT OF THE DATA POINTER REGISTERS SINCE THEY WOULD BE USED HERE
0FF5 C082           2464                                     PUSH            DPL
                    2465     
0FF7 200802         2466                                     JB                      08H, NEXT_4_SUB_MEM                
                                  ; CHECK WHETHER CALLER PROGRAM IS SUB MEM OR OTHERS AND JUMP APTLY
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    54

0FFA 8022           2467                                     SJMP            NEXT_4_OPCODE
0FFC                2468     NEXT_4_SUB_MEM:
                    2469                                     ; LOAD THE USER'S DESIRED START CODE ADDRESS IN THE DATA PO
                             INTER'S HIGH AND LOWER ORDER REG.
                    2470                                     
0FFC 85353A         2471                                     MOV                     3AH, 35H                           
                                          ; LOAD THE HIGH ORDER BYTE INTO NEXT ADDRESS HOLDER/ADDRESS_DISPLAY_CONTROL'S INPUT MEM LOC 2 FOR DISPLAY 
0FFF 853439         2472                                     MOV                     39H, 34H                           
                                          ; LOAD THE LOW ORDER BYTE INTO NEXT ADDRESS HOLDER/ADDRESS_DISPLAY_CONTROL'S INPUT MEM LOC 1 FOR DISPLAY
                    2473     ; corrected. this 2 lines of code just below were formerly not here
                    2474     ; see if the 2 lines of code just above can be ignored for the sake of optimizing the 'next
                              sub mem sr' section
                    2475     ;                               MOV                     DPH, 35H                           
                                          ; LOAD THE HIGH ORDER BYTE
                    2476     ;                               MOV                     DPL, 34H                           
                                          ; LOAD THE LOWER ORDER BYTE
                    2477     ; ignore by using the commented code just above instead of the two just below
1002 853A83         2478                                     MOV                     DPH, 3AH                           
                                          ; LOAD THE HIGH ORDER BYTE
1005 853982         2479                                     MOV                     DPL, 39H                           
                                          ; LOAD THE LOWER ORDER BYTE
                    2480     
1008 85353F         2481                                     MOV                     3FH, 35H                           
                                          ; LOAD THE HIGH ORDER BYTE INTO THE V_HEX DISPLAY ADDRESS MEM LOC 2
100B 85343E         2482                                     MOV                     3EH, 34H                           
                                          ; LOAD THE LOWER ORDER BYTE     INTO THE V_HEX DISPLAY ADDRESS MEM LOC 1
                    2483     
100E 853543         2484                                     MOV                     43H, 35H                           
                                          ; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
1011 853442         2485                                     MOV                     42H, 34H                           
                                          ;                                                                                         (LOB)
                    2486     
1014 853541         2487                                     MOV                     41H, 35H                           
                                          ; THE END ADDRESS (PREPARE AN ADDRESS +1 GREATER THAN ITSELF) FOR AUTO EXAM REG... 
1017 853440         2488                                     MOV                     40H, 34H                           
                                          ; BY BOTH THE uC AND uP AFTER 'END' IS PRESSED
                    2489     
                    2490                                     ; THE MEM. LOCATIONS TO BE USED HERE ARE 34H & 35H (BECAUSE
                              THEY CONTAIN THE CURRENT LOW & HIGH ORDER ADDRESS RESPECTIVELY)
                    2491                                     ; LOAD IT INTO A REGISTER (EXTERNAL TRANSFER REGISTER) THAT
                              CAN COMMUNICATE WITH THE OUTSIDE WORLD(I MEAN OUTSIDE THE MICROCONTROLLER)
                    2492     
101A C208           2493                                     CLR                     08H                                
                                                  ; CLEAR THE NEXT SUB MEM FLAG (IS IT NECESSARY TO CLEAR THIS FLAG OR J
                             UST LEAVE IT TO CLEAR ON RESET)
101C 803A           2494                                     SJMP            EXIT_NEXT                                  
                                  ; ELOO CHECK AGAIN COS I THINK IT IS NECESSARY TO BE CLEARED ON MY FIRST LOOK/REVIEW 
101E                2495     NEXT_4_OPCODE:
                    2496     ; corrected. this 2 lines of code just below were carried to the top of the NEXT OSR entran
                             ce to accommodate the sub mem ISR
                    2497     ;                               PUSH            DPH                                        
                                          ; SAVE THE CONTENT OF THE DATA POINTER REGISTERS SINCE THEY WOULD BE USED HERE
                    2498     ;                               PUSH            DPL
                    2499     
101E 853A83         2500                                     MOV                     DPH, 3AH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE DATA POINTER
1021 853982         2501                                     MOV                     DPL, 39H
                    2502     
1024 858341         2503                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
1027 858240         2504                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                    2505     
102A 200306         2506                                     JB                      03H, NEXT_OPERAND                  
                                  ; SELECT BETWEEN OPERAND AND OPCODE NEXT CALL (OPCODE TYPE 03H= 0, OPERAND TYPE 03H= 1)
                    2507     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    55

                    2508                                     ; OPCODE NEXT CALL BEGINS HERE
                    2509     
102D E533           2510                                     MOV                     A, 33H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 1 TEMPORARY STORE (ie 33H)
102F F0             2511                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
1030 A3             2512                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                    2513     
1031 8025           2514                                     SJMP            EXIT_NEXT                                  
                                  ; 'NEXT SR' CALL ENDS HERE FOR THE OPCODE
1033                2515     NEXT_OPERAND:   
1033 200D12         2516                                     JB                      0DH, NEXT_OPERAND_AD_TYPE       ; J
                             UMP TO THE LABEL IF IT IS CALL BY 8051
1036                2517     ___8051_SPECIAL_NEXT:
                    2518                                     ; THE DATA TYPE OR BYTE 2 OPERAND(LOW ADDRESS BYTE) BEGINS 
                             HERE (FOR 8085)
1036 858341         2519                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
1039 858240         2520                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                    2521     
103C E534           2522                                     MOV                     A, 34H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 2 TEMPORARY STORE (ie 34H)
103E F0             2523                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
103F A3             2524                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                    2525                                     
1040 200D15         2526                                     JB                      0DH, EXIT_NEXT
                    2527     
1043 200702         2528                                     JB                      07H, NEXT_OPERAND_AD_TYPE       ; S
                             ELECT BETWEEN DATA AND ADDRESS TYPE OPERAND (FOR 8085 HERE)
                    2529                                                                                                
                                                  ; THE DATA TYPE CONTINUES WHILE ADDRESS TYPE JUMPS
1046 8010           2530                                     SJMP            EXIT_NEXT                                  
                                  ; SR ENDS HERE FOR THE DATA TYPE OPERAND
                    2531     
1048                2532     NEXT_OPERAND_AD_TYPE:
                    2533                                     ; ADDRESS TYPE COMPLETES THE REMAINING HALF (ie BYTE 3)
1048 858341         2534                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
104B 858240         2535                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                    2536     
104E E535           2537                                     MOV                     A, 35H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 3 TEMPORARY STORE (ie 35H)
1050 F0             2538                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
1051 A3             2539                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                    2540                                     
1052 300D03         2541                                     JNB                     0DH, EXIT_NEXT                     
                                  ; END TO ALL 8085 ACTIVITIES
1055 200EDE         2542                                     JB                      0EH, ___8051_SPECIAL_NEXT       ; S
                             ELECT BETWEEN DATA(0EH=0) AND ADDRESS(0EH=1) TYPE OPERAND (FOR 8051 HERE)
                    2543                                                                                                
                                                  ; TO STOP DATA OPERAND FROM JUMPING (FOR 8051)
                    2544     
1058                2545     EXIT_NEXT:              ; SAVE THE NEXT INSTRUCTION'S EXTERNAL TRANSFER ADDRESS (CURRENT AD
                             DRESS)
1058 85833A         2546                                     MOV                     3AH, DPH                           
                                          ; LOAD THE HIGH ORDER BYTE
105B 858239         2547                                     MOV                     39H, DPL                           
                                          ; LOAD THE LOWER ORDER BYTE
                    2548     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    56

                    2549     ;                               MOV                     43H, 3AH                           
                                          ; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
                    2550     ;                               MOV                     42H, 39H                           
                                          ;                                                                                         (LOB)
                    2551     
                    2552                                     ; DISPLAY THE NEW ADDRESS IN LINE 1 OF THE LCD (THE NEW ADD
                             RESS ARE IN THE MEM LOC. 39H & 3AH)
105E D082           2553                                     POP             DPL                                        
                                          ; RETRIEVE THE FORMER CONTENT OF THE DATA POINTER REGISTER
1060 D083           2554                             POP             DPH                                                
                                  ; REMEMBER 'FIFO' TECHGNIQUE IS USED WHEN PUSHING AND POPPING ON THE STACK
                    2555                                     
1062 22             2556                                     RET
                    2557     
                    2558     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1063                2559     DISP_CHAR:
1063 D083           2560                                     POP             DPH
1065 D082           2561                                     POP             DPL
1067                2562     PRINT_TEXT:
1067 E4             2563                                     CLR             A
1068 93             2564                                     MOVC            A, @A+DPTR
1069 B40002         2565                                     CJNE            A, #00H, LOOP
106C 8007           2566                                     SJMP            RETURN
106E 121111         2567     LOOP:                           LCALL           LCD_SHO
1071 A3             2568                                     INC             DPTR
1072 021067         2569                                     LJMP            PRINT_TEXT
1075 7401           2570     RETURN:                         MOV             A, #01H
1077 73             2571                                     JMP             @A+DPTR
                    2572     
                    2573     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    2574     
                    2575     ; ELOO U MAY PUT UR FLAG FOR SUB MEM ASCII_2_HEX SR CALL HERE(NOTE SUCH FLAG MUST BE CLEAR 
                             AT THE SUB MEM SR ON RETURN IMMEDIATELY)
                    2576     ; EXPECTED FLAG INSTRUCTION: JB         SubMem'sAscii2hexFlag, EXIT_A2H
                    2577     
                    2578     ; THE TEST IS COMPLETED. THE INEQUQLITY: 30H =< A =< 46H HAS BEEN SATISFIED AND CONVERSION 
                             HAS TAKEN PLACE!!!
                    2579     
                    2580     ; THIS SUBROUTINE RETRIEVES DATA FROM THE KEYPAD AND IDENTIFIES THE KEY PRESSED
                    2581     
                    2582     
                    2583     
                    2584                             
                    2585     
                    2586     
                    2587     
                    2588     
                    2589     
                    2590     
                    2591     
                    2592            
1078 11F3           2593     KEYPAD_ID:                      ACALL           DELAY_20mS                                 
                                          ; 20mS KEYBOARD/PAD DEBOUNCER
107A E590           2594                                     MOV             A, P1
107C B4FF02         2595                                     CJNE            A, #11111111B, K_ID_1
107F 8056           2596                                             JMP             KEYFNL
                    2597     
1081 11F3           2598     K_ID_1:                         ACALL           DELAY_20mS                                 
                                          ; 20mS KEYBOARD/PAD DEBOUNCER
1083 E590           2599                                     MOV             A, P1
1085 B4FF02         2600                                     CJNE            A, #11111111B, K_ID_2
1088 804D           2601                                             JMP             KEYFNL
                    2602            
108A                2603     K_ID_2:                         
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    57

108A 75B0FE         2604                                             MOV             P3, #11111110B
108D E590           2605                                     MOV             A, P1
108F B4FF1A         2606                                     CJNE            A, #11111111B, ROW_0
                    2607            
1092 75B0FD         2608                                     MOV             P3, #11111101B
1095 E590           2609                                     MOV             A, P1
1097 B4FF17         2610                                     CJNE            A, #11111111B, ROW_1
                    2611            
109A 75B0EF         2612                                     MOV             P3, #11101111B
109D E590           2613                                     MOV             A, P1
109F B4FF14         2614                                     CJNE            A, #11111111B, ROW_2
                    2615            
10A2 75B0DF         2616                                     MOV             P3, #11011111B
10A5 E590           2617                                             MOV             A, P1
10A7 B4FF11         2618                                             CJNE            A, #11111111B, ROW_3
                    2619           
10AA 802B           2620                                             JMP             KEYFNL
                    2621            
10AC 900030         2622     ROW_0:                          MOV             DPTR, #LT_ROW_1
10AF 800D           2623                                     SJMP            K_ID_3                                     
                                  ; FIND ROW 1
                    2624             
10B1 900038         2625     ROW_1:                          MOV             DPTR, #LT_ROW_2
10B4 8008           2626                                     SJMP            K_ID_3                                     
                                  ; FIND ROW 2
                    2627     
10B6 900040         2628     ROW_2:                          MOV             DPTR, #LT_ROW_3
10B9 8003           2629                                     SJMP            K_ID_3                                     
                                  ; FIND ROW 3
                    2630     
10BB 900048         2631     ROW_3:                          MOV             DPTR, #LT_ROW_4
                    2632                                                                                                
                                                          ; FIND ROW 4
10BE 13             2633     K_ID_3:                         RRC             A
10BF 5003           2634                                     JNC             K_ID_4                                     
                                  ; MATCH
10C1 A3             2635                                     INC             DPTR
10C2 80FA           2636                                     SJMP            K_ID_3
                    2637           
10C4 11F3           2638     K_ID_4:                         ACALL           DELAY_20mS                                 
                                          ; THIS SR IS TO ENSURE THAT THE USER RELEASES THE KEY TO AVOID KEY REPETITION
10C6 7590FF         2639                                             MOV             P1,#0FFH                           
                                          ; MAKE PORT 1 AN INPUT PORT
                    2640     ; corrected 
10C9 75B0CC         2641                                             MOV             P3, #11001100B  ; it was formerly '
                             #00001000B'
                    2642     ; corrected 
10CC E590           2643                                             MOV             A, P1
10CE B4FFF3         2644                                     CJNE            A, #11111111B, K_ID_4
                    2645                                             
10D1 E4             2646                                             CLR             A
10D2 93             2647                                     MOVC            A, @A+DPTR
                    2648      ; corrected
                    2649     ;                                       mov                     7FH, A                     
                                                  ; this line wasn't here before
10D3 F531           2650                                     mov                     31H, A                             
                                          ; TEMPORARY SAVE THE ASCII CHARACTERR OF THE KEY IDENTIFIED
                    2651                                     
10D5 D201           2652                                             SETB            01H
                    2653                                             
10D7 22             2654     KEYFNL:                         RET                                                        
                                                  ; RETURN TO KEYPAD_ID
                    2655            
                    2656     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
10D8                2657     GET_READY:
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    58

                    2658     ; THIS SUBROUTINE CHECKS BUSY FLAG (P0.7=D7) TO ENABLE COMMAND OR DATA LATCH-IN
                    2659     ; SFR BITS: P0.7 (D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
10D8 D287           2660                                             SETB            P0.7                               
                                          ; MAKE P0.7 INPUT PORT
10DA C2A5           2661                                             CLR             P2.5                               
                                          ; RS=0 ACCESS LCD COMMAND REG
10DC D2A6           2662                                             SETB            P2.6                               
                                          ; R/W=1 READ COMMAND REG
                    2663                                                                                                
                                                          ; READ COMMAND REG AND CHECK BUSY FLAG
10DE                2664     BACK:   
10DE C2B3           2665                                             CLR             P3.3                               
                                          ; E=0 L-TO-H PULSE
10E0 D2B3           2666                                             SETB            P3.3                               
                                          ; E=1 FOR L-TO-H PULSE
10E2 2087F9         2667                                             JB                      P0.7, BACK                 
                                                  ; STAY UNTIL BUSY FLAG=0
10E5 22             2668                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
                    2669     
                    2670     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
10E6                2671     LCD_CMD:
                    2672     ; THIS SUBROUTINE SENDS THE ASCII CODE FOR THE COMMAND CHARATER TO BE DISPLAYED ON THE LCD
                    2673     ; IT CALLS READY (OSR) TO CHECK BUSY FLAG FOR COMMAND TO BE LATCHED-IN
                    2674     ; OPERATING REGISTER: A
                    2675     ; SFR BITS: P0 (LCD DATA PORT D0-D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
                    2676      
10E6 11D8           2677                                             ACALL           GET_READY                          
                                          ; IS LCD READY?
10E8 F580           2678                                             MOV             P0, A                              
                                          ; LATCH COMMAND INTO LCD DATA PORT        
10EA C2A5           2679                                             CLR             P2.5                               
                                          ; RS=0 ACCESS LCD COMMAND REG
10EC C2A6           2680                                             CLR                     P2.6                       
                                                  ; WRITE
10EE D2B3           2681                                             SETB            P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
10F0 C2B3           2682                                             CLR             P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
10F2 22             2683                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
                    2684     
                    2685     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
10F3                2686     DELAY_20mS:
10F3 7E3B           2687                                             MOV             R6,#3BH
10F5                2688     HERE2:
10F5 7FA8           2689                                             MOV             R7,#0A8H
10F7                2690     HERE1:
10F7 DFFE           2691                                             DJNZ            R7,HERE1        
10F9 DEFA           2692                                             DJNZ            R6,HERE2
10FB 22             2693                                             RET
                    2694     
                    2695     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
10FC                2696     LCD_SET:
                    2697     ; THIS SUBROUTINE SETS THE MODE OF OPERATION OF THE LCD
                    2698     ; IT CALLS LCD_CMD OSR TO LATCH-IN THE COMMAND
                    2699     ; OPERATING REGISTER: A
10FC 7438           2700                                             MOV     A, #38H                                    
                                          ; 2 LINES, 5 X 7 MATRIX DISPLAY
10FE 11E6           2701                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
1100 74C0           2702                                             MOV     A, #0C0H                                   
                                          ; DISPLAY ON SECOND LINE
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    59

1102 11E6           2703                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
1104 7406           2704                                             MOV     A, #06H                                    
                                          ; INCREMENT FROM LEFT TO RIGHT
1106 11E6           2705                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
1108 740E           2706                                     MOV     A, #0EH                                            
                                  ; DISPLAY ON, CURSOR BLINKING
110A 11E6           2707                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
110C 7401           2708                                     MOV     A, #01H                                            
                                  ; CLEAR AND RETURN TO HOME
110E 11E6           2709                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
1110 22             2710                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
                    2711     
                    2712     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1111                2713     LCD_SHO:
                    2714     ; THIS SUBROUTINE SENDS THE ASCII CODE FOR THE DATA CHARATER TO BE DISPLAYED ON THE LCD
                    2715     ; IT CALLS READY (OSR) TO CHECK BUSY FLAG FOR DATA TO BE LATCHED-IN
                    2716     ; OPERATING REGISTER: A
                    2717     ; SFR BITS: P0 (LCD DATA PORT D0-D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
1111 11D8           2718                                             ACALL           GET_READY                          
                                          ; IS LCD READY?
1113 F580           2719                                             MOV             P0, A                              
                                          ; LATCH DATA INTO LCD DATA PORT 
1115 D2A5           2720                                             SETB            P2.5                               
                                          ; RS=1, ACCESS LCD DATA REG
1117 C2A6           2721                                             CLR                     P2.6                       
                                                  ; R/!W=0, WRITE
1119 D2B3           2722                                             SETB            P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
111B C2B3           2723                                             CLR             P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
111D 22             2724                                             RET
                    2725     
                    2726     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
111E                2727     FLY_OPCODE:
                    2728     ; THIS IS A SUBROUTINE THAT IS DEDICATED TO 8085 INST. SETS THAT HAS NO OPERAND
                    2729                     
111E 3111           2730                                             CALL            LCD_SHO 
1120                2731     FLY_OPCODE_SKIP:
1120 1178           2732                                             CALL            KEYPAD_ID                          
                                          ; ENSURE A KEY IS DEPRESSED
1122 3001FB         2733                                             JNB                     01H, FLY_OPCODE_SKIP
1125 C201           2734                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
1127 B42AF6         2735                                             CJNE            A, #'*', FLY_OPCODE_SKIP        ; E
                             NSURES NEXT IS TO INPUT THE CODE TO HE EXTERNAL MEMORY
112A C203           2736                                             CLR                     03H                        
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
112C 120FF3         2737                                             CALL            NEXT                               
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE OPCODE IN THE EXTERNAL MEMORY
112F 200D09         2738                                             JB                      0DH, FLY_OPCODE_EXIT       
                                  ; SKIP THE FOLLOWING CODES IF THIS SR WAS CALLED BY 8051
                    2739                     
1132 853A43         2740                                             MOV                     43H, 3AH                   
                                                  ; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
1135 853942         2741                                             MOV                     42H, 39H                   
                                                  ;                                                                                         (LOB)
                    2742                     
1138 120F9E         2743                                             CALL            ADDRESS_DISPLAY_CONTROL         ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    60

113B                2744     FLY_OPCODE_EXIT:
113B 22             2745                                             RET
                    2746     
                    2747     ; -----------------------------------------------------------------------------------------
                             ---------------------------------------------
113C                2748     FLY_DATA:
                    2749     ; THIS SUBROUTINE IS SUPPOSE TO CARRY PROGRAMS FOR THE DISPLAY OF ',' & ' '(SPACE)
                    2750     ; BEFORE THE INPUT DATA
113C 3111           2751                                             CALL            LCD_SHO                            
                                          ; SHOW THE LAST ALPHABET OF THE OPCODE (DISPLAY THE CHARATER IN 'A' FROM THE CALLER PROGRAM)
113E                2752     FLY_DATA_SKIP:                                                                             
                                          ; SKIPS THE INSTRUCTION 'CALL LCD_SHO'
113E 1178           2753                                             CALL            KEYPAD_ID                          
                                          ; ENSURE A KEY IS DEPRESSED
1140 3001FB         2754                                             JNB                     01H, FLY_DATA_SKIP
1143 C201           2755                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2756                                             
1145 B42AF6         2757                                             CJNE            A, #'*', FLY_DATA_SKIP          ; E
                             NSURES NEXT IS USE TO GIVE SPACE
1148 742C           2758                                             MOV                     A, #','                    
                                                  ; PLACE A COMMA                            
114A 3111           2759                                             CALL            LCD_SHO
114C 7420           2760                                             MOV                     A, #' '                    
                                                  ; GIVE A GAP                               
114E 3111           2761                                             CALL            LCD_SHO
1150 C203           2762                                             CLR                     03H                        
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
1152 120FF3         2763                                             CALL            NEXT
                    2764                                             
1155 753202         2765                                             MOV                     32H, #02H                  
                                                  ; ENSURES THAT ONLY TWO NIBBLES (ie 1 BYTE DATA) ARE ENTERED
1158 C204           2766                                             CLR                     04H                        
                                                          ; CLEAR THE BYTE INDICATOR FOR A 1 BYTE(2 NIBBLE) OPERAND CONVERSION
                    2767     
115A 1178           2768     FD_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
115C 3001FB         2769                                             JNB                     01H, FD_1
115F C201           2770                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2771     
1161 31E5           2772                                             CALL            ASCII_2_HEX                        
                                          ; DO THE CONVERSION AND COMPARE
1163 3002F4         2773                                             JNB                     02H, FD_1                  
                                                  ; ENSURES THAT THE KEY PRESSED IS BETWEEN 0 - F IN HEX
1166 C202           2774                                             CLR                     02H                        
                                                          ; GET READY FOR NEXT KEY
                    2775     
1168 E531           2776                                             MOV             A,31H                              
                                          ; DISPLAY THE NUMBER
116A 3111           2777                                             CALL            LCD_SHO
116C D532EB         2778                                             DJNZ            32H, FD_1                          
                                          ; CHECK IF TWO NIBBLES (ONE BYTE) DATA HAVE BEEN ENTERED
                    2779     
116F 1178           2780     FD_2:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
1171 3001FB         2781                                             JNB                     01H, FD_2
1174 C201           2782                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
1176 B42AF6         2783                                             CJNE            A, #'*', FD_2                      
                                  ; ENSURES NEXT IS USE TO GIVE SPACE
1179 D203           2784                                             SETB            03H                                
                                                  ; SELECT OPERAND TYPE 'NEXT SR' (NOT OPCODE TYPE)
117B C207           2785                                             CLR                     07H                        
                                                          ; SELECT DATA TYPE OPERAND IN THE 'NEXT SR'
117D 120FF3         2786                                             CALL            NEXT                               
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    61

                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE OPCODE
                    2787     
1180 120F9E         2788                                             CALL            ADDRESS_DISPLAY_CONTROL         ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
                    2789     
1183 22             2790                                             RET
                    2791     
                    2792     ;------------------------------------------------------------------------------------------
                             -------------------------------------------
1184                2793     FLY_ADDRESS:
1184 3111           2794                                             CALL            LCD_SHO                            
                                          ; SHOW THE LAST ALPHABET OF TGHE OPCODE (DISPLAY THE CHARATER IN 'A' FROM THE CALLER PROGRAM)
1186                2795     FLY_ADDRESS_SKIP:
1186 1178           2796                                             CALL            KEYPAD_ID                          
                                          ; ENSURE A KEY IS DEPRESSED
1188 3001FB         2797                                             JNB                     01H, FLY_ADDRESS_SKIP
118B C201           2798                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2799     
118D B42AF6         2800                                             CJNE            A, #'*', FLY_ADDRESS_SKIP       ; E
                             NSURES NEXT IS USE TO GIVE SPACE
1190 7420           2801                                             MOV                     A, #' '                    
                                                  ; GIVE A GAP                               
1192 3111           2802                                             CALL            LCD_SHO
1194 C203           2803                                             CLR                     03H                        
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
1196 120FF3         2804                                             CALL            NEXT                               
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE OPCODE'S CODES
1199                2805     FLY_SUB_MEM:                                    
1199 753204         2806                                             MOV                     32H, #04H                  
                                                  ; ENSURES THAT ONLY FOUR NIBBLES (ie 2 BYTE DATA) ARE ENTERED
119C D204           2807                                             SETB            04H                                
                                                  ; SET THE BYTE INDICATOR FOR A 2 BYTE(4 NIBBLE) OPERAND CONVERSION
119E D206           2808                                             SETB            06H                                
                                                  ; SET FLAG TO CAUSE THE ASCII_2_HEX SR TO CARRY OUT HIGH ORDER BYTE MARRIAGE FIRST
                    2809     
11A0 1178           2810     FA_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
11A2 3001FB         2811                                             JNB                     01H, FA_1
11A5 C201           2812                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2813     
11A7 30080C         2814                                             JNB                     08H, FA_CONTINUE           
                                          ; IF IT IS NOT SUB MEM PASSING THIS SEGMENT SKIP THE SEGMENT
11AA C205           2815                                             CLR                     05H                        
                                                          ; REFRESH THE BYTE MARRIAGE FLAG. IT HELPS THE CANCEL SR
11AC B44E07         2816                                             CJNE            A, #'N', FA_CONTINUE            ; E
                             LOO NOTE THAT THE FOLLOWING 3 INSTRUCTION IS SOLELY FOR SUB MEM'S CANCEL
                    2817                                             CLR_LCD
11B4 80E3           2820                                             SJMP            FLY_SUB_MEM
                    2821     
11B6 31E5           2822     FA_CONTINUE:            CALL            ASCII_2_HEX                                     ; D
                             O THE CONVERSION AND COMPARE
11B8 3002E5         2823                                             JNB                     02H, FA_1                  
                                                  ; ENSURES THAT THE KEY PRESSED IS BETWEEN 0 - F IN HEX
11BB C202           2824                                             CLR                     02H                        
                                                          ; GET READY FOR NEXT KEY
                    2825     
11BD E531           2826                                             MOV             A,31H                              
                                          ; DISPLAY THE NUMBER
11BF 3111           2827                                             CALL            LCD_SHO
11C1 D532DC         2828                                             DJNZ            32H, FA_1                          
                                          ; CHECK IF FOUR NIBBLES (TWO BYTES) DATA HAVE BEEN ENTERED
                    2829     
11C4 1178           2830     FA_2:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    62

11C6 3001FB         2831                                             JNB                     01H, FA_2
11C9 C201           2832                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
11CB B42AF6         2833                                             CJNE            A, #'*', FA_2                      
                                  ; ENSURES NEXT IS PRESSED TO CONTINUE
                    2834     ;corrected
11CE 200004         2835                                             JB                      00H, FA_EXIT_1 ;formerly FA
                             _EXIT        ; SKIP THE SR SEGMENT BELOW IF IT IS A SUB MEM CALL
                    2836     
11D1 D203           2837                                             SETB            03H                                
                                                  ; SELECT OPERAND TYPE IN THE 'NEXT SR' (NOT OPCODE TYPE)
11D3 D207           2838                                             SETB            07H                                
                                                  ; SELECT ADDRESS TYPE OPERAND IN THE 'NEXT SR' FOR 8085 ONLY
                    2839     ;corrected. there was no label just below, before
11D5 120FF3         2840     FA_EXIT_1:                      CALL            NEXT                                       
                                  ; CALL NEXT OSR TO PERMANENTLY SAVE THE OPERAND CODES
11D8 200006         2841                                             JB                      00H, FA_EXIT  ; this line n
                             ever existed before
                    2842     
11DB 853A43         2843                                             MOV                     43H, 3AH                   
                                                  ; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
11DE 853942         2844                                             MOV                     42H, 39H                   
                                                  ;                                                                                         (LOB)
                    2845     ;corrected. there was no label just below, before
11E1                2846     FA_EXIT:
11E1 120F9E         2847                                             CALL            ADDRESS_DISPLAY_CONTROL         ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
                    2848     ; corrected. label removed
                    2849     ;FA_EXIT:                                                                                  
                                                                                             
11E4 22             2850                                             RET
                    2851     
                    2852     ; -----------------------------------------------------------------------------------------
                             -------------------------------------------
                    2853     ; THIS SUBROUTINE CONVERTS A GIVEN ASCII CHARACTER INTO ITS EQUIVALENT HEXADECIMAL NUMBER U
                             SING 8051 INSTRUCTION SETS
                    2854     ; SOME ADDITIONAL CODE HERE ARE TO ENSURE PROTECTION SINCE THIS SR IS TO BE USED WERE A-Z A
                             LPHABET KEYS ARE AVAILABLE TO BE DEPRESSED
                    2855     
                    2856     ; REGISTER DEFINITION:
                    2857     ; AS AN OPERATING & AN INPUT REGISTER = A
                    2858     
                    2859     ; BI                    BIT             04H                                     ; BYTE INDI
                             CATOR (INDICATES WHEN AN OPERAND IS A 2 BYTE(4 NIBBLES) OR 1 BYTE (2NIBBLES) )
                    2860     
                    2861     
                    2862     ; ****REMEMBER TO SAVE REGS & FLAGS STILL RELEVANT TO THE CALLER PROGRAM TO AVOID DATA LOSS
                             ****
                    2863     
11E5                2864     ASCII_2_HEX:    
11E5 B43001         2865                                     CJNE    A, #30H, A2H_1  ; THE CONTENT OF 'A' MUST SATISFY T
                             HE FOLLOWING INEQUALITY: 30H =< A =< 46H
11E8 C3             2866                                     CLR             C                               ; ENSURE IT
                              PASSES TO THE NEXT INSTRUCTION
                    2867     
11E9 4041           2868     A2H_1:                  JC              EXIT_A2H
11EB 9430           2869                                     SUBB    A, #30H                 ; SUBTRACT 30H FROM A REGIS
                             TER
11ED B40A01         2870                                     CJNE    A, #0AH, A2H_2
11F0 C3             2871                                     CLR             C                               ; ENSURE IT
                              PASSES TO THE NEXT INSTRUCTION
                    2872     
11F1 4008           2873     A2H_2:                  JC              A2H_4
11F3 9407           2874                                     SUBB    A, #07H                 ; SUBTRACT 07H FROM 'A' REG
                             ISTER
11F5 B40F01         2875                                     CJNE    A, #0FH, A2H_3  ; CHECK IF THE RESULT OF THE SUBTRA
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    63

                             CTION IS GREATER THAN 0FH; IF SO EXIT THE SR ELSE CONTINUE
11F8 D3             2876                                     SETB    C                               ; ENSURE IT PASSES 
                             TO THE NEXT INSTRUCTION
                    2877     
11F9 5031           2878     A2H_3:                  JNC             EXIT_A2H                
                    2879     ; ELOO U MAY PUT UR FLAG FOR SUB MEM ASCII_2_HEX SR CALL HERE(NOTE SUCH FLAG MUST BE CLEAR 
                             AT THE SUB MEM SR ON RETURN IMMEDIATELY)
                    2880     ; EXPECTED FLAG INSTRUCTION: JB         SubMem'sAscii2hexFlag, EXIT_A2H
                    2881     ; corrected the above instruction is added below that for the generous comment  08H can sti
                             ll be used
                    2882     ;                               JB              00H, EXIT_A2H
                    2883     ; THE TEST IS COMPLETED. THE INEQUQLITY: 30H =< A =< 46H HAS BEEN SATISFIED AND CONVERSION 
                             HAS TAKEN PLACE!!!
                    2884     
11FB D202           2885     A2H_4:                  SETB    02H                             ; THE FLAG, 02H BEEN SET IN
                             DICATES THAT THE KEY PRESSED IS BETWEEN 0 - F IN HEX
11FD C3             2886                                     CLR             C                               ; ENSURE TH
                             AT THE SUBTRCTION IS DONE WITHOUT BORROW(ie THE CARRY FLAG)
                    2887     
                    2888     ; MARRIAGE BEGINS
11FE 30041A         2889                                     JNB             04H, A2H_7              ; MEM BIT, 04H = 1 
                             MEANS 2 BYTES(4 NIBBLES) & 04H = 0 MEANS 1 BYTE (2 NIBBLES)
1201 200602         2890                                     JB              06H, A2H_5              ; HAS THE MARRIAGE 
                             OF HIGH ORDER BYTE COMPLETED? FOR NO, 06H = 1; FOR YES, 06H = 0
1204 8015           2891                                     SJMP    A2H_7                   ; JMUP FOR THE LOWER BYTE O
                             F ADDRESS
                    2892     
                    2893     ; FOR HIGHER ORDER BYTE OF AN ADDRESS
1206 B205           2894     A2H_5:                  CPL             05H                             ; CONTROLS THE NIBB
                             LE MARRIAGE INTO A BYTE
1208 200508         2895                                     JB              05H, A2H_6
120B 4535           2896                                     ORL             A, 35H                  ; MARRY MSB(1ST NIB
                             BLE IN MEM LOC. 34H) AND THE LSB(2ND NIBBLE IN 'A') INTO A BYTE DATA OR ADDRESS
120D F535           2897                                     MOV             35H, A                  ; SAVE THE FINAL RE
                             SULT IN MEM LOC. 35H 
120F C206           2898                                     CLR             06H                             ; CLEARS ON
                              MARRIAGE COMPLETION FOR HIGH ORDER BYTE
1211 8019           2899                                     SJMP    EXIT_A2H
                    2900     
1213 23             2901     A2H_6:                  RL              A                               ; SWAP MSB AND LSB
1214 23             2902                                     RL              A
1215 23             2903                                     RL              A
1216 23             2904                                     RL              A
1217 F535           2905                                     MOV             35H, A                  ; SAVE THE CURRENT 
                             RESULT IN MEM LOC. 35H
                    2906     
1219 8011           2907                                     SJMP    EXIT_A2H
                    2908     
                    2909     ; FOR DATA OR LOWER ORDER BYTE OF AN ADDRESS
121B B205           2910     A2H_7:                  CPL             05H                             ; CONTROLS THE NIBB
                             LE MARRIAGE INTO A BYTE
121D 200506         2911                                     JB              05H, A2H_8
1220 4534           2912                                     ORL             A, 34H                  ; MARRY MSB(1ST NIB
                             BLE IN MEM LOC. 34H) AND THE LSB(2ND NIBBLE IN 'A') INTO A BYTE DATA OR ADDRESS
1222 F534           2913                                     MOV             34H, A                  ; SAVE THE FINAL RE
                             SULT IN MEM LOC. 34H 
1224 8006           2914                                     SJMP    EXIT_A2H
                    2915     
1226 23             2916     A2H_8:                  RL              A                               ; SWAP MSB AND LSB
1227 23             2917                                     RL              A
1228 23             2918                                     RL              A
1229 23             2919                                     RL              A
122A F534           2920                                     MOV             34H, A                  ; SAVE THE CURRENT 
                             RESULT IN MEM LOC. 34H
                    2921     
122C                2922     EXIT_A2H:
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    64

122C 22             2923                                     RET                                             ; RETURN TO
                              THE CALLER PROGRAM
                    2924     
                    2925     ; TESTED: QC PASSED SYNTAXICALLY
                    2926     
                    2927     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    2928     ; EXAMINE THE REGISTERS OF THE 8085uP (EXAM REG)
                    2929     ; THIS SUBROUTINE IS USED TO EXAMINE THE CONTENT OF THE 8085uP IN-BUILT REGISTERS (ie A, B,
                              C, D, E, H & L)
                    2930     
                    2931     ; *** IT SHOULD BE INCLUDED IN THE MANUAL THAT THE USER SHOULD EXAMINE THE CONTENT OF THE A
                             CCUMMULATOR FIRST BEFORE OTHER TO AVOID 
                    2932     ; *** LOSS OF ITS DATA SINCE IT IS THE ONE THAT DOES THE TRANFER
                    2933     
                    2934     ;                                       ERITSM          EQU             42H                
                                                  ; EXAM REG INSTRUCTION TEMPORARY STORAGE MEMORY
                    2935     ;                                       ERRM1           EQU             43H                
                                                  ; EXAM REG RESERVED MEMORY LOC. 1 FOR LOB (THE ADDRESS IS USE TO STORE
                              THE CONTENT OF THE EXAMINED REG.)
                    2936     ;                                       ERRM2           EQU             44H                
                                                  ; EXAM REG RESERVED MEMORY LOC. 2 FOR HOB
                    2937     ;                                       ERSATSM1        EQU             45H                
                                                  ; EXAM REG START ADDRESS TEMPORARY STORAGE MEMORY LOC. 1 FOR LOB
                    2938     ;                                       ERSATSM2        EQU             46H                
                                                  ; EXAM REG START ADDRESS TEMPORARY STORAGE MEMORY LOC. 2 FOR HOB
                    2939     
                    2940     
122D                2941     EXAM_REG:                       
                    2942                                             CLR_LCD
                    2945                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS ON LINE ONE (SINCE LCD DDRAM ADDRESS RESETS WHEN CLEARED)
1238 4578616D       2948                                             DB                      'Examine Register',0
123C 696E6520                
1240 52656769                
1244 73746572                
1248 00                      
1249 854183         2949                                             MOV                     DPH, 41H                   
                                                  ; PREPARE AN ADDRESS +2 GREATER THAN THE END ADDRESS FOR AUTO EXECUTION 
124C 854082         2950                                             MOV                     DPL, 40H                   
                                                  ; BY BOTH THE uC AND uP
                    2951     
124F A3             2952                                             INC                     DPTR
1250 858344         2953                                             MOV                     44H, DPH                   
                                                  ; SAVE THE ADDRESS OF THE RESERVED AREA FOR THE ANSWER TO THE EXAMINED REGISTER
1253 858243         2954                                             MOV                     43H, DPL
                    2955     
1256 A3             2956                                             INC                     DPTR                       
                                                  
1257 858346         2957                                             MOV                     46H, DPH                   
                                                  ; SAVE THE START ADDRESS OF THE EXECUTION OF EXAMINE REGISTER BY THE 8085uP
125A 858245         2958                                             MOV                     45H, DPL
                    2959     
125D 74C0           2960                                             MOV                     A, #0C0H                   
                                                  ; THE INSTRUCTIONS BELOW DISPLAYS ON LINE 2
125F 11E6           2961                                             CALL            LCD_CMD
                    2962                                             
1261 1178           2963     ER_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(1ST KEY) IS DEPRESSED
1263 3001FB         2964                                             JNB                     01H, ER_1
1266 C201           2965                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2966                                             
1268 B44105         2967                                             CJNE            A, #'A', ER_2                      
                                  ; JUMP TO A'S SECOND CHARACTER ELSE CONTINUE
126B 75427F         2968                                             MOV                     42H, #7FH                  
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    65

                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, A' 
126E 802E           2969                                             SJMP            ER_8
1270 B44205         2970     ER_2:                           CJNE            A, #'B', ER_3                           ; J
                             UMP TO C'S SECOND CHARACTER ELSE CONTINUE 
1273 754278         2971                                             MOV                     42H, #78H                  
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, B' 
1276 8026           2972                                             SJMP            ER_8
1278 B44305         2973     ER_3:                           CJNE            A, #'C', ER_4                           ; J
                             UMP TO D'S SECOND CHARACTER ELSE CONTINUE 
127B 754279         2974                                             MOV                     42H, #79H                  
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, C' 
127E 801E           2975                                             SJMP            ER_8
1280 B44405         2976     ER_4:                           CJNE            A, #'D', ER_5                           ; J
                             UMP TO A'S SECOND CHARACTER ELSE CONTINUE
1283 75427A         2977                                             MOV                     42H, #7AH                  
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, D' 
1286 8016           2978                                             SJMP            ER_8
1288 B44505         2979     ER_5:                           CJNE            A, #'E', ER_6                           ; J
                             UMP TO C'S SECOND CHARACTER ELSE CONTINUE 
128B 75427B         2980                                             MOV                     42H, #7BH                  
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, E' 
128E 800E           2981                                             SJMP            ER_8
1290 B44805         2982     ER_6:                           CJNE            A, #'H', ER_7                           ; J
                             UMP TO D'S SECOND CHARACTER ELSE CONTINUE 
1293 75427C         2983                                             MOV                     42H, #7CH                  
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, H' 
1296 8006           2984                                             SJMP            ER_8
1298 B44CC6         2985     ER_7:                           CJNE            A, #'L', ER_1                           ; J
                             UMP TO D'S SECOND CHARACTER ELSE CONTINUE 
129B 75427D         2986                                             MOV                     42H, #7DH                  
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, L' 
                    2987     
129E 3111           2988     ER_8:                           CALL            LCD_SHO                                    
                                  ; DISPLAY THE REGISTERS' ALPAHBET INDICATOR FOLLOWED BY THE CHARATER ':'
12A0 743A           2989                                             MOV                     A, #':'
12A2 3111           2990                                             CALL            LCD_SHO
                    2991     
12A4 E542           2992                                             MOV                     A, 42H                     
                                                  ; SEND TO THE EXTERNAL DATA MEM. THE HEXCODE (IN 8085uP INSTRUCTION SET) TO READ  
12A6 F0             2993                                             MOVX            @DPTR, A                           
                                          ; THE CONTENT OF THE REGISTER TO BE EXAMINED AND PLACE IT IN 8085''s ACCUMMULATOR
12A7 7432           2994                                             MOV                     A, #32H                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'STA ....'  
12A9 A3             2995                                             INC                     DPTR
12AA F0             2996                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
12AB E543           2997                                             MOV                     A, 43H                     
                                                  ; LOAD THE SECOND BYTE (LOB OF THE ADDRESS) FIRST AS ASSMBLEY PRINCIPLE DEMANDS
12AD A3             2998                                             INC                     DPTR
12AE F0             2999                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
12AF E544           3000                                             MOV                     A, 44H                     
                                                  ; LOAD THE THIRD BYTE (HOB OF THE ADDRESS) SECOND AS ASSMBLEY PRINCIPL
                             E DEMANDS                                 
12B1 A3             3001                                             INC                     DPTR
12B2 F0             3002                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
12B3 7476           3003                                             MOV                     A, #76H                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'HLT'
12B5 A3             3004                                             INC                     DPTR
12B6 F0             3005                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
                    3006     
                    3007     ; PLACE AN INSTRUCTION TO TELL THE MICROPROCESSOR TO BEGIN EXECUTION ON THE FOLLOWING ADDRE
                             SS: 44H (HOB) & 43H (LOB)
12B7 51BB           3008                                             CALL            EXE
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    66

                    3009                                             
                    3010     
12B9 412D           3011                                             AJMP            EXAM_REG                           
                                                  ; START AFRESH
                    3012     
                    3013     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    3014     ; EXECUTE (EXE)
                    3015     ; THIS IS A SR THAT COMMUNICATES WITH THE MICROPROCESSOR TELL IT TO CARRY OUT THE CODE LOAD
                             ED IN THE EXTERNAL DATA MEMORY
                    3016     
                    3017     ; I MAY USE INTERRUPT IN THE 8085 TO DO THIS
                    3018     
12BB 758701         3019     EXE:                    MOV                     PCON, #01H                              ; A
                             CTIVATE THE IDLE MODE
12BE 22             3020                                     RET
                    3021     
                    3022     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    3023     ; E_N_D (END OF PROGRAM)
                    3024     ; THIS SR IS THE SUBBROUTINE THAT IS CALLED BY THE USER AT THE END OF ANY PROGRAM WRITING
                    3025     ; REMEMBER TO DECREMENT THE CURRENT ADDRESS MEMORY LOC BEFORE SAVING IT INSIDE END MEMORY L
                             OCATION
                    3026     
                    3027     ; *** REMEMBER THE S1 - S4 AND L1 - L4
                    3028     
12BF                3029     E_N_D:
                    3030                                             CLR_LCD
                    3033                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS ON LINE ONE (SINCE LCD DDRAM ADDRESS RESETS WHEN CLEARED)
12CA 20506C65       3036                                             DB                      ' Please Wait... ',0
12CE 61736520                
12D2 57616974                
12D6 2E2E2E20                
12DA 00                      
                    3037     ; corrected
12DB 1213E3         3038                                             LCALL           DELAY_2S                           
                                          ; just added this line to ensure that ' Please Wait... ' displayed
                    3039     ; corrected
12DE C083           3040                                             PUSH            DPH                                
                                                  ; SAVE THIER CONTENTS
12E0 C082           3041                                             PUSH            DPL
                    3042                                             
12E2 7943           3043                                             MOV                     R1, #43H                   
                                                  ; STARTING ADDRESS OF THE RESERVED AREA FOR ...
12E4 7842           3044                                             MOV                     R0, #42H                   
                                                  ; RESULTS OF THE EXAMINED 8085'S REG. = PAGE ADDRESS
                    3045     
                    3046     ; ------------------------------------
12E6 854383         3047                                             MOV                     DPH, 43H                   
                                                  ; THE PAGE ADDRESS CONTAINS THE BEGINNING OF THE MEMORY SPACE WHERE THE CONTENT...
12E9 854282         3048                                             MOV                     DPL, 42H                   
                                                  ; OF EXAMINED 8085'S REGISTERS ARE SAVED. 1 OF (2 BYTE X 7)
                    3049                                                                                                
                                                          ; FOR REGISTER A
                    3050     
12EC A3             3051                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 2 OF (2 BYTE X 7)
12ED 858345         3052                                             MOV                     45H, DPH                   
                                                  ; FOR REGISTER B
12F0 858244         3053                                             MOV                     44H, DPL                   
                                                  
                    3054     
12F3 A3             3055                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 3 OF (2 BYTE X 7)
12F4 858347         3056                                             MOV                     47H, DPH                   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    67

                                                  ; FOR REGISTER C
12F7 858246         3057                                             MOV                     46H, DPL                   
                                                  
                    3058     
12FA A3             3059                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 4 OF (2 BYTE X 7)
12FB 858349         3060                                             MOV                     49H, DPH                   
                                                  ; FOR REGISTER D
12FE 858248         3061                                             MOV                     48H, DPL                   
                                                  
                    3062     
1301 A3             3063                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 5 OF (2 BYTE X 7)
1302 85834B         3064                                             MOV                     4BH, DPH                   
                                                  ; FOR REGISTER E
1305 85824A         3065                                             MOV                     4AH, DPL                   
                                                  
                    3066     
1308 A3             3067                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 6 OF (2 BYTE X 7)
1309 85834D         3068                                             MOV                     4DH, DPH                   
                                                  ; FOR REGISTER H
130C 85824C         3069                                             MOV                     4CH, DPL                   
                                                  
                    3070     
130F A3             3071                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 7 OF (2 BYTE X 7)
1310 85834F         3072                                             MOV                     4FH, DPH                   
                                                  ; FOR REGISTER L
1313 85824E         3073                                             MOV                     4EH, DPL                   
                                                  
                    3074     
                    3075     
                    3076     ; ------------------------------------
                    3077     ;                                       MOV                     A, #7FH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, A' 
1316 7154           3078                                             CALL            END_LOADER                         
                                          ; NOTICE THAT IT IS NOT NECESSARY FOR uP TO CARRY OUT THE ABOVE INSTRUCTION
                    3079     
1318 7478           3080                                             MOV                     A, #78H                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, B' 
131A 7154           3081                                             CALL            END_LOADER
                    3082     
131C 7479           3083                                             MOV                     A, #79H                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, C' 
131E 7154           3084                                             CALL            END_LOADER
                    3085     
1320 747A           3086                                             MOV                     A, #7AH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, D' 
1322 7154           3087                                             CALL            END_LOADER
                    3088     
1324 747B           3089                                             MOV                     A, #7BH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, E' 
1326 7154           3090                                             CALL            END_LOADER
                    3091     
1328 747C           3092                                             MOV                     A, #7CH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, H' 
132A 7154           3093                                             CALL            END_LOADER
                    3094     
132C 747D           3095                                             MOV                     A, #7DH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, L' 
132E 7154           3096                                             CALL            END_LOADER
                    3097     
1330 D082           3098                                             POP                     DPL                        
                                                          ; RETRIEVE THIER CONTENT 
1332 D083           3099                                             POP                     DPH                        
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    68

                                                          ; (ELOO CHECK IF THIS AND THE OTHER INSTRUCTION ABOVE IS NECESSARY)
                    3100     ; ELOO YOU MAY INCLUDE AT MOST 1 OR 2 SECONDS DELAY SO THAT THE LCD MESSAGE ABOVE MAY BE VI
                             SIBLE TO THE USER
                    3101                                             CLR_LCD
                    3104                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS ON LINE ONE (SINCE LCD DDRAM ADDRESS RESETS WHEN CLEARED)
133F 20202020       3107                                             DB                      '     Done!!!     ',0
1343 20446F6E                
1347 65212121                
134B 20202020                
134F 2000                    
                    3108     
1351 300CFD         3109                                             JNB                     0CH, $                     
                                                  ; JUST STAY HERE WHILE THE USER ANALYIZE HE/HER DATA
                    3110     
                    3111     ; ------------------------------------
1354 A3             3112     END_LOADER:                     INC                     DPTR                               
                                          ; SEND TO THE EXTERNAL DATA MEM. THE HEXCODE (IN 8085uP INSTRUCTION SET) TO READ  
1355 F0             3113                                             MOVX            @DPTR, A                           
                                          ; THE CONTENT OF THE REGISTER TO BE EXAMINED AND PLACE IT IN 8085''s ACCUMMULATOR
                    3114     
1356 7432           3115                                             MOV                     A, #32H                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'STA ....'  
1358 A3             3116                                             INC                     DPTR
1359 F0             3117                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
                    3118     
135A E6             3119                                             MOV                     A, @R0                     
                                                  ; LOAD THE SECOND BYTE (LOB OF THE ADDRESS) FIRST AS ASSMBLEY PRINCIPLE DEMANDS
135B A3             3120                                             INC                     DPTR
135C F0             3121                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
                    3122     
135D E7             3123                                             MOV                     A, @R1                     
                                                  ; LOAD THE THIRD BYTE (HOB OF THE ADDRESS) SECOND AS ASSMBLEY PRINCIPL
                             E DEMANDS                                 
135E A3             3124                                             INC                     DPTR
135F F0             3125                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
                    3126     
1360 09             3127                                             INC                     R1                         
                                                          ; GET READY FOR THE NEXT ADDRESS TRANSFER
1361 08             3128                                             INC                     R0
                    3129     
1362 22             3130                                             RET
                    3131     
                    3132     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    3133     ; VIEW HEXADECIMAL (V_HEX)
                    3134     ; THIS IS A SUBROUTINE THAT ENABLES THE USER TO VIEW THE HEXADECIMAL CODE OF THE ALREADY WR
                             ITTEN CODE
                    3135     ; BOTH IN MACHINE LANGUAGE AND IN ASMBELY LANGUAGE
                    3136     
                    3137     ; **** MAKE SURE YOU INCLUDE THE START AND END OF ADDRESS CHECKERS TO AVOID READ SUPERFULOU
                             S CODES
                    3138     ; **** ALSO THE ADDRESS DISPLAY CONTROL OF THE SR
1363 853F3D         3139     V_HEX:                  MOV                     3DH, 3FH                                   
                                  ; LOAD THE START ADDRESS' HOB INTO THE V_HEX DISPLAY ADDRESS MEM LOC 2
1366 853E3C         3140                                     MOV                     3CH, 3EH                           
                                          ; LOAD THE START ADDRESS' LOB INTO THE V_HEX DISPLAY ADDRESS MEM LOC 1
                    3141     
1369 853D3A         3142     VH_1:                   MOV                     3AH, 3DH                                   
                                  ; LOAD THE START ADDRESS (ON ENTRANCE TO THE SR) OR CURRENT ADDRESS (ON SR CONTINUITY)...
136C 853C39         3143                                     MOV                     39H, 3CH                           
                                          ; INTO ADDRESS_DISPLAY_CONTROL'S INPUT REGISTERS FOR DISPLAY
136F 120F9E         3144                                     CALL            ADDRESS_DISPLAY_CONTROL         ; NOTE THE 
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    69

                             OSR CONTAINS THE MACRO 'CLR_LCD'
                    3145     
1372 853D83         3146                                     MOV                     DPH, 3DH                           
                                          ; LOAD THE START ADDRESS ON ENTRANCE TO THE SR OR... 
1375 853C82         3147                                     MOV                     DPL, 3CH                           
                                          ; CURRENT ADDRESS INTO THE DATA POINTER ON SR CONTINUITY
                    3148     
1378 E0             3149                                     MOVX            A, @DPTR                                   
                                  ; RETRIEVE THE HEX CODE IN THE ADDRESS SPECIFIED BY THE CONTENT OF THE DPTR
1379 F536           3150                                     MOV                     36H, A                             
                                          ; PLACE THE HEX CODE INTO THE INPUT MEMORY LOC. (36H) OF THE HEX_2_ASCII SR
                    3151     
137B 120FD1         3152                                     CALL            HEX_2_ASCII                                
                                  ; CALL THE OSR FOR CONVERSION
                    3153     
137E 74C0           3154                                     MOV                     A, #0C0H                           
                                          ; LOAD A COMMAND TO DISPLAY THE CONTENT OF 38H & 37H ON LINE 2, POSITION 1 & 2
1380 11E6           3155                                     CALL            LCD_CMD
                    3156     
1382 E538           3157                                     MOV                     A, 38H                             
                                          ; MOVE THE ASCII CODE OF THE HIGHER ORDER BYTE TO FOR DISPLAY
1384 3111           3158                                     CALL            LCD_SHO
1386 E537           3159                                     MOV                     A, 37H                             
                                          ; MOVE THE ASCII CODE OF THE LOWER ORDER BYTE TO FOR DISPLAY
1388 3111           3160                                     CALL            LCD_SHO
                    3161     
138A 1178           3162     VH_2:                   CALL            KEYPAD_ID                                       ; E
                             NSURE A KEY IS DEPRESSED
138C 3001FB         3163                                     JNB                     01H, VH_2
138F C201           3164                                     CLR                     01H     
                    3165     
                    3166     ; ***************SCROLL EITHER UP OR DOWN
                    3167     
1391 B4362A         3168                                     CJNE            A, #'6', VH_9                           ; S
                             CROLL UP
                    3169     ; A COMPARISON INSTRUCTION IS HERE TO DETERMINE WHETHER THE SCROLLING HAS ENDED OR NOT. THI
                             S INVOLVES THE USE OF ...
                    3170     ; 2 DIFFERENT REGISTERS TO COMPARE ANOTHER 2 (SINCE ADDRESS IS A 16 BIT STUFF). MEM LOCS. I
                             NVOLVED: 3D&3CH AND START'S ADDRESS STORAGE MEM LOCS.
1394 E53D           3171                                     MOV                     A, 3DH
1396 B53F01         3172                                     CJNE            A, 3FH, VH_3                            ; C
                             OMPARE HOB OF CURRENT ADDRESS AND THAT OF START ADDRESS
1399 D3             3173                                     SETB            C                       
139A 4002           3174     VH_3:                   JC                      VH_4
139C 8008           3175                                     SJMP            VH_6                                       
                                  ; PASSED. JUMP TO CONTINUE
                    3176                                     
139E E53C           3177     VH_4:                   MOV                     A, 3CH
13A0 B53E01         3178                                     CJNE            A, 3EH, VH_5                            ; C
                             OMPARE LOB OF CURRENT ADDRESS AND THAT OF START ADDRESS
13A3 D3             3179                                     SETB            C
13A4 40E4           3180     VH_5:                   JC                      VH_2                                       
                                  ; THE 'SCROLL UP STOP' TEST ENDS HERE
                    3181                                                                                                
                                                  ; PASSED. CONTINUE
                    3182     
13A6 200B03         3183     VH_6:                   JB                      0BH, VH_7
13A9 D53C0A         3184                                     DJNZ            3CH, VH_8                                  
                                  ; DECREMENT THE ADDRESS (16 BITS OR 2 BYTES) FOR THE NEXT CODE AND...
13AC B20B           3185     VH_7:                   CPL                     0BH                                        
                                          ; HELPS TO MONITOR DECREMENT ON OVERFLOW
13AE 200B05         3186                                     JB                      0BH, VH_8
13B1 153D           3187                                     DEC                     3DH                                
                                                  ; (THIS ADDRESS DECREMENT IS A I6 BIT OR 2 BYTE DECREMENTING SO OBSERVE CAREFULLY)
13B3 753CFF         3188                                     MOV                     3CH, #0FFH
                    3189     
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    70

13B6 853D83         3190     VH_8:                   MOV                     DPH, 3DH                                   
                                  ; LOAD THE START/CURRENT ADDRESS INTO THE DATA POINTER
13B9 853C82         3191                                     MOV                     DPL, 3CH
                    3192     
13BC 80AB           3193                                     SJMP            VH_1                                       
                                  ; GO BACK AND START AFRESH WITH THE THE NEW(PREVIOUS) ADDRESS
                    3194     
13BE B4371B         3195     VH_9:                   CJNE            A, #'7', VH_14                          ; SCROLL DO
                             WN
                    3196     ; A COMPARISON INSTRUCTION HERE TO DETERMINE WHETHER THE SCROLLING HAS ENDED OR NOT. THIS M
                             AY INVOLVE THE USE OF ...
                    3197     ; 2 DIFFERENT REGISTERS TO COMPARE ANOTHER 2 (SINCE ADDRESS IS A 16 BIT STUFF). REGSITERS I
                             NVOLVED: 3D&3CH AND END'S ADDRESS STORAGE MEM LOC.
13C1 E53D           3198                                     MOV                     A, 3DH
13C3 B54101         3199                                     CJNE            A, 41H, VH_10                           ; C
                             OMPARE HOB OF CURRENT ADDRESS AND THAT OF END ADDRESS
13C6 C3             3200                                     CLR                     C                       
13C7 5002           3201     VH_10:                  JNC                     VH_11
13C9 8008           3202                                     SJMP            VH_13                                      
                                  ; PASSED. JUMP TO CONTINUE
                    3203                                     
13CB E53C           3204     VH_11:                  MOV                     A, 3CH
13CD B54001         3205                                     CJNE            A, 40H, VH_12                           ; C
                             OMPARE LOB OF CURRENT ADDRESS AND THAT OF END ADDRESS
13D0 C3             3206                                     CLR                     C
13D1 50B7           3207     VH_12:                  JNC                     VH_2                                       
                                  ; THE 'SCROLL DOWN STOP' TEST ENDS HERE
                    3208                                                                                                
                                                  ; PASSED. CONTINUE
                    3209     
13D3 A3             3210     VH_13:                  INC                     DPTR                                       
                                  ; INCREMENT THE ADDRESS FOR THE NEXT CODE
13D4 85833D         3211                                     MOV                     3DH, DPH                           
                                          ; LOAD THE START/CURRENT ADDRESS INTO THE DATA POINTER
13D7 85823C         3212                                     MOV                     3CH, DPL
                    3213     
13DA 808D           3214                                     SJMP            VH_1                                       
                                  ; GO BACK AND START AFRESH WITH THE THE NEW(NEXT) ADDRESS
                    3215     
13DC B435AB         3216     VH_14:                  CJNE            A, #'5', VH_2                           ; JUMP TO A
                              USER SPECIFIED ADDRESS
13DF 910A           3217                                     CALL            GO_TO                                      
                                  ; GO TO THE USER ADDRESS
13E1 8086           3218                                     SJMP            VH_1                                       
                                  ; GO BACK AND START AFRESH WITH THE THE NEW(NEXT) ADDRESS
                    3219                                ; U MAY INCLUDE A SKIP IN THE GOTO OSR WHEN CANCEL IS PRESS TO C
                             OME ON THIS LINE. PUT ON THIS LINE INSTRUCTIONS TO GO BACK AT ITS FORMER ADDRESS
                    3220                                     ;END
                    3221     
                    3222     ; TESTED: QC PASSED SYNTAXICALLY
                    3223     
                    3224     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    3225     ; 2S DELAY FOR END OSR  (CALL THE PROGRAM ABOVE 2 TIMES). OPTIMIZATION DONE.
13E3 753D64         3226     DELAY_2S:               MOV             3DH, #64H                               ; MOVE #64H
                              (100DEC) INTO MEM LOC. 3DH FOR DELAY (100 x 20mS = 2S)
                    3227                                     ; 20mS DELAY
13E6 753B3D         3228     DLY_2S_1:               MOV             3BH, #3DH                               ; MOVE #0FF
                             H INTO MEM LOCATIONS (3BH & 3CH) THAT SERVE 
13E9 753CA2         3229     DLY_2S_2:               MOV             3CH, #0A2H                              ; AS COUNTE
                             R FOR THIS PARTICULAR DELAY SUBROUTINE
13EC D53CFD         3230                                     DJNZ    3CH, $                                  ; STAY HERE
                              TILL THE CONTENT OF THE MEMORY LOCATION (3CH) IS ZERO
13EF D53BF7         3231                                     DJNZ    3BH, DLY_2S_2                   ; STAY HERE TILL TH
                             E CONTENT OF THE MEMORY LOCATION (3BH) IS ZERO
                    3232                                     ; --- END
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    71

13F2 D53DF1         3233                                     DJNZ    3DH, DLY_2S_1                   ; STAY HERE TILL TH
                             E CONTENT OF THE MEMORY LOCATION (3BH) IS ZERO
                    3234                                     
13F5 22             3235                                     RET
                    3236     
                    3237     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    3238     ; THIS SR IS CALL WHEN THE BEGIN ADDRESS IS TO BE ENTERED
                    3239     ; IT LOADS THE START ADDRESS INTO THE MEMORY ADDRESS INCREMENT DISPLAY REGISTER (THIS SHUOL
                             D BE IN THE HEX FORM)
                    3240     
                    3241     
13F6                3242     SUB_MEM:                
13F6 D200           3243                                     SETB            00H                             ; INDICATES
                              THAT SUB MEM IS PRESSED THUS ENABLES THE PASS TO THE MAIN2 SEGMENT ON RETURN TO THE CALLER PROGRAM
13F8 C2AF           3244                                     CLR                     IE.7                    ; DISABLE T
                             HE EXTERNAL INTERRUPT(!INT0) USING THE GLOBAL IE BIT
                    3245                                     CLR_LCD                                         ; CLEAR THE
                              LCD SCREEN
                    3248     
13FF 7480           3249                                     MOV                     A, #80H                 ; WRITE ON 
                             THE FIRST LINE OF THE LCD
1401 11E6           3250                                     CALL            LCD_CMD                 
1403 D208           3251                                     SETB            08H                             ; SET THE N
                             EXT SUB MEM FLAG (SELECTS THE PART OF THE NEXT SR MEANT FOR SUB MEM) 
                    3252                                                                                             ; T
                             HE FLAG IS CLEARED IN THE NEXT SR (CHECK IF BIT 00H AND 08H FUNCTIONS CAN BE COMBINED IN ONE FLAGs)
1405 3199           3253                                     CALL            FLY_SUB_MEM             ; TAKE CARE OF SUB 
                             MEM ADDRESS DISPLAY AND PROPER MEM START INITIALIZATION
                    3254     
                    3255     ;                               MOV                     A, #84H                 ; LOAD A CO
                             MMAND TO DISPLAY ':' ON LINE 1, POSITION 5
                    3256     ;                               CALL            LCD_CMD
                    3257     ;                               MOV                     A, #':'
                    3258     ;                               CALL            LCD_SHO
                    3259     
1407 D2AF           3260                                     SETB            IE.7                    ; NOW ENABLE THE EX
                             TERNAL INTERRUPT
                    3261     
1409 22             3262                                     RET
                    3263     
                    3264     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    3265     ; GO_TO (GO TO)
                    3266     ; THIS A SR THE SELECTS OR GIVE THE USER THE OPPORTUNITY TO EXAMINE A PARTICULAR PART OF A 
                             PROGRAM
                    3267     ; USE UNDER THE V_HEX(VIEW HEX) MODE ONLY
                    3268     
140A                3269     GO_TO: 
140A C2AF           3270                                             CLR                     IE.7                       
                                                  ; DISABLE THE EXTERNAL INTERRUPT(!INT0) USING THE GLOBAL IE BIT
140C C205           3271                                             CLR                     05H                        
                                                          ; REFRESH THE BYTE MARRIAGE FLAG. IT HELPS THE CANCEL SR
                    3272     
                    3273                                             CLR_LCD                                            
                                                  ; CLEAR THE LCD SCREEN
                    3276                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
1419 474F2054       3279                                             DB                      'GO TO: ',0
141D 4F3A2000                
                    3280     
1421 753204         3281                                             MOV                     32H, #04H                  
                                                  ; ENSURES THAT ONLY FOUR NIBBLES (ie 2 BYTE DATA) ARE ENTERED
1424 D204           3282                                             SETB            04H                                
                                                  ; SET THE BYTE INDICATOR FOR A 2 BYTE(4 NIBBLE) ADDRESS CONVERSION
1426 D206           3283                                             SETB            06H                                
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    72

                                                  ; SET FLAG TO CAUSE THE ASCII_2_HEX SR TO CARRY OUT HIGH ORDER BYTE MARRIAGE FIRST
                    3284     
1428 1178           3285     GT_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE THAT A KEY IS PRESSED
142A 3001FB         3286                                             JNB                     01H, GT_1
142D C201           3287                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    3288     
142F B44E02         3289                                             CJNE            A, #'N', GT_2                      
                                  ; ELOO NOTE THAT THE FOLLOWING 3 INSTRUCTION IS SOLELY FOR GOTO'S CANCEL
                    3290     ; IF 'N' IS PRESSED (ie CANCEL) RETURN TO THE CALL PROGRAM
1432 806B           3291                                             SJMP            EXIT_GOTO                          
                                          ; ESCAPE THE OSR(GOTO)
                    3292     
1434 31E5           3293     GT_2:                           CALL            ASCII_2_HEX                                
                                  ; DO THE CONVERSION AND COMPARE
1436 3002EF         3294                                             JNB                     02H, GT_1                  
                                                  ; ENSURES THAT THE KEY PRESSED IS BETWEEN 0 - F IN HEX
1439 C202           3295                                             CLR                     02H                        
                                                          ; GET READY FOR NEXT KEY
                    3296     
143B E531           3297                                             MOV             A,31H                              
                                          ; DISPLAY THE NUMBER
143D 3111           3298                                             CALL            LCD_SHO
143F D532E6         3299                                             DJNZ            32H, GT_1                          
                                          ; CHECK IF FOUR NIBBLES (TWO BYTES) DATA HAVE BEEN ENTERED
                    3300     
1442 1178           3301     GT_3:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
1444 3001FB         3302                                             JNB                     01H, GT_3
1447 C201           3303                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    3304                                             
                    3305     ; WAIT FOR NEXT OR CANCEL
1449 B44E02         3306                                             CJNE            A, #'N', GT_4                      
                                  ; ENSURES NEXT IS PRESSED TO CONTINUE OR 'N' TO ESCAPE THE OSR
144C 8051           3307                                             SJMP            EXIT_GOTO                          
                                          ; ESCAPE THE OSR(GOTO)
                    3308     
144E B42AF1         3309     GT_4:                           CJNE            A, #'*', GT_3                       ; ACCEP
                             T USER'S INPUT ADDRESS FOR TEST
                    3310     
                    3311     ; COMPARE ADDRESS WITH THE START ADDRESS MEM LOCS.
1451 E53F           3312                                             MOV                     A, 3FH                     
                                                  ; LOAD THE START ADDRESS HOB FOR COMPARISON     WITH GOTO'S HOB ADDRESS
1453 B53502         3313                                             CJNE            A, 35H, GT_5
1456 8004           3314                                             SJMP            GT_6                               
                                          ; IF EQUAL JUMP TO TEST THE LOB(THIS IS DONE ONLY FOR EQUALITY ENCOUTERED)
1458 5025           3315     GT_5:                           JNC                     OUT_OF_RANGE                       
                                  ; EXIT IF START ADDRESS HOB IS GREATER THAN THE GOTO'S HOB ADDRESS
145A 8008           3316                                             SJMP            GT_8                               
                                          ; SKIP LOB ADDRESS TEST, CONTINUE WITH THE END ADDRESS TEST
                    3317     
145C E53E           3318     GT_6:                           MOV                     A, 3EH                             
                                          ; LOAD THE START ADDRESS LOB FOR COMPARISON     WITH GOTO'S LOB ADDRESS
145E B53401         3319                                             CJNE            A, 34H, GT_7
1461 D3             3320                                             SETB            C
1462 501B           3321     GT_7:                           JNC                     OUT_OF_RANGE                       
                                  ; EXIT IF START ADDRESS LOB IS GREATER THAN THE GOTO'S LOB ADDRESS 
                    3322                                                                                                
                                                          ; ELSE CONTINUE
                    3323     ; COMPARE ADDRESS WITH THE END ADDRESS MEM LOCS.
1464 E541           3324     GT_8:                           MOV                     A, 41H                             
                                          ; LOAD THE END ADDRESS HOB FOR COMPARISON WITH GOTO'S HOB ADDRESS
1466 B53502         3325                                             CJNE            A, 35H, GT_9
1469 8004           3326                                             SJMP            GT_10                              
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    73

                                          ; IF EQUAL JUMP TO TEST THE LOB(THIS IS DONE ONLY FOR EQUALITY ENCOUTERED)
146B 4012           3327     GT_9:                           JC                      OUT_OF_RANGE                       
                                  ; EXIT IF END ADDRESS HOB IS GREATER THAN THE GOTO'S HOB ADDRESS
146D 8008           3328                                             SJMP            GT_12                              
                                          ; SKIP LOB ADDRESS TEST, AND CARRY OUT A JUMP TO THE USER'S DESIRED ADDRESS
                    3329     
146F E540           3330     GT_10:                          MOV                     A, 40H                             
                                          ; LOAD THE END ADDRESS LOB FOR COMPARISON WITH GOTO'S LOB ADDRESS
1471 B53401         3331                                             CJNE            A, 34H, GT_11
1474 C3             3332                                             CLR                     C
1475 4008           3333     GT_11:                          JC                      OUT_OF_RANGE                       
                                  ; EXIT IF END ADDRESS LOB IS GREATER THAN THE GOTO'S LOB ADDRESS ELSE CONTINUE
                    3334     ; ALL TESTS HAVE BEEN COMPLETED
                    3335                                                                                                
                                                          ; ACCEPT USER'S INPUT ADDRESS AND EXIT
1477 85353D         3336     GT_12:                          MOV                     3DH, 35H                           
                                          ; LOAD THE USER'S DESIRED ADDRESS(HOB) INTO THE V_HEX CURRENT ADDRESS MEM LOC.2(HOB)
147A 85343C         3337                                             MOV                     3CH, 34H                   
                                                  ; LOAD THE USER'S DESIRED ADDRESS(LOB) INTO THE V_HEX CURRENT ADDRESS MEM LOC.1(LOB)
147D 8020           3338                                             SJMP            EXIT_GOTO
147F                3339     OUT_OF_RANGE:                   
                    3340                                             CLR_LCD                                            
                                                  ; CLEAR THE LCD SCREEN
                    3343                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
148A 20204F75       3346                                             DB                      '  Out Of Range  ',0
148E 74204F66                
1492 2052616E                
1496 67652020                
149A 00                      
149B 71E3           3347                                             CALL            DELAY_2S                           
                                          ; DELAY FOR THE USER TO SEE THE MESSAGE
149D 810A           3348                                             AJMP            GO_TO                              
                                          ; START AFRESH
149F                3349     EXIT_GOTO:
149F D2AF           3350                                             SETB            IE.7                               
                                          ; NOW ENABLE THE EXTERNAL INTERRUPT
14A1 22             3351                                             RET
                    3352                     ; IF THE ADDRESS PUT BY THE USER PASS THE TEST OF COMPARISON LOAD THE APPRO
                             PRIATE MEM LOCS WITH THE ADDRESS AND EXIT THE OSR
                    3353                     ; ELSE DISPLAY THE FOLOWING MESSAGE: 'OUT OF RANGE' FOR TWO SECONDS (USE 1S
                             EC X 2) THEN JUMP BACK TO BLANK THE LCD SCREEN
                    3354     
                    3355     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    3356     ; CANCEL (<===)
                    3357     ; THIS IS THE SR THAT IS CALLED BY THE USER WHEN HE/SHE MAKES A MISTAKE
                    3358     ; THE SR CANCELS ALL THE CHARACTERS IN THE CURRENT LINE (EITHER LINE 1 OR 2) OF THE LCD
                    3359     
14A2                3360     CANCEL:                         ; RESTORE IN THE ADDRESS DISPLAY CONTROL MEM LOC. THE CURRE
                             NT ADDRESS ALREADY SAVED IN THE PAGE MEMORY 
14A2 C205           3361                                             CLR                     05H                        
                                                          ; REFRESH THE BYTE MARRIAGE FLAG. IT HELPS THE CANCEL SR
14A4 C210           3362                                             CLR                     10H
14A6 C20F           3363                                             CLR                     0FH
14A8 C221           3364                                             CLR                     21H
14AA 85433A         3365                                             MOV                     3AH, 43H                   
                                                  ; (HOB)
14AD 854239         3366                                             MOV                     39H, 42H                   
                                                  ; (LOB)
                    3367                                     
14B0 120F9E         3368                                             CALL            ADDRESS_DISPLAY_CONTROL
                    3369                                             ; see if any other memory location for those it has
                              affected 
                    3370     
                    3371                                             ; THE STACK POINTER IS ALWAYS RESET WHEN THE SUBROU
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    74

                             TINE RETURNS
                    3372                                             ; THE SUBROUTINE TAKE CARE OF WHEHTER THE USER IS U
                             SING THE MHEX OR THE ASM TO PROGRAM
                    3373                                             ; ELOO REMEMBER TO CONSIDER ALL THE POSSIBLE CANCEL
                              POSITION FOR THE USER eg IN THE LOOP OF  WRITING INSTRUCTION ALPHABET AS IN "AD " OR
                    3374                                             ; "ADD A," USER PRESSES CANCEL
14B3                3375     EXIT_CANCEL:
14B3 22             3376                                             RET
                    3377     
                    3378     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
14B4                3379     INTRO_MSG:                      
                    3380     ;                                       MOV                     A, #80H                    
                                                  ; THIS INSTRUCTION MY NOT BE RELEVANT SINCE THIS MESSAGE IS CALLED IMMEDIATELY AFTER 
                    3381                                             D_STR                                              
                                                  ; A LCD SCREEN CLEAR THUS DDRAM ADDRESS AUTOMATICALLY RESETS TO LINE 1
14BA 53424338       3384                                             DB                      'SBC8085uP&8085uC',0       
                                  ; LINE 1
14BE 30383575                
14C2 50263830                
14C6 38357543                
14CA 00                      
14CB 74C0           3385                                             MOV                     A, #0C0H                   
                                                  ; SET DDRAM ADDRESS TO LINE 2
14CD 11E6           3386                                             CALL            LCD_CMD                           
                    3387                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
14D5 62792049       3390                                             DB                      'by IFEDIORA E.C.',0       
                                  ; LINE 2
14D9 46454449                
14DD 4F524120                
14E1 452E432E                
14E5 00                      
14E6 22             3391                                             RET
                    3392     
                    3393     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
14E7                3394     INTRO_CPLT:
                    3395     ;
                    3396     ;
                    3397     ;                                       MOV                     A, #80H                    
                                                  ; THIS INSTRUCTION MY NOT BE RELEVANT SINCE THIS MESSAGE IS CALLED IMMEDIATELY AFTER 
                    3398                                             D_STR                                              
                                                  ; A LCD SCREEN CLEAR THUS DDRAM ADDRESS AUTOMATICALLY RESETS TO LINE 1
14ED 50726573       3401                                             DB                      'Press 0 for MHEX',0       
                                  ; LINE 1
14F1 73203020                
14F5 666F7220                
14F9 4D484558                
14FD 00                      
14FE 74C0           3402                                             MOV                     A, #0C0H                   
                                                  ; SET DDRAM ADDRESS TO LINE 2
1500 11E6           3403                                             CALL            LCD_CMD                           
                    3404                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
1508 50726573       3407                                             DB                      'Press 1 for ASM',0        
                                      ; LINE 2
150C 73203120                
1510 666F7220                
1514 41534D00                
1518 22             3408                                             RET
                    3409     
                    3410     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1519                3411     INTRO_SUBMEM_REQUEST:
                    3412     ;                               
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    75

                    3413                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS 
151F 456E7465       3416                                             DB                      'Enter Start Addr',0       
                                  ; LINE 1
1523 72205374                
1527 61727420                
152B 41646472                
152F 00                      
1530 22             3417                                             RET
                    3418     
                    3419     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1531                3420     INTRO_CPU_TYPE:
                    3421     ;
                    3422     ;
                    3423                                             D_STR                                              
                                                  ; A LCD SCREEN CLEAR THUS DDRAM ADDRESS AUTOMATICALLY RESETS TO LINE 1
1537 50726573       3426                                             DB                      'Press 3 for 8085',0       
                                  ; LINE 1
153B 73203320                
153F 666F7220                
1543 38303835                
1547 00                      
1548 74C0           3427                                             MOV                     A, #0C0H                   
                                                  ; SET DDRAM ADDRESS TO LINE 2
154A 11E6           3428                                             CALL            LCD_CMD                           
                    3429                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
1552 50726573       3432                                             DB                      'Press 4 for 8051',0       
                                  ; LINE 2
1556 73203420                
155A 666F7220                
155E 38303531                
1562 00                      
1563 22             3433                                             RET
                    3434     ; -----------------------------------------------------------------------------------------
                             -----------------------------------------
                    3435     ; **********************************************
0030                3436                                     ORG             30H
                    3437     
0030 30313233       3438     LT_ROW_1:                       DB                      '0','1','2','3','4','5','6','7'    
                                  ; DATA STORED IN ASCII CODE
0034 34353637                
0038 45525455       3439     LT_ROW_2:                       DB                      'E','R','T','U','I','O','P','8'
003C 494F5038                
0040 41534446       3440     LT_ROW_3:                       DB                      'A','S','D','F','H','J','L','9'
0044 484A4C39                
0048 5A584356       3441     LT_ROW_4:                       DB                      'Z','X','C','V','B','N','M','*'    
                                  ; '*' IS RESERVED FOR THE FUNCTION 'NEXT'
004C 424E4D2A                
                    3442                                             
                    3443     
                    3444                                             END
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    76

SYMBOL TABLE LISTING
------ ----- -------


N A M E                   T Y P E  V A L U E   ATTRIBUTES

A2 . . . . . . . . . . .  C ADDR   01CBH   A   
A2H_1. . . . . . . . . .  C ADDR   11E9H   A   
A2H_2. . . . . . . . . .  C ADDR   11F1H   A   
A2H_3. . . . . . . . . .  C ADDR   11F9H   A   
A2H_4. . . . . . . . . .  C ADDR   11FBH   A   
A2H_5. . . . . . . . . .  C ADDR   1206H   A   
A2H_6. . . . . . . . . .  C ADDR   1213H   A   
A2H_7. . . . . . . . . .  C ADDR   121BH   A   
A2H_8. . . . . . . . . .  C ADDR   1226H   A   
A2_1 . . . . . . . . . .  C ADDR   01CEH   A   
A2_2 . . . . . . . . . .  C ADDR   01E6H   A   
A2_2L1 . . . . . . . . .  C ADDR   01ECH   A   
A2_2L2 . . . . . . . . .  C ADDR   01F9H   A   
A2_2L3 . . . . . . . . .  C ADDR   01FEH   A   
A2_3 . . . . . . . . . .  C ADDR   0209H   A   
A2_3L1 . . . . . . . . .  C ADDR   020FH   A   
A2_3L2 . . . . . . . . .  C ADDR   021CH   A   
ADC_ . . . . . . . . . .  C ADDR   073DH   A   
ADC_L1 . . . . . . . . .  C ADDR   0745H   A   
ADC_L2 . . . . . . . . .  C ADDR   0755H   A   
ADC_L3 . . . . . . . . .  C ADDR   075DH   A   
ADC_L4 . . . . . . . . .  C ADDR   0765H   A   
ADC_L5 . . . . . . . . .  C ADDR   076DH   A   
ADC_L6 . . . . . . . . .  C ADDR   0775H   A   
ADC_L7 . . . . . . . . .  C ADDR   077DH   A   
ADC_L8 . . . . . . . . .  C ADDR   0785H   A   
ADC_L9 . . . . . . . . .  C ADDR   078BH   A   
ADDRESS_DISPLAY_CONTROL.  C ADDR   0F9EH   A   
ADD_ . . . . . . . . . .  C ADDR   0791H   A   
ADD_L1 . . . . . . . . .  C ADDR   0799H   A   
ADD_L2 . . . . . . . . .  C ADDR   07A9H   A   
ADD_L3 . . . . . . . . .  C ADDR   07B1H   A   
ADD_L4 . . . . . . . . .  C ADDR   07B9H   A   
ADD_L5 . . . . . . . . .  C ADDR   07C1H   A   
ADD_L6 . . . . . . . . .  C ADDR   07C9H   A   
ADD_L7 . . . . . . . . .  C ADDR   07D1H   A   
ADD_L8 . . . . . . . . .  C ADDR   07D9H   A   
ADD_L9 . . . . . . . . .  C ADDR   07DFH   A   
ANA_ . . . . . . . . . .  C ADDR   07E5H   A   
ANA_L1 . . . . . . . . .  C ADDR   07EDH   A   
ANA_L2 . . . . . . . . .  C ADDR   07FDH   A   
ANA_L3 . . . . . . . . .  C ADDR   0805H   A   
ANA_L4 . . . . . . . . .  C ADDR   080DH   A   
ANA_L5 . . . . . . . . .  C ADDR   0815H   A   
ANA_L6 . . . . . . . . .  C ADDR   081DH   A   
ANA_L7 . . . . . . . . .  C ADDR   0825H   A   
ANA_L8 . . . . . . . . .  C ADDR   082DH   A   
ANA_L9 . . . . . . . . .  C ADDR   0833H   A   
ASCII_2_HEX. . . . . . .  C ADDR   11E5H   A   
ASM. . . . . . . . . . .  C ADDR   014DH   A   
ASM1_1 . . . . . . . . .  C ADDR   015AH   A   
ASM1_10. . . . . . . . .  C ADDR   01B2H   A   
ASM1_11. . . . . . . . .  C ADDR   01B7H   A   
ASM1_12. . . . . . . . .  C ADDR   01BCH   A   
ASM1_13. . . . . . . . .  C ADDR   01C1H   A   
ASM1_14. . . . . . . . .  C ADDR   01C6H   A   
ASM1_2 . . . . . . . . .  C ADDR   015FH   A   
ASM1_3 . . . . . . . . .  C ADDR   0164H   A   
ASM1_4 . . . . . . . . .  C ADDR   0174H   A   
ASM1_5 . . . . . . . . .  C ADDR   0189H   A   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    77

ASM1_6 . . . . . . . . .  C ADDR   018EH   A   
ASM1_7 . . . . . . . . .  C ADDR   0193H   A   
ASM1_8 . . . . . . . . .  C ADDR   0198H   A   
ASM1_9 . . . . . . . . .  C ADDR   019DH   A   
BACK . . . . . . . . . .  C ADDR   10DEH   A   
C2 . . . . . . . . . . .  C ADDR   022CH   A   
C2_1 . . . . . . . . . .  C ADDR   022FH   A   
C2_2 . . . . . . . . . .  C ADDR   024CH   A   
C2_3 . . . . . . . . . .  C ADDR   0257H   A   
C2_3L1 . . . . . . . . .  C ADDR   025DH   A   
C2_3L2 . . . . . . . . .  C ADDR   0270H   A   
C2_3L3 . . . . . . . . .  C ADDR   027BH   A   
C2_3L4 . . . . . . . . .  C ADDR   0286H   A   
C2_4 . . . . . . . . . .  C ADDR   028CH   A   
C2_4L1 . . . . . . . . .  C ADDR   0292H   A   
C2_4L2 . . . . . . . . .  C ADDR   02A5H   A   
C2_5 . . . . . . . . . .  C ADDR   02B0H   A   
C2_5L1 . . . . . . . . .  C ADDR   02B6H   A   
C2_5L2 . . . . . . . . .  C ADDR   02C9H   A   
C2_5L3 . . . . . . . . .  C ADDR   02D4H   A   
C2_5L4 . . . . . . . . .  C ADDR   02DFH   A   
C2_6 . . . . . . . . . .  C ADDR   02EAH   A   
C2_7 . . . . . . . . . .  C ADDR   02F5H   A   
CANCEL . . . . . . . . .  C ADDR   14A2H   A   
CMP_ . . . . . . . . . .  C ADDR   0839H   A   
CMP_L1 . . . . . . . . .  C ADDR   0841H   A   
CMP_L2 . . . . . . . . .  C ADDR   0851H   A   
CMP_L3 . . . . . . . . .  C ADDR   0859H   A   
CMP_L4 . . . . . . . . .  C ADDR   0861H   A   
CMP_L5 . . . . . . . . .  C ADDR   0869H   A   
CMP_L6 . . . . . . . . .  C ADDR   0871H   A   
CMP_L7 . . . . . . . . .  C ADDR   0879H   A   
CMP_L8 . . . . . . . . .  C ADDR   0881H   A   
CMP_L9 . . . . . . . . .  C ADDR   0887H   A   
D2 . . . . . . . . . . .  C ADDR   02F7H   A   
D2_1 . . . . . . . . . .  C ADDR   02FAH   A   
D2_1L1 . . . . . . . . .  C ADDR   0308H   A   
D2_1L2 . . . . . . . . .  C ADDR   031BH   A   
D2_2 . . . . . . . . . .  C ADDR   0321H   A   
D2_2L1 . . . . . . . . .  C ADDR   0327H   A   
D2_2L2 . . . . . . . . .  C ADDR   0335H   A   
D2_3 . . . . . . . . . .  C ADDR   033BH   A   
DAD_ . . . . . . . . . .  C ADDR   088DH   A   
DAD_L1 . . . . . . . . .  C ADDR   0895H   A   
DAD_L2 . . . . . . . . .  C ADDR   08A5H   A   
DAD_L3 . . . . . . . . .  C ADDR   08ADH   A   
DAD_L4 . . . . . . . . .  C ADDR   08B5H   A   
DAD_L5 . . . . . . . . .  C ADDR   08C0H   A   
DCR_ . . . . . . . . . .  C ADDR   08C6H   A   
DCR_L1 . . . . . . . . .  C ADDR   08CEH   A   
DCR_L2 . . . . . . . . .  C ADDR   08DEH   A   
DCR_L3 . . . . . . . . .  C ADDR   08E6H   A   
DCR_L4 . . . . . . . . .  C ADDR   08EEH   A   
DCR_L5 . . . . . . . . .  C ADDR   08F6H   A   
DCR_L6 . . . . . . . . .  C ADDR   08FEH   A   
DCR_L7 . . . . . . . . .  C ADDR   0906H   A   
DCR_L8 . . . . . . . . .  C ADDR   090EH   A   
DCR_L9 . . . . . . . . .  C ADDR   0914H   A   
DCX_ . . . . . . . . . .  C ADDR   091AH   A   
DCX_L1 . . . . . . . . .  C ADDR   0922H   A   
DCX_L2 . . . . . . . . .  C ADDR   0932H   A   
DCX_L3 . . . . . . . . .  C ADDR   093AH   A   
DCX_L4 . . . . . . . . .  C ADDR   0942H   A   
DCX_L5 . . . . . . . . .  C ADDR   094DH   A   
DELAY_20MS . . . . . . .  C ADDR   10F3H   A   
DELAY_2S . . . . . . . .  C ADDR   13E3H   A   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    78

DISP_CHAR. . . . . . . .  C ADDR   1063H   A   
DLY_2S_1 . . . . . . . .  C ADDR   13E6H   A   
DLY_2S_2 . . . . . . . .  C ADDR   13E9H   A   
DPH. . . . . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . . . . .  D ADDR   0082H   A   
END_LOADER . . . . . . .  C ADDR   1354H   A   
ER_1 . . . . . . . . . .  C ADDR   1261H   A   
ER_2 . . . . . . . . . .  C ADDR   1270H   A   
ER_3 . . . . . . . . . .  C ADDR   1278H   A   
ER_4 . . . . . . . . . .  C ADDR   1280H   A   
ER_5 . . . . . . . . . .  C ADDR   1288H   A   
ER_6 . . . . . . . . . .  C ADDR   1290H   A   
ER_7 . . . . . . . . . .  C ADDR   1298H   A   
ER_8 . . . . . . . . . .  C ADDR   129EH   A   
EXAM_REG . . . . . . . .  C ADDR   122DH   A   
EXE. . . . . . . . . . .  C ADDR   12BBH   A   
EXIT_A2H . . . . . . . .  C ADDR   122CH   A   
EXIT_CANCEL. . . . . . .  C ADDR   14B3H   A   
EXIT_GOTO. . . . . . . .  C ADDR   149FH   A   
EXIT_NEXT. . . . . . . .  C ADDR   1058H   A   
EXIT_SECOND_FUNCTION . .  C ADDR   0F9AH   A   
E_N_D. . . . . . . . . .  C ADDR   12BFH   A   
FA_1 . . . . . . . . . .  C ADDR   11A0H   A   
FA_2 . . . . . . . . . .  C ADDR   11C4H   A   
FA_CONTINUE. . . . . . .  C ADDR   11B6H   A   
FA_EXIT. . . . . . . . .  C ADDR   11E1H   A   
FA_EXIT_1. . . . . . . .  C ADDR   11D5H   A   
FD_1 . . . . . . . . . .  C ADDR   115AH   A   
FD_2 . . . . . . . . . .  C ADDR   116FH   A   
FLY_ADDRESS. . . . . . .  C ADDR   1184H   A   
FLY_ADDRESS_SKIP . . . .  C ADDR   1186H   A   
FLY_DATA . . . . . . . .  C ADDR   113CH   A   
FLY_DATA_SKIP. . . . . .  C ADDR   113EH   A   
FLY_OPCODE . . . . . . .  C ADDR   111EH   A   
FLY_OPCODE_EXIT. . . . .  C ADDR   113BH   A   
FLY_OPCODE_SKIP. . . . .  C ADDR   1120H   A   
FLY_SUB_MEM. . . . . . .  C ADDR   1199H   A   
GET_READY. . . . . . . .  C ADDR   10D8H   A   
GO_TO. . . . . . . . . .  C ADDR   140AH   A   
GT_1 . . . . . . . . . .  C ADDR   1428H   A   
GT_10. . . . . . . . . .  C ADDR   146FH   A   
GT_11. . . . . . . . . .  C ADDR   1475H   A   
GT_12. . . . . . . . . .  C ADDR   1477H   A   
GT_2 . . . . . . . . . .  C ADDR   1434H   A   
GT_3 . . . . . . . . . .  C ADDR   1442H   A   
GT_4 . . . . . . . . . .  C ADDR   144EH   A   
GT_5 . . . . . . . . . .  C ADDR   1458H   A   
GT_6 . . . . . . . . . .  C ADDR   145CH   A   
GT_7 . . . . . . . . . .  C ADDR   1462H   A   
GT_8 . . . . . . . . . .  C ADDR   1464H   A   
GT_9 . . . . . . . . . .  C ADDR   146BH   A   
H2A_1. . . . . . . . . .  C ADDR   0FDAH   A   
H2A_2. . . . . . . . . .  C ADDR   0FDEH   A   
H2A_3. . . . . . . . . .  C ADDR   0FEAH   A   
H2A_4. . . . . . . . . .  C ADDR   0FEEH   A   
HERE1. . . . . . . . . .  C ADDR   10F7H   A   
HERE2. . . . . . . . . .  C ADDR   10F5H   A   
HEX_2_ASCII. . . . . . .  C ADDR   0FD1H   A   
I2 . . . . . . . . . . .  C ADDR   0346H   A   
I2_1 . . . . . . . . . .  C ADDR   034EH   A   
I2_2 . . . . . . . . . .  C ADDR   0361H   A   
I2_3 . . . . . . . . . .  C ADDR   0367H   A   
IE . . . . . . . . . . .  D ADDR   00A8H   A   
IE0. . . . . . . . . . .  B ADDR   0088H.1 A   
INR_ . . . . . . . . . .  C ADDR   0953H   A   
INR_L1 . . . . . . . . .  C ADDR   095BH   A   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    79

INR_L2 . . . . . . . . .  C ADDR   096BH   A   
INR_L3 . . . . . . . . .  C ADDR   0973H   A   
INR_L4 . . . . . . . . .  C ADDR   097BH   A   
INR_L5 . . . . . . . . .  C ADDR   0983H   A   
INR_L6 . . . . . . . . .  C ADDR   098BH   A   
INR_L7 . . . . . . . . .  C ADDR   0993H   A   
INR_L8 . . . . . . . . .  C ADDR   099BH   A   
INR_L9 . . . . . . . . .  C ADDR   09A1H   A   
INTRO_CPLT . . . . . . .  C ADDR   14E7H   A   
INTRO_CPU_TYPE . . . . .  C ADDR   1531H   A   
INTRO_MSG. . . . . . . .  C ADDR   14B4H   A   
INTRO_SUBMEM_REQUEST . .  C ADDR   1519H   A   
INX_ . . . . . . . . . .  C ADDR   09A7H   A   
INX_L1 . . . . . . . . .  C ADDR   09AFH   A   
INX_L2 . . . . . . . . .  C ADDR   09BFH   A   
INX_L3 . . . . . . . . .  C ADDR   09C7H   A   
INX_L4 . . . . . . . . .  C ADDR   09CFH   A   
INX_L5 . . . . . . . . .  C ADDR   09DAH   A   
IT0. . . . . . . . . . .  B ADDR   0088H.0 A   
J2 . . . . . . . . . . .  C ADDR   036DH   A   
J2_1 . . . . . . . . . .  C ADDR   0370H   A   
J2_2 . . . . . . . . . .  C ADDR   0383H   A   
J2_2L1 . . . . . . . . .  C ADDR   0389H   A   
J2_2L2 . . . . . . . . .  C ADDR   039CH   A   
J2_3 . . . . . . . . . .  C ADDR   03A7H   A   
J2_3L1 . . . . . . . . .  C ADDR   03ADH   A   
J2_3L2 . . . . . . . . .  C ADDR   03C0H   A   
J2_4 . . . . . . . . . .  C ADDR   03CBH   A   
J2_4L1 . . . . . . . . .  C ADDR   03D1H   A   
J2_4L2 . . . . . . . . .  C ADDR   03E4H   A   
J2_4L3 . . . . . . . . .  C ADDR   03EFH   A   
J2_5 . . . . . . . . . .  C ADDR   03FAH   A   
J2_6 . . . . . . . . . .  C ADDR   0405H   A   
KEYFNL . . . . . . . . .  C ADDR   10D7H   A   
KEYPAD_ID. . . . . . . .  C ADDR   1078H   A   
K_ID_1 . . . . . . . . .  C ADDR   1081H   A   
K_ID_2 . . . . . . . . .  C ADDR   108AH   A   
K_ID_3 . . . . . . . . .  C ADDR   10BEH   A   
K_ID_4 . . . . . . . . .  C ADDR   10C4H   A   
L2 . . . . . . . . . . .  C ADDR   0407H   A   
L2_1 . . . . . . . . . .  C ADDR   040AH   A   
L2_1L1 . . . . . . . . .  C ADDR   041DH   A   
L2_1L2 . . . . . . . . .  C ADDR   0430H   A   
L2_2 . . . . . . . . . .  C ADDR   0436H   A   
L2_3 . . . . . . . . . .  C ADDR   044BH   A   
LCD_CMD. . . . . . . . .  C ADDR   10E6H   A   
LCD_SET. . . . . . . . .  C ADDR   10FCH   A   
LCD_SHO. . . . . . . . .  C ADDR   1111H   A   
LDAX_. . . . . . . . . .  C ADDR   09E0H   A   
LDAX_L1. . . . . . . . .  C ADDR   09E8H   A   
LDAX_L2. . . . . . . . .  C ADDR   09F8H   A   
LDAX_L3. . . . . . . . .  C ADDR   09FEH   A   
LOOP . . . . . . . . . .  C ADDR   106EH   A   
LT_ROW_1 . . . . . . . .  C ADDR   0030H   A   
LT_ROW_2 . . . . . . . .  C ADDR   0038H   A   
LT_ROW_3 . . . . . . . .  C ADDR   0040H   A   
LT_ROW_4 . . . . . . . .  C ADDR   0048H   A   
LXI_ . . . . . . . . . .  C ADDR   0A04H   A   
LXI_L1 . . . . . . . . .  C ADDR   0A0CH   A   
LXI_L2 . . . . . . . . .  C ADDR   0A1CH   A   
LXI_L3 . . . . . . . . .  C ADDR   0A24H   A   
LXI_L4 . . . . . . . . .  C ADDR   0A2CH   A   
LXI_L5 . . . . . . . . .  C ADDR   0A37H   A   
M2 . . . . . . . . . . .  C ADDR   0456H   A   
M2_1 . . . . . . . . . .  C ADDR   0459H   A   
M2_2 . . . . . . . . . .  C ADDR   046CH   A   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    80

MAIN . . . . . . . . . .  C ADDR   0070H   A   
MAIN1. . . . . . . . . .  C ADDR   007FH   A   
MAIN1_1. . . . . . . . .  C ADDR   008FH   A   
MAIN1_2. . . . . . . . .  C ADDR   009EH   A   
MAIN1_3. . . . . . . . .  C ADDR   00ABH   A   
MAIN1_3CORRECTED . . . .  C ADDR   00A3H   A   
MAIN1_4. . . . . . . . .  C ADDR   00BDH   A   
MAIN1_5. . . . . . . . .  C ADDR   00C2H   A   
MAIN2. . . . . . . . . .  C ADDR   0148H   A   
MH_1 . . . . . . . . . .  C ADDR   0108H   A   
MH_2 . . . . . . . . . .  C ADDR   0110H   A   
MH_3 . . . . . . . . . .  C ADDR   0118H   A   
MH_4 . . . . . . . . . .  C ADDR   011AH   A   
MH_5 . . . . . . . . . .  C ADDR   0124H   A   
MH_6 . . . . . . . . . .  C ADDR   0128H   A   
MH_7 . . . . . . . . . .  C ADDR   0130H   A   
MOV_ . . . . . . . . . .  C ADDR   0A3DH   A   
MOV_A. . . . . . . . . .  C ADDR   0A45H   A   
MOV_AA . . . . . . . . .  C ADDR   0A5AH   A   
MOV_AB . . . . . . . . .  C ADDR   0A6AH   A   
MOV_AC . . . . . . . . .  C ADDR   0A72H   A   
MOV_AD . . . . . . . . .  C ADDR   0A7AH   A   
MOV_AE . . . . . . . . .  C ADDR   0A82H   A   
MOV_AH . . . . . . . . .  C ADDR   0A8AH   A   
MOV_AL . . . . . . . . .  C ADDR   0A92H   A   
MOV_AM . . . . . . . . .  C ADDR   0A9AH   A   
MOV_A_EXIT . . . . . . .  C ADDR   0AA0H   A   
MOV_A_EXTRA. . . . . . .  C ADDR   0D0DH   A   
MOV_B. . . . . . . . . .  C ADDR   0AA6H   A   
MOV_BA . . . . . . . . .  C ADDR   0AB3H   A   
MOV_BB . . . . . . . . .  C ADDR   0AC3H   A   
MOV_BC . . . . . . . . .  C ADDR   0ACBH   A   
MOV_BD . . . . . . . . .  C ADDR   0AD3H   A   
MOV_BE . . . . . . . . .  C ADDR   0ADBH   A   
MOV_BH . . . . . . . . .  C ADDR   0AE3H   A   
MOV_BL . . . . . . . . .  C ADDR   0AEBH   A   
MOV_BM . . . . . . . . .  C ADDR   0AF3H   A   
MOV_B_EXIT . . . . . . .  C ADDR   0AF9H   A   
MOV_C. . . . . . . . . .  C ADDR   0AFFH   A   
MOV_CA . . . . . . . . .  C ADDR   0B0CH   A   
MOV_CB . . . . . . . . .  C ADDR   0B1CH   A   
MOV_CC . . . . . . . . .  C ADDR   0B24H   A   
MOV_CD . . . . . . . . .  C ADDR   0B2CH   A   
MOV_CE . . . . . . . . .  C ADDR   0B34H   A   
MOV_CH . . . . . . . . .  C ADDR   0B3CH   A   
MOV_CL . . . . . . . . .  C ADDR   0B44H   A   
MOV_CM . . . . . . . . .  C ADDR   0B4CH   A   
MOV_C_EXIT . . . . . . .  C ADDR   0B52H   A   
MOV_D. . . . . . . . . .  C ADDR   0B58H   A   
MOV_DA . . . . . . . . .  C ADDR   0B65H   A   
MOV_DB . . . . . . . . .  C ADDR   0B75H   A   
MOV_DC . . . . . . . . .  C ADDR   0B7DH   A   
MOV_DD . . . . . . . . .  C ADDR   0B85H   A   
MOV_DE . . . . . . . . .  C ADDR   0B8DH   A   
MOV_DH . . . . . . . . .  C ADDR   0B95H   A   
MOV_DL . . . . . . . . .  C ADDR   0B9DH   A   
MOV_DM . . . . . . . . .  C ADDR   0BA5H   A   
MOV_D_EXIT . . . . . . .  C ADDR   0BABH   A   
MOV_E. . . . . . . . . .  C ADDR   0BB1H   A   
MOV_EA . . . . . . . . .  C ADDR   0BBEH   A   
MOV_EB . . . . . . . . .  C ADDR   0BCEH   A   
MOV_EC . . . . . . . . .  C ADDR   0BD6H   A   
MOV_ED . . . . . . . . .  C ADDR   0BDEH   A   
MOV_EE . . . . . . . . .  C ADDR   0BE6H   A   
MOV_EH . . . . . . . . .  C ADDR   0BEEH   A   
MOV_EL . . . . . . . . .  C ADDR   0BF6H   A   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    81

MOV_EM . . . . . . . . .  C ADDR   0BFEH   A   
MOV_E_EXIT . . . . . . .  C ADDR   0C04H   A   
MOV_H. . . . . . . . . .  C ADDR   0C0AH   A   
MOV_HA . . . . . . . . .  C ADDR   0C17H   A   
MOV_HB . . . . . . . . .  C ADDR   0C27H   A   
MOV_HC . . . . . . . . .  C ADDR   0C2FH   A   
MOV_HD . . . . . . . . .  C ADDR   0C37H   A   
MOV_HE . . . . . . . . .  C ADDR   0C3FH   A   
MOV_HH . . . . . . . . .  C ADDR   0C47H   A   
MOV_HL . . . . . . . . .  C ADDR   0C4FH   A   
MOV_HM . . . . . . . . .  C ADDR   0C57H   A   
MOV_H_EXIT . . . . . . .  C ADDR   0C5DH   A   
MOV_L. . . . . . . . . .  C ADDR   0C63H   A   
MOV_LA . . . . . . . . .  C ADDR   0C70H   A   
MOV_LB . . . . . . . . .  C ADDR   0C80H   A   
MOV_LC . . . . . . . . .  C ADDR   0C88H   A   
MOV_LD . . . . . . . . .  C ADDR   0C90H   A   
MOV_LE . . . . . . . . .  C ADDR   0C98H   A   
MOV_LH . . . . . . . . .  C ADDR   0CA0H   A   
MOV_LL . . . . . . . . .  C ADDR   0CA8H   A   
MOV_LM . . . . . . . . .  C ADDR   0CB0H   A   
MOV_L_EXIT . . . . . . .  C ADDR   0CB6H   A   
MOV_M. . . . . . . . . .  C ADDR   0CBCH   A   
MOV_MA . . . . . . . . .  C ADDR   0CC9H   A   
MOV_MB . . . . . . . . .  C ADDR   0CD9H   A   
MOV_MC . . . . . . . . .  C ADDR   0CE1H   A   
MOV_MD . . . . . . . . .  C ADDR   0CE9H   A   
MOV_ME . . . . . . . . .  C ADDR   0CF1H   A   
MOV_MH . . . . . . . . .  C ADDR   0CF9H   A   
MOV_ML . . . . . . . . .  C ADDR   0D01H   A   
MOV_M_EXIT . . . . . . .  C ADDR   0D07H   A   
MVI_ . . . . . . . . . .  C ADDR   0D0FH   A   
MVI_L1 . . . . . . . . .  C ADDR   0D17H   A   
MVI_L2 . . . . . . . . .  C ADDR   0D27H   A   
MVI_L3 . . . . . . . . .  C ADDR   0D2FH   A   
MVI_L4 . . . . . . . . .  C ADDR   0D37H   A   
MVI_L5 . . . . . . . . .  C ADDR   0D3FH   A   
MVI_L6 . . . . . . . . .  C ADDR   0D47H   A   
MVI_L7 . . . . . . . . .  C ADDR   0D4FH   A   
MVI_L8 . . . . . . . . .  C ADDR   0D57H   A   
MVI_L9 . . . . . . . . .  C ADDR   0D5DH   A   
M_HEX. . . . . . . . . .  C ADDR   00FAH   A   
NEXT . . . . . . . . . .  C ADDR   0FF3H   A   
NEXT_4_OPCODE. . . . . .  C ADDR   101EH   A   
NEXT_4_SUB_MEM . . . . .  C ADDR   0FFCH   A   
NEXT_OPERAND . . . . . .  C ADDR   1033H   A   
NEXT_OPERAND_AD_TYPE . .  C ADDR   1048H   A   
O2 . . . . . . . . . . .  C ADDR   0477H   A   
O2_1 . . . . . . . . . .  C ADDR   047AH   A   
O2_1L1 . . . . . . . . .  C ADDR   0488H   A   
O2_1L2 . . . . . . . . .  C ADDR   0496H   A   
O2_2 . . . . . . . . . .  C ADDR   04A1H   A   
ORA_ . . . . . . . . . .  C ADDR   0D63H   A   
ORA_L1 . . . . . . . . .  C ADDR   0D6BH   A   
ORA_L2 . . . . . . . . .  C ADDR   0D7BH   A   
ORA_L3 . . . . . . . . .  C ADDR   0D83H   A   
ORA_L4 . . . . . . . . .  C ADDR   0D8BH   A   
ORA_L5 . . . . . . . . .  C ADDR   0D93H   A   
ORA_L6 . . . . . . . . .  C ADDR   0D9BH   A   
ORA_L7 . . . . . . . . .  C ADDR   0DA3H   A   
ORA_L8 . . . . . . . . .  C ADDR   0DABH   A   
ORA_L9 . . . . . . . . .  C ADDR   0DB1H   A   
OUT_OF_RANGE . . . . . .  C ADDR   147FH   A   
P0 . . . . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . . . . .  D ADDR   00A0H   A   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    82

P3 . . . . . . . . . . .  D ADDR   00B0H   A   
PCON . . . . . . . . . .  D ADDR   0087H   A   
POP_ . . . . . . . . . .  C ADDR   0DB7H   A   
POP_L1 . . . . . . . . .  C ADDR   0DBFH   A   
POP_L2 . . . . . . . . .  C ADDR   0DCFH   A   
POP_L3 . . . . . . . . .  C ADDR   0DD7H   A   
POP_L4 . . . . . . . . .  C ADDR   0DDFH   A   
POP_L5 . . . . . . . . .  C ADDR   0DEFH   A   
PRINT_TEXT . . . . . . .  C ADDR   1067H   A   
PUSH_. . . . . . . . . .  C ADDR   0DF5H   A   
PUSH_L1. . . . . . . . .  C ADDR   0DFAH   A   
PUSH_L2. . . . . . . . .  C ADDR   0E0AH   A   
PUSH_L3. . . . . . . . .  C ADDR   0E12H   A   
PUSH_L4. . . . . . . . .  C ADDR   0E1AH   A   
PUSH_L5. . . . . . . . .  C ADDR   0E2AH   A   
RETURN . . . . . . . . .  C ADDR   1075H   A   
ROW_0. . . . . . . . . .  C ADDR   10ACH   A   
ROW_1. . . . . . . . . .  C ADDR   10B1H   A   
ROW_2. . . . . . . . . .  C ADDR   10B6H   A   
ROW_3. . . . . . . . . .  C ADDR   10BBH   A   
S2 . . . . . . . . . . .  C ADDR   062CH   A   
S2_1 . . . . . . . . . .  C ADDR   062FH   A   
S2_1L1 . . . . . . . . .  C ADDR   063DH   A   
S2_1L2 . . . . . . . . .  C ADDR   064BH   A   
S2_2 . . . . . . . . . .  C ADDR   0656H   A   
S2_3 . . . . . . . . . .  C ADDR   066BH   A   
S2_4 . . . . . . . . . .  C ADDR   067BH   A   
S2_5 . . . . . . . . . .  C ADDR   0690H   A   
S2_5L1 . . . . . . . . .  C ADDR   0696H   A   
S2_5L1L1 . . . . . . . .  C ADDR   06A4H   A   
S2_5L1L2 . . . . . . . .  C ADDR   06B7H   A   
S2_5L2 . . . . . . . . .  C ADDR   06BDH   A   
S2_6 . . . . . . . . . .  C ADDR   06C8H   A   
S2_6L1 . . . . . . . . .  C ADDR   06CEH   A   
S2_6L2 . . . . . . . . .  C ADDR   06DCH   A   
S2_7 . . . . . . . . . .  C ADDR   06E7H   A   
SBB_ . . . . . . . . . .  C ADDR   0E30H   A   
SBB_L1 . . . . . . . . .  C ADDR   0E38H   A   
SBB_L2 . . . . . . . . .  C ADDR   0E48H   A   
SBB_L3 . . . . . . . . .  C ADDR   0E50H   A   
SBB_L4 . . . . . . . . .  C ADDR   0E58H   A   
SBB_L5 . . . . . . . . .  C ADDR   0E60H   A   
SBB_L6 . . . . . . . . .  C ADDR   0E68H   A   
SBB_L7 . . . . . . . . .  C ADDR   0E70H   A   
SBB_L8 . . . . . . . . .  C ADDR   0E78H   A   
SBB_L9 . . . . . . . . .  C ADDR   0E7EH   A   
SECOND_FUNCTION. . . . .  C ADDR   0F50H   A   
SECOND_FUNCTIONCORRECTED  C ADDR   0F5FH   A   
SF_1 . . . . . . . . . .  C ADDR   0F6BH   A   
SF_2 . . . . . . . . . .  C ADDR   0F73H   A   
SF_3 . . . . . . . . . .  C ADDR   0F7FH   A   
SF_4 . . . . . . . . . .  C ADDR   0F84H   A   
SF_5 . . . . . . . . . .  C ADDR   0F8CH   A   
SF_6 . . . . . . . . . .  C ADDR   0F94H   A   
SP . . . . . . . . . . .  D ADDR   0081H   A   
STAX_. . . . . . . . . .  C ADDR   0ED8H   A   
STAX_L1. . . . . . . . .  C ADDR   0EE0H   A   
STAX_L2. . . . . . . . .  C ADDR   0EF0H   A   
STAX_L3. . . . . . . . .  C ADDR   0EF6H   A   
SUB_ . . . . . . . . . .  C ADDR   0E84H   A   
SUB_L1 . . . . . . . . .  C ADDR   0E8CH   A   
SUB_L2 . . . . . . . . .  C ADDR   0E9CH   A   
SUB_L3 . . . . . . . . .  C ADDR   0EA4H   A   
SUB_L4 . . . . . . . . .  C ADDR   0EACH   A   
SUB_L5 . . . . . . . . .  C ADDR   0EB4H   A   
SUB_L6 . . . . . . . . .  C ADDR   0EBCH   A   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    83

SUB_L7 . . . . . . . . .  C ADDR   0EC4H   A   
SUB_L8 . . . . . . . . .  C ADDR   0ECCH   A   
SUB_L9 . . . . . . . . .  C ADDR   0ED2H   A   
SUB_MEM. . . . . . . . .  C ADDR   13F6H   A   
VH_1 . . . . . . . . . .  C ADDR   1369H   A   
VH_10. . . . . . . . . .  C ADDR   13C7H   A   
VH_11. . . . . . . . . .  C ADDR   13CBH   A   
VH_12. . . . . . . . . .  C ADDR   13D1H   A   
VH_13. . . . . . . . . .  C ADDR   13D3H   A   
VH_14. . . . . . . . . .  C ADDR   13DCH   A   
VH_2 . . . . . . . . . .  C ADDR   138AH   A   
VH_3 . . . . . . . . . .  C ADDR   139AH   A   
VH_4 . . . . . . . . . .  C ADDR   139EH   A   
VH_5 . . . . . . . . . .  C ADDR   13A4H   A   
VH_6 . . . . . . . . . .  C ADDR   13A6H   A   
VH_7 . . . . . . . . . .  C ADDR   13ACH   A   
VH_8 . . . . . . . . . .  C ADDR   13B6H   A   
VH_9 . . . . . . . . . .  C ADDR   13BEH   A   
V_HEX. . . . . . . . . .  C ADDR   1363H   A   
X2 . . . . . . . . . . .  C ADDR   06E9H   A   
X2_1 . . . . . . . . . .  C ADDR   06ECH   A   
X2_2 . . . . . . . . . .  C ADDR   0709H   A   
X2_2L1 . . . . . . . . .  C ADDR   070FH   A   
X2_2L2 . . . . . . . . .  C ADDR   071DH   A   
X2_3 . . . . . . . . . .  C ADDR   0728H   A   
XRA_ . . . . . . . . . .  C ADDR   0EFCH   A   
XRA_L1 . . . . . . . . .  C ADDR   0F04H   A   
XRA_L2 . . . . . . . . .  C ADDR   0F14H   A   
XRA_L3 . . . . . . . . .  C ADDR   0F1CH   A   
XRA_L4 . . . . . . . . .  C ADDR   0F24H   A   
XRA_L5 . . . . . . . . .  C ADDR   0F2CH   A   
XRA_L6 . . . . . . . . .  C ADDR   0F34H   A   
XRA_L7 . . . . . . . . .  C ADDR   0F3CH   A   
XRA_L8 . . . . . . . . .  C ADDR   0F44H   A   
XRA_L9 . . . . . . . . .  C ADDR   0F4AH   A   
_P2. . . . . . . . . . .  C ADDR   04B1H   A   
_P2_1. . . . . . . . . .  C ADDR   04B4H   A   
_P2_2. . . . . . . . . .  C ADDR   04D1H   A   
_P2_3. . . . . . . . . .  C ADDR   04DCH   A   
_R2. . . . . . . . . . .  C ADDR   04ECH   A   
_R2_1. . . . . . . . . .  C ADDR   04EFH   A   
_R2_10 . . . . . . . . .  C ADDR   05C4H   A   
_R2_10L1 . . . . . . . .  C ADDR   05D4H   A   
_R2_10L2 . . . . . . . .  C ADDR   05E4H   A   
_R2_10L3 . . . . . . . .  C ADDR   05ECH   A   
_R2_10L4 . . . . . . . .  C ADDR   05F4H   A   
_R2_10L5 . . . . . . . .  C ADDR   05FCH   A   
_R2_10L6 . . . . . . . .  C ADDR   0604H   A   
_R2_10L7 . . . . . . . .  C ADDR   060CH   A   
_R2_10L8 . . . . . . . .  C ADDR   0614H   A   
_R2_10L9 . . . . . . . .  C ADDR   061AH   A   
_R2_11 . . . . . . . . .  C ADDR   061FH   A   
_R2_12 . . . . . . . . .  C ADDR   062AH   A   
_R2_1L1. . . . . . . . .  C ADDR   04FDH   A   
_R2_1L2. . . . . . . . .  C ADDR   0510H   A   
_R2_2. . . . . . . . . .  C ADDR   051BH   A   
_R2_3. . . . . . . . . .  C ADDR   0526H   A   
_R2_4. . . . . . . . . .  C ADDR   0536H   A   
_R2_5. . . . . . . . . .  C ADDR   0546H   A   
_R2_6. . . . . . . . . .  C ADDR   0556H   A   
_R2_7. . . . . . . . . .  C ADDR   0561H   A   
_R2_7L1. . . . . . . . .  C ADDR   0567H   A   
_R2_7L2. . . . . . . . .  C ADDR   057AH   A   
_R2_8. . . . . . . . . .  C ADDR   0585H   A   
_R2_8L1. . . . . . . . .  C ADDR   058BH   A   
_R2_8L2. . . . . . . . .  C ADDR   059EH   A   
A51 MACRO ASSEMBLER  FEDYSBCMHEX                                                          03/07/2017 13:04:23 PAGE    84

_R2_8L3. . . . . . . . .  C ADDR   05A9H   A   
_R2_9. . . . . . . . . .  C ADDR   05B4H   A   
___8051. . . . . . . . .  C ADDR   00E4H   A   
___8051_SPECIAL_NEXT . .  C ADDR   1036H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
