A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     1


MACRO ASSEMBLER A51 V8.00
OBJECT MODULE PLACED IN C:\sbcHex\combinedSBC.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE combinedSBC.a SET(SMALL) DEBUG OBJECT(C:\sbcHex\combinedSBC.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; THIS PROGRAM IS WRITTEN TO SATISFACTORILY GENERATE ALL THE INSTRUCTION SET (246) OF THE 8
                             085 MICROPROCESSOR
                       2     
                       3     ; ================================================ MEMORY LOCATIONS =======================
                             =============================================
                       4     ;                                       SMDC            EQU             30H                
                                                  ; SUB MEM DELAY COUNTER 4 X 500ms 
                       5     ;                                       CDM                     EQU             31H        
                                                          ; CHARACTER DISPLAY MEMORY (ACTS LIKE A TEMPORARY SAFE)
                       6     ;                                       NC                      EQU             32H        
                                                          ; NIBBLE COUNTER (THE NO. OF INTENDED NIBBLE TO BE OBTAINED IS LOADED IN IT)
                       7     ;                                       BYTE1           EQU             33H                
                                                  ; 1ST BYTE CODE'S TEMPORARY LOCATION (FOR OPCODE ONLY)
                       8     ;                                       BTYE2           EQU             34H                
                                                  ; 2ND BYTE CODE'S TEMPORARY LOCATION (FOR DATA OR LOWER ORDER BYTE OF AN ADDRESS)
                       9     ;                                       BYTE3           EQU     35H                        
                                          ; 3RD BYTE CODE'S TEMPORARY LOCATION (FOR THE HIGH ORDER BYTE OF AN ADDRESS)
                      10     ;                                       H2AIM           EQU             36H                
                                                  ; HEX_2_ASCII INPUT MEMORY 
                      11     ;                                       CH2ALOB         EQU             37H                
                                                  ; CONVERTED HEX_2_ASCII LOW ORDER BYTE (CONTENT IS IN ASCII, READY FOR DISPLAY)
                      12     ;                                       CH2AHOB         EQU             38H                
                                                  ; CONVERTED HEX_2_ASCII HIGH ORDER BYTE (CONTENT IS IN ASCII, READY FOR DISPLAY)
                      13     ;                                       NAHLOB          EQU             39H                
                                                  ; NEXT ADDRESS HOLDERS FOR LOB OR ADDRESS_DISPLAY_CONTROL'S INPUT MEM 
                             LOC 1 (THEY TEMPORARILY STORE THE CURRENT ADDRESS WHEN WRITING PROGRAM)
                      14     ;                                       NAHHOB          EQU             3AH                
                                                  ; NEXT ADDRESS HOLDERS FOR HOB OR ADDRESS_DISPLAY_CONTROL'S INPUT MEM LOC 2
                      15     ;                                       MHC                     EQU             3BH        
                                                          ; M_HEX DIGIT COUNTER
                      16     ;                                       VHADM1          EQU             3CH                
                                                  ; V_HEX ADDRESS DISPLAY MEMORY LOC. 1 FOR LOB
                      17     ;                                       VHADM2          EQU             3DH                
                                                  ; V_HEX ADDRESS DISPLAY MEMORY LOC. 2 FOR HOB
                      18     ;                                       SASML1          EQU             3EH                
                                                  ; START'S ADDRESS STORAGE MEM LOC. 1 FOR LOB (STORES THE BEGINNING ADDRESS)
                      19     ;                                       SASML2          EQU             3FH                
                                                  ; START'S ADDRESS STORAGE MEM LOC. 2 FOR HOB (STORES THE BEGINNING ADDRESS)
                      20     ;                                       EASML1          EQU             40H                
                                                  ; END'S ADDRESS STORAGE MEM LOC. 1 FOR LOB (STORES THE LAST/END ADDRESS)
                      21     ;                                       EASML2          EQU             41H                
                                                  ; END'S ADDRESS STORAGE MEM LOC. 2 FOR HOB (STORES THE LAST/END ADDRESS)
                      22     ; THE ADDRESS OF THE RESERVED AREAS CONTAINING THE RESULTS (OR CONTENT) OF THE EXAMINED REG
                             ISTERS ARE SAVED IN THE FOLLOWING MEMORY LOCATIONS
                      23     ;                                       PAM1            EQU             42H                
                                                  ; PAGE/SCREEN ADDRESS MEMORY LOCATION 1 FOR LOB(FOR CANCEL SR ONLY) = 
                             EXAMINED REGISTER A (LOB ADDRESS)
                      24     ;                                       PAM2            EQU             43H                
                                                  ; PAGE/SCREEN ADDRESS MEMORY LOCATION 2 FOR HOB(FOR CANCEL SR ONLY)   
                               = EXAMINED REGISTER A (HOB ADDRESS)
                      25     ;                                       EXRB1           EQU             44H                
                                                  ; EXAMINED REGISTER B (LOB ADDRESS)
                      26     ;                                       EXRB2           EQU             45H                
                                                  ; EXAMINED REGISTER B (HOB ADDRESS)
                      27     ;                                       EXRC1           EQU             46H                
                                                  ; EXAMINED REGISTER C (LOB ADDRESS)
                      28     ;                                       EXRC2           EQU             47H                
                                                  ; EXAMINED REGISTER C (HOB ADDRESS)
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     2

                      29     ;                                       EXRD1           EQU             48H                
                                                  ; EXAMINED REGISTER D (LOB ADDRESS)
                      30     ;                                       EXRD2           EQU             49H                
                                                  ; EXAMINED REGISTER D (HOB ADDRESS)
                      31     ;                                       EXRE1           EQU             4AH                
                                                  ; EXAMINED REGISTER E (LOB ADDRESS)
                      32     ;                                       EXRE2           EQU             4BH                
                                                  ; EXAMINED REGISTER E (HOB ADDRESS)
                      33     ;                                       EXRH1           EQU             4CH                
                                                  ; EXAMINED REGISTER H (LOB ADDRESS)
                      34     ;                                       EXRH2           EQU             4DH                
                                                  ; EXAMINED REGISTER H (HOB ADDRESS)
                      35     ;                                       EXRL1           EQU             4EH                
                                                  ; EXAMINED REGISTER L (LOB ADDRESS)
                      36     ;                                       EXRL2           EQU             4FH                
                                                  ; EXAMINED REGISTER L (HOB ADDRESS)
                      37     ;                                       DML1            EQU             50H                
                                                  ; DELAY'S MEM LOCATION 1
                      38     ;                                       DML2            EQU             51H                
                                                  ; DELAY'S MEM LOCATION 2
                      39     ;                                       DML3            EQU             52H                
                                                  ; DELAY'S MEM LOCATION 3
                      40     
                      41     ; ================================================= FLAG LOCATIONS ========================
                             =============================================
                      42     ;                                       SMF                     BIT             00H        
                                                          ; SUB MEM FLAG
                      43     ;                                       KPF                     BIT             01H        
                                                          ; KEY PRESSED FLAG
                      44     ;                                       HNF                     BIT             02H        
                                                          ; HEX NIBBLE FLAG
                      45     ;                                       NTF                     BIT             03H        
                                                          ; NEXT TYPE FLAG (OPCODE TYPE 03H = 0, OPERAND TYPE 03H = 1)
                      46     ;                                       BIF                     BIT             04H        
                                                          ; BYTE INDICATOR FLAG (INDICATES WHEN AN OPERAND IS A 2 BYTE(4
                              NIBBLES) OR 1 BYTE (2NIBBLES) )
                      47     ;                                       NMCF            BIT             05H                
                                                  ; NIBBLE MARRIAGE CONTROL FLAG
                      48     ;                                       MCF                     BIT             06H        
                                                          ; MARRIAGE COMPLETION FLAG ONLY FOR HIGH ORDER BYTE (MCF = 1 ON MARRIAGE COMPLETION)
                      49     ;                                       NOTF            BIT             07H                
                                                  ; NEXT OPERAND TYPE FLAG (DATA TYPE OPERAND 07H = 0, ADDRESS TYPE OPERAND 07H = 1)
                      50     ;                                       NSF                     BIT             08H        
                                                          ; NEXT SUB MEM FLAG (SELECTS THE PART OF THE NEXT SR MEANT FOR SUB MEM)
                      51     ;                                       CPLTF           BIT             09H                
                                                  ; CODE/PROGRAMMING LANGUAGE TYPE FLAG
                      52     ;                                       MHF                     BIT             0AH        
                                                          ; M_HEX FLAG FOR SWAP SELECTION (HELPS TO FORMAT DATA IN MHEX SR)               
                      53     ;                                       VHDF            BIT             0BH                
                                                  ; V_HEX DECREMENT FLAG
                      54     ;                                       EF                      BIT             0CH        
                                                          ; END'S FLAG
                      55     
                      56     ; ==================================================== MACROS =============================
                             =============================================
                      57     CLR_LCD                         MACRO                                                      
                                          ; CLEAR LCD
                      58                                     MOV             A, #01H
                      59                                     LCALL           LCD_CMD                                    
                                                                                                                                          
                      60                                     ENDM  
                      61     ; -----------------------------------------------------------------------------------------
                             ---------------------------------------------
                      62     D_STR                           MACRO                                                      
                                          ; DISPLAY STRINGS OF CHARACTER
                      63                                     LCALL           LCD_CMD
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     3

                      64                                     LCALL           DISP_CHAR
                      65                                     ENDM
                      66     ; ========================================================  MAIN  =========================
                             =============================================
0000                  67                                             ORG                     0000H
0000 802E             68                                             JMP                     MAIN                       
                                                  ; ON SYSTEM RESET, JUMP TO MAIN
                      69                                             
0003                  70                                             ORG                     0003H
0003 020E72           71                                             JMP                     SECOND_FUNCTION            
                                          ; ON SYSTEM EXTERNAL INTERRUPT 0, JUMP TO THE ISR 'SECOND_FUNCTION'
                      72     
0030                  73                                             ORG                     0030H
0030                  74     MAIN:                                                                                      
                                                  ; THE MAIN PROGRAM BEGINS HERE
0030 758157           75                                             MOV                     SP, #57H                   
                                                  ; INITIALIZATION OF THE TOP OF THE STACK(40 BYTES OF MEM. ARE AVAILABLE ON THIS INITIALIZATION)
0033 121378           76                                             LCALL           LCD_SET                            
                                          ; SET THE LCD FOR PROPER PERFORMANCE
0036 121262           77                                             LCALL           INTRO_MSG                          
                                          ; CALLS AN OSR TO DISPLAY LINE 1: '   SBC 8085uP   '
                      78                                                                                                
                                                          ;                         LINE 2: 'by IFEDIORA E.C.'  OR 'by FEDYRONIX INC'
0039 1212AC           79     MAIN1:                          CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED TO CONTINUE
003C 3001FA           80                                             JNB                     01H, MAIN1
003F C201             81                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                      82                                                                                                
                                                          
                      83                                             CLR_LCD                                            
                                                  ; CLEAR THE LCD (NOTE THIS RESET THE ADDRESS OF THE DDRAM TO 80H
0046 12122F           86                                             LCALL           INTRO_CPLT                         
                                          ; CALLS AN OSR TO DISPLAY LINE 1: 'Press 0 for MHEX'
                      87                                                                                                
                                                          ;                         LINE 2: 'Press 1 for ASM' 
0049 1212AC           88     MAIN1_1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE THAT EITHER '0' OR '1' KEY IS DEPRESSED
004C 3001FA           89                                             JNB                     01H, MAIN1_1
004F C201             90                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                      91     
0051 B43007           92                                             CJNE            A, #'0', MAIN1_2
0054 C209             93                                             CLR                     09H                        
                                                          ; SELECTS MHEX
0056 753B02           94                                             MOV                     3BH, #02H                  
                                                  ; MOVE '2' INTO THE MHEX COUNTER
0059 8005             95                                             SJMP            MAIN1_3
005B B431EB           96     MAIN1_2:                        CJNE            A, #'1', MAIN1_1
005E D209             97                                             SETB            09H                                
                                                  ; SELECTS ASM
                      98     
0060 75A881           99     MAIN1_3:                        MOV             IE, #10000001B                          ; E
                             NABLE THE !INT0 EXTERNAL INTERRUPT (SECOND_FUNCTION ISR)
                     100     
                     101                                             CLR_LCD
0068 121294          104                                             LCALL           INTRO_SUBMEM_REQUEST            ; C
                             ALLS AN OSR TO DISPLAY ON LINE 1: 'Enter start addr'
                     105     
006B 753004          106                                             MOV                     30H,#04H                   
                                                  ; LOAD '4' INTO THE COUNTER 
006E 3000FD          107                                             JNB                     00H, $                     
                                                  ; STAY HERE TILL THE SUB MEM IS PRESSED
                     108     
                     109     
0071 74C0            110     MAIN2:                          MOV                     A, #0C0H                           
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     4

                                          ; INSTRUCTION/COMMAND TO CARRY OUT DISPLAY ON LINE 2
0073 12135E          111                                             CALL            LCD_CMD
                     112     
0076 30097E          113                                             JNB                     09H, M_HEX_OUT_OF_RANGE    
                                  ; USE MACHINE LANGUAGE FOR 09H = 0 ELSE USE ASM FOR 09H = 1
                     114     
                     115     
                     116     ; =*=*=*=*=*=*=*=*=*=*=*=*=*        ASSEMBLY LANGUAGE AS THE CODE/PROGRAMMING LANGUAGE TYPE
                              (CPLT)        =*=*=*=*=*=*=*=*=*=*=*=*=*=
                     117     ; ---------------------------------------------- FIRST CHARATER KEY COMBINATION -----------
                             ------------------------------------------
                     118     
                     119     
0079 1212AC          120     ASM:                            CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (1ST KEY) IS DEPRESSED
007C 3001FA          121                                             JNB                     01H, ASM
007F C201            122                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     123     
0081 B44102          124                                             CJNE            A, #'A', ASM1_1                    
                                  ; JUMP TO A'S SECOND CHARACTER ELSE CONTINUE
0084 8074            125                                             JMP                     A2
0086 B44302          126     ASM1_1:                         CJNE            A, #'C', ASM1_2                         ; J
                             UMP TO C'S SECOND CHARACTER ELSE CONTINUE 
0089 2156            127                                             JMP                     C2
008B B44402          128     ASM1_2:                         CJNE            A, #'D', ASM1_3                         ; J
                             UMP TO D'S SECOND CHARACTER ELSE CONTINUE 
008E 4120            129                                             JMP                     D2
0090 B4450D          130     ASM1_3:                         CJNE            A, #'E', ASM1_4                         ; E
                             VALUATE E (ie EI) ELSE CONTINUE
0093 121385          131                                             CALL            LCD_SHO
0096 7449            132                                             MOV                     A, #'I'
0098 7533FB          133                                             MOV                     33H, #0FBH                 
                                                  ; LOAD ITS 8085 INST. SET
009B 121151          134                                             CALL            FLY_OPCODE                         
                                          ; EXPORT THE OPCODE
009E 80D1            135                                             SJMP            MAIN2
                     136     
00A0 B44812          137     ASM1_4:                         CJNE            A, #'H', ASM1_5                         ; E
                             VALUATE H (ie HLT) ELSE CONTINUE
00A3 121385          138                                             CALL            LCD_SHO
00A6 744C            139                                             MOV                     A, #'L'
00A8 121385          140                                             CALL            LCD_SHO
00AB 7454            141                                             MOV                     A, #'T'
00AD 753376          142                                             MOV                     33H, #76H                  
                                                  ; LOAD ITS 8085 INST. SET
00B0 121151          143                                             CALL            FLY_OPCODE                         
                                          ; EXPORT THE OPCODE
00B3 80BC            144                                             SJMP            MAIN2
                     145     
00B5 B44902          146     ASM1_5:                         CJNE            A, #'I', ASM1_6                         ; J
                             UMP TO I'S SECOND CHARACTER ELSE CONTINUE 
00B8 416D            147                                             JMP                     I2
00BA B44A02          148     ASM1_6:                         CJNE            A, #'J', ASM1_7                         ; J
                             UMP TO J'S SECOND CHARACTER ELSE CONTINUE 
00BD 4194            149                                             JMP                     J2
00BF B44C02          150     ASM1_7:                         CJNE            A, #'L', ASM1_8                         ; J
                             UMP TO L'S SECOND CHARACTER ELSE CONTINUE 
00C2 612E            151                                             JMP                     L2
00C4 B44D02          152     ASM1_8:                         CJNE            A, #'M', ASM1_9                         ; J
                             UMP TO M'S SECOND CHARACTER ELSE CONTINUE 
00C7 617D            153                                             JMP                     M2
                     154     
00C9 B44E12          155     ASM1_9:                         CJNE            A, #'N', ASM1_10                        ; E
                             VALUATE N (ie NOP) ELSE CONTINUE
00CC 121385          156                                             CALL            LCD_SHO
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     5

00CF 744F            157                                             MOV                     A, #'O'
00D1 121385          158                                             CALL            LCD_SHO
00D4 7450            159                                             MOV                     A, #'P'
00D6 753300          160                                             MOV                     33H, #00H                  
                                                  ; LOAD ITS 8085 INST. SET
00D9 121151          161                                             CALL            FLY_OPCODE                         
                                          ; EXPORT THE OPCODE
00DC 8093            162                                             SJMP            MAIN2
                     163     
00DE B44F02          164     ASM1_10:                        CJNE            A, #'O', ASM1_11                        ; J
                             UMP TO O'S SECOND CHARACTER ELSE CONTINUE 
00E1 619E            165                                             JMP                     O2
00E3 B45002          166     ASM1_11:                        CJNE            A, #'P', ASM1_12                        ; J
                             UMP TO P'S SECOND CHARACTER ELSE CONTINUE 
00E6 61D8            167                                             JMP                     _P2
00E8 B45202          168     ASM1_12:                        CJNE            A, #'R', ASM1_13                        ; J
                             UMP TO R'S SECOND CHARACTER ELSE CONTINUE 
00EB 8113            169                                             JMP                     _R2
00ED B45302          170     ASM1_13:                        CJNE            A, #'S', ASM1_14                        ; J
                             UMP TO S'S SECOND CHARACTER ELSE CONTINUE 
00F0 A153            171                                             JMP                     S2
00F2 B45884          172     ASM1_14:                        CJNE            A, #'X', ASM                            ; J
                             UMP TO X'S SECOND CHARACTER ELSE START AFRESH 
00F5 C110            173                                             JMP                     X2
                     174     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                     175     
                     176     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                     177     ; >>>>====++++----<<<<>>>>====++++----<<<<>>>>====++++----<<<<>>>>====++++----<<<<>>>>====+
                             +++----<<<<>>>>====++++----<<<<
00F7 021392          178     M_HEX_OUT_OF_RANGE:     LJMP            M_HEX                                           ; T
                             HIS WAS CREATED DUE TO OUT OF RANGE ERROR
                     179     ; >>>>====++++----<<<<>>>>====++++----<<<<>>>>====++++----<<<<>>>>====++++----<<<<>>>>====+
                             +++----<<<<>>>>====++++----<<<<
                     180     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                     181     
                     182     ; ------------------------------------------ SECOND, THIRD & FOURTH CHARACTER KEY COMBINATI
                             ON -----------------------------------------------------------
                     183     
                     184     ; FOR 'A' AS FIRST CHARACTER
00FA 121385          185     A2:                                     CALL            LCD_SHO
00FD 1212AC          186     A2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0100 3001FA          187                                             JNB                     01H, A2_1
0103 C201            188                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     189     
0105 B4430D          190                                             CJNE            A, #'C', A2_2                      
                                  ; ACI
0108 121385          191                                             CALL            LCD_SHO
010B 7449            192                                             MOV                     A, #'I'
010D 7533CE          193                                             MOV                     33H, #0CEH                 
                                                  ; LOAD ITS 8085 INST. SET
0110 12110A          194                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0113 0171            195                                             AJMP            MAIN2
                     196     
0115 B44420          197     A2_2:                           CJNE            A, #'D', A2_3                           ; C
                             HECK MATCH FOR AD'S THIRD CHARACTER ELSE CONTINUE 
0118 121385          198                                             CALL            LCD_SHO
011B 1212AC          199     A2_2L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
011E 3001FA          200                                             JNB                     01H, A2_2L1
0121 C201            201                                             CLR                     01H                        
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     6

                                                          ; GET READY FOR NEXT KEY
                     202                                     
0123 B44302          203                                             CJNE            A, #'C', A2_2L2                    
                                  ; ADC
0126 C164            204                                             JMP                     ADC_                       
                                                  ; JUMP TO ADC OPERAND ELSE CONTINUE
0128 B44402          205     A2_2L2:                         CJNE            A, #'D', A2_2L3                         ; A
                             DD
012B C1B7            206                                             JMP                     ADD_                       
                                                  ; JUMP TO ADD OPERAND ELSE CONTINUE
012D B449EB          207     A2_2L3:                         CJNE            A, #'I', A2_2L1                         ; A
                             DI
0130 7533C6          208                                             MOV                     33H, #0C6H                 
                                                  ; LOAD ITS 8085 INST. SET
0133 12110A          209                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0136 0171            210                                             AJMP            MAIN2
                     211     
0138 B44EC2          212     A2_3:                           CJNE            A, #'N', A2_1                           ; C
                             HECK MATCH FOR AN'S THIRD CHARACTER ELSE CONTINUE 
013B 121385          213                                             CALL            LCD_SHO
013E 1212AC          214     A2_3L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0141 3001FA          215                                             JNB                     01H, A2_3L1
0144 C201            216                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     217     
0146 B44102          218                                             CJNE            A, #'A', A2_3L2                    
                                  ; ANA
0149 E10A            219                                             JMP                     ANA_                       
                                                  ; JUMP TO ANA OPERAND ELSE CONTINUE
014B B449F0          220     A2_3L2:                         CJNE            A, #'I', A2_3L1                         ; A
                             NI 
014E 7533E6          221                                             MOV                     33H, #0E6H                 
                                                  ; LOAD ITS 8085 INST. SET
0151 12110A          222                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0154 0171            223                                             AJMP            MAIN2
                     224     
                     225     ; FOR 'C' AS FIRST CHARACTER
0156 121385          226     C2:                                     CALL            LCD_SHO
0159 1212AC          227     C2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
015C 3001FA          228                                             JNB                     01H, C2_1
015F C201            229                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     230     
0161 B44112          231                                             CJNE            A, #'A', C2_2                      
                                  ; CALL
                     232                                             D_STR
016A 414C4C00        235                                             DB                      'ALL',0
016E 7533CD          236                                             MOV                     33H, #0CDH                 
                                                  ; LOAD ITS 8085 INST. SET
0171 1210B5          237                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0174 0171            238                                             AJMP            MAIN2
                     239     
0176 B44308          240     C2_2:                           CJNE            A, #'C', C2_3                           ; C
                             C 
0179 7533DC          241                                             MOV                     33H, #0DCH
017C 1210B3          242                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
017F 0171            243                                             AJMP            MAIN2
                     244     
0181 B44D31          245     C2_3:                           CJNE            A, #'M', C2_4                           ; C
                             M'S THIRD CHARACTER ELSE CONTINUE 
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     7

0184 121385          246                                             CALL            LCD_SHO
0187 1212AC          247     C2_3L1:                         CALL            KEYPAD_ID
018A 3001FA          248                                             JNB                     01H, C2_3L1                
                                                  ; GET READY FOR NEXT KEY
018D C201            249                                             CLR                     01H
                     250     
018F B42A08          251                                             CJNE            A, #'*', C2_3L2                    
                                  ; CM
0192 7533FC          252                                             MOV                     33H, #0FCH
0195 1210B5          253                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0198 0171            254                                             AJMP            MAIN2
019A B44108          255     C2_3L2:                         CJNE            A, #'A', C2_3L3                         ; C
                             MA
019D 75332F          256                                             MOV                     33H, #2FH                  
                                                  ; LOAD ITS 8085 INST. SET
01A0 121151          257                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
01A3 0171            258                                             AJMP            MAIN2
                     259     
01A5 B44308          260     C2_3L3:                         CJNE            A, #'C', C2_3L4                         ; C
                             MC
01A8 75333F          261                                             MOV                     33H, #3FH                  
                                                  ; LOAD ITS 8085 INST. SET
01AB 121151          262                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD OPCODE IN-TAKE
01AE 0171            263                                             AJMP            MAIN2
                     264     
01B0 B450D4          265     C2_3L4:                         CJNE            A, #'P', C2_3L1
01B3 E15D            266                                             JMP                     CMP_                       
                                                  ; JUMP TO CMP'S OPERAND CHARACTER ELSE CONTINUE 
                     267     ; -------
01B5 B44E21          268     C2_4:                           CJNE            A, #'N', C2_5                           ; J
                             UMP TO CN'S THIRD CHARACTER ELSE CONTINUE 
01B8 121385          269                                             CALL            LCD_SHO
01BB 1212AC          270     C2_4L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
01BE 3001FA          271                                             JNB                     01H, C2_4L1
01C1 C201            272                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     273     
01C3 B44308          274                                             CJNE            A, #'C', C2_4L2                    
                                  ; CNC
01C6 7533D4          275                                             MOV                     33H, #0D4H
01C9 1210B3          276                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
01CC 0171            277                                             AJMP            MAIN2
01CE B45AEA          278     C2_4L2:                         CJNE            A, #'Z', C2_4L1                         ; C
                             NZ
01D1 7533C4          279                                             MOV                     33H, #0C4H
01D4 1210B3          280                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
01D7 0171            281                                             AJMP            MAIN2
                     282     
01D9 B45037          283     C2_5:                           CJNE            A, #'P', C2_6                           ; J
                             UMP TO CP'S THIRD CHARACTER ELSE CONTINUE 
01DC 121385          284                                             CALL            LCD_SHO
01DF 1212AC          285     C2_5L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
01E2 3001FA          286                                             JNB                     01H, C2_5L1
01E5 C201            287                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     288     
01E7 B42A08          289                                             CJNE            A, #'*', C2_5L2                    
                                  ; CP
01EA 7533F4          290                                             MOV                     33H, #0F4H                 
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     8

                                                  ; LOAD ITS 8085 INST. SET
01ED 1210B5          291                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
01F0 0171            292                                             AJMP            MAIN2
01F2 B44508          293     C2_5L2:                         CJNE            A, #'E', C2_5L3                         ; C
                             PE
01F5 7533EC          294                                             MOV                     33H, #0ECH
01F8 1210B3          295                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
01FB 0171            296                                             AJMP            MAIN2
                     297     
01FD B44908          298     C2_5L3:                         CJNE            A, #'I', C2_5L4                         ; C
                             PI
0200 7533FE          299                                             MOV                     33H, #0FEH                 
                                                  ; LOAD ITS 8085 INST. SET
0203 12110A          300                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0206 0171            301                                             AJMP            MAIN2
                     302     
0208 B44FD4          303     C2_5L4:                         CJNE            A, #'O', C2_5L1                         ; C
                             PO
020B 7533E4          304                                             MOV                     33H, #0E4H                 
                                                  ; LOAD ITS 8085 INST. SET
020E 1210B3          305                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0211 0171            306                                             AJMP            MAIN2
                     307     
                     308     
0213 B45A08          309     C2_6:                           CJNE            A, #'Z', C2_7                           ; J
                             UMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
0216 7533CC          310                                             MOV                     33H, #0CCH                 
                                                  ; LOAD ITS 8085 INST. SET
0219 1210B3          311                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
021C 0171            312                                             AJMP            MAIN2
021E 2159            313     C2_7:                           AJMP            C2_1                                       
                                  ; I PLACE THIS INSTRUCTION HERE DUE OUT OF RANGE ERROR
                     314     
                     315     ; FOR 'D' AS FIRST CHARACTER
0220 121385          316     D2:                                     CALL            LCD_SHO
0223 1212AC          317     D2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0226 3001FA          318                                             JNB                     01H, D2_1
0229 C201            319                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     320     
022B B4411B          321                                             CJNE            A, #'A', D2_2                      
                                  ; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
022E 121385          322                                             CALL            LCD_SHO
0231 1212AC          323     D2_1L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0234 3001FA          324                                             JNB                     01H, D2_1L1                
                                                  ; GET READY FOR NEXT KEY
0237 C201            325                                             CLR                     01H
                     326     
0239 B44108          327                                             CJNE            A, #'A', D2_1L2                    
                                  ; DAA
023C 753327          328                                             MOV                     33H, #27H                  
                                                  ; LOAD ITS 8085 INST. SET
023F 121151          329                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0242 0171            330                                             AJMP            MAIN2
0244 B444EA          331     D2_1L2:                         CJNE            A, #'D', D2_1L1                         ; D
                             AD
0247 E1B0            332                                             JMP                     DAD_                       
                                                  ; JUMP TO DAD'S OPERAND CHARACTER ELSE CONTINUE 
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE     9

                     333     
0249 B44316          334     D2_2:                           CJNE            A, #'C', D2_3                           ; J
                             UMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
024C 121385          335                                             CALL            LCD_SHO
024F 1212AC          336     D2_2L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0252 3001FA          337                                             JNB                     01H, D2_2L1                
                                                  ; GET READY FOR NEXT KEY
0255 C201            338                                             CLR                     01H             
                     339                                             
0257 B45202          340                                             CJNE            A, #'R', D2_2L2                    
                                  ; DCR
025A E1E8            341                                             JMP                     DCR_                       
                                                  ; JUMP TO DCR'S OPERAND CHARACTER ELSE CONTINUE 
025C B458F0          342     D2_2L2:                         CJNE            A, #'X', D2_2L1                         ; D
                             CX
025F 02083C          343                                             JMP                     DCX_                       
                                                  ; JUMP TO DCX'S OPERAND CHARACTER ELSE CONTINUE 
                     344                                                                                                
                                          
0262 B449BE          345     D2_3:                           CJNE            A, #'I', D2_1                           ; J
                             UMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
0265 7533F3          346                                             MOV                     33H, #0F3H                 
                                                  ; LOAD ITS 8085 INST. SET
0268 12110A          347                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
026B 0171            348                                             AJMP            MAIN2
                     349     
                     350     ; FOR 'I' AS FIRST CHARACTER
026D 121385          351     I2:                                     CALL            LCD_SHO
0270 744E            352                                             MOV                     A, #'N'                    
                                              ; SHOW 'IN' AT ONCE AND WAIT FOR 'NEXT SR', CHARACTER 'R' OR 'X'
0272 121385          353                                             CALL            LCD_SHO
0275 1212AC          354     I2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0278 3001FA          355                                             JNB                     01H, I2_1
027B C201            356                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     357     
027D B42A08          358                                             CJNE            A, #'*', I2_2                      
                                  ; IN
0280 7533DB          359                                             MOV                     33H, #0DBH                 
                                                  ; LOAD ITS 8085 INST. SET
0283 12110C          360                                             CALL            FLY_DATA_SKIP                      
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0286 0171            361                                             AJMP            MAIN2           
0288 B45203          362     I2_2:                           CJNE            A, #'R', I2_3
028B 020875          363                                             JMP                     INR_                       
                                                  ; JUMP TO INR'S OPERAND CHARACTER ELSE CONTINUE 
028E B458E4          364     I2_3:                           CJNE            A, #'X', I2_1
0291 0208C9          365                                             JMP                     INX_                       
                                                  ; JUMP TO INX'S OPERAND CHARACTER ELSE CONTINUE 
                     366     
                     367     ; FOR 'J' AS FIRST CHARACTER
0294 121385          368     J2:                                     CALL            LCD_SHO
0297 1212AC          369     J2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
029A 3001FA          370                                             JNB                     01H, J2_1
029D C201            371                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     372     
029F B44308          373                                             CJNE            A, #'C', J2_2                      
                                  ; JC
02A2 7533DA          374                                             MOV                     33H, #0DAH                 
                                                  ; LOAD ITS 8085 INST. SET
02A5 1210B3          375                                             CALL            FLY_ADDRESS                        
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    10

                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02A8 0171            376                                             AJMP            MAIN2
                     377     
02AA B44D21          378     J2_2:                           CJNE            A, #'M', J2_3                           ; J
                             M'S THIRD CHARACTER ELSE CONTINUE 
02AD 121385          379                                             CALL            LCD_SHO
02B0 1212AC          380     J2_2L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
02B3 3001FA          381                                             JNB                     01H, J2_2L1
02B6 C201            382                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     383     
02B8 B42A08          384                                             CJNE            A, #'*', J2_2L2                    
                                  ; JM
02BB 7533FA          385                                             MOV                     33H, #0FAH                 
                                                  ; LOAD ITS 8085 INST. SET
02BE 1210B5          386                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02C1 0171            387                                             AJMP            MAIN2           
02C3 B450EA          388     J2_2L2:                         CJNE            A, #'P', J2_2L1                         ; J
                             MP
02C6 7533C3          389                                             MOV                     33H, #0C3H                 
                                                  ; LOAD ITS 8085 INST. SET
02C9 1210B3          390                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02CC 0171            391                                             AJMP            MAIN2                           
                     392     
02CE B44E21          393     J2_3:                           CJNE            A, #'N', J2_4                           ; J
                             N'S THIRD CHARACTER ELSE CONTINUE 
02D1 121385          394                                             CALL            LCD_SHO
02D4 1212AC          395     J2_3L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
02D7 3001FA          396                                             JNB                     01H, J2_3L1
02DA C201            397                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     398     
02DC B44308          399                                             CJNE            A, #'C', J2_3L2                    
                                  ; JNC
02DF 7533D2          400                                             MOV                     33H, #0D2H                 
                                                  ; LOAD ITS 8085 INST. SET
02E2 1210B3          401                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02E5 0171            402                                             AJMP            MAIN2
02E7 B45AEA          403     J2_3L2:                         CJNE            A, #'Z', J2_3L1                         ; J
                             NZ
02EA 7533C2          404                                             MOV                     33H, #0C2H                 
                                                  ; LOAD ITS 8085 INST. SET
02ED 1210B3          405                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
02F0 0171            406                                             AJMP            MAIN2    
                     407     
02F2 B4502C          408     J2_4:                           CJNE            A, #'P', J2_5                           ; J
                             P'S THIRD CHARACTER ELSE CONTINUE 
02F5 121385          409                                             CALL            LCD_SHO
02F8 1212AC          410     J2_4L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
02FB 3001FA          411                                             JNB                     01H, J2_4L1
02FE C201            412                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     413     
0300 B42A08          414                                             CJNE            A, #'*', J2_4L2                    
                                  ; JP
0303 7533F2          415                                             MOV                     33H, #0F2H                 
                                                  ; LOAD ITS 8085 INST. SET
0306 1210B5          416                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    11

0309 0171            417                                             AJMP            MAIN2           
030B B44508          418     J2_4L2:                         CJNE            A, #'E', J2_4L3                         ; J
                             PE
030E 7533EA          419                                             MOV                     33H, #0EAH                 
                                                  ; LOAD ITS 8085 INST. SET
0311 1210B3          420                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0314 0171            421                                             AJMP            MAIN2
0316 B44FDF          422     J2_4L3:                         CJNE            A, #'O', J2_4L1                         ; J
                             PO
0319 7533E2          423                                             MOV                     33H, #0E2H                 
                                                  ; LOAD ITS 8085 INST. SET
031C 1210B3          424                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
031F 0171            425                                             AJMP            MAIN2
                     426     
0321 B45A08          427     J2_5:                           CJNE            A, #'Z', J2_6                           ; J
                             Z 
0324 7533CA          428                                             MOV                     33H, #0CAH                 
                                                  ; LOAD ITS 8085 INST. SET
0327 1210B3          429                                             CALL            FLY_ADDRESS                        
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
032A 0171            430                                             AJMP            MAIN2
032C 4197            431     J2_6:                           AJMP            J2_1                                       
                                  ; I PLACE THIS INSTRUCTION HERE DUE OUT OF RANGE ERROR
                     432     
                     433     ; FOR 'L' AS FIRST CHARACTER
032E 121385          434     L2:                                     CALL            LCD_SHO
0331 1212AC          435     L2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0334 3001FA          436                                             JNB                     01H, L2_1
0337 C201            437                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     438     
0339 B44421          439                                             CJNE            A, #'D', L2_2                      
                                  ; JUMP TO LDA'S FOURTH CHARACTER ELSE CONTINUE
033C 121385          440                                             CALL            LCD_SHO
033F 7441            441                                             MOV                     A, #'A'                    
                                                  
0341 121385          442                                             CALL            LCD_SHO
0344 1212AC          443     L2_1L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(4TH ALPHABET KEY) IS DEPRESSED
0347 3001FA          444                                             JNB                     01H, L2_1L1
034A C201            445                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     446     
034C B42A08          447                                             CJNE            A, #'*', L2_1L2                    
                                  ; LDA
034F 75333A          448                                             MOV                     33H, #3AH                  
                                                  ; LOAD ITS 8085 INST. SET
0352 1210B5          449                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0355 0171            450                                             AJMP            MAIN2           
0357 B458EA          451     L2_1L2:                         CJNE            A, #'X', L2_1L1                         ; L
                             DAX
035A 020902          452                                             JMP                     LDAX_                      
                                                  ; JUMP TO LDAX'S OPERANDS ELSE CONTINUE
                     453     
035D B44812          454     L2_2:                           CJNE            A, #'H', L2_3                           ; L
                             HLD 
                     455                                             D_STR
0366 484C4400        458                                             DB                      'HLD',0
036A 75332A          459                                             MOV                     33H, #2AH                  
                                                  ; LOAD ITS 8085 INST. SET
036D 1210B5          460                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    12

0370 0171            461                                             AJMP            MAIN2
                     462     
0372 B458BC          463     L2_3:                           CJNE            A, #'X', L2_1                           ; J
                             UMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
0375 121385          464                                             CALL            LCD_SHO
0378 7449            465                                             MOV                     A, #'I'
037A 020926          466                                             JMP                     LXI_                       
                                                  ; JUMP TO LXI'S OPERANDS ELSE CONTINUE  
                     467     
                     468     ; FOR 'M' AS FIRST CHARACTER
037D 121385          469     M2:                                     CALL            LCD_SHO
0380 1212AC          470     M2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0383 3001FA          471                                             JNB                     01H, M2_1
0386 C201            472                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     473     
0388 B44F08          474                                             CJNE            A, #'O', M2_2                      
                                  ; MOV
038B 121385          475                                             CALL            LCD_SHO
038E 7456            476                                             MOV                     A, #'V'
0390 02095F          477                                             JMP                     MOV_                       
                                                  ; JUMP TO MOV'S OPERAND CHARACTERS ELSE CONTINUE
                     478     
0393 B456EA          479     M2_2:                           CJNE            A, #'V', M2_1                           ; M
                             VI
0396 121385          480                                             CALL            LCD_SHO
0399 7449            481                                             MOV                     A, #'I'
039B 020C31          482                                             JMP                     MVI_                       
                                                  ; JUMP TO MOV'S OPERAND CHARACTERS ELSE CONTINUE
                     483     
                     484     ; FOR 'O' AS FIRST CHARACTER
039E 121385          485     O2:                                     CALL            LCD_SHO
03A1 1212AC          486     O2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
03A4 3001FA          487                                             JNB                     01H, O2_1
03A7 C201            488                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     489     
03A9 B4521C          490                                             CJNE            A, #'R', O2_2                      
                                  ; JUMP TO OR'S THIRD CHARACTERS ELSE CONTINUE
03AC 121385          491                                             CALL            LCD_SHO
03AF 1212AC          492     O2_1L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
03B2 3001FA          493                                             JNB                     01H, O2_1L1
03B5 C201            494                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     495     
03B7 B44103          496                                             CJNE            A, #'A', O2_1L2                    
                                  ; ORA
03BA 020C85          497                                             JMP                     ORA_                       
                                                  ; JUMP TO ORA'S OPERAND CHARACTERS ELSE CONTINUE
03BD B449EF          498     O2_1L2:                         CJNE            A, #'I', O2_1L1                         ; O
                             RI
03C0 7533F6          499                                             MOV                     33H, #0F6H                 
                                                  ; LOAD ITS 8085 INST. SET
03C3 12110A          500                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
03C6 0171            501                                             AJMP            MAIN2
                     502     
03C8 B455D6          503     O2_2:                           CJNE            A, #'U', O2_1                           ; O
                             UT 
03CB 121385          504                                             CALL            LCD_SHO
03CE 7454            505                                             MOV                     A, #'T'
03D0 7533D3          506                                             MOV                     33H, #0D3H                 
                                                  ; LOAD ITS 8085 INST. SET
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    13

03D3 12110A          507                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
03D6 0171            508                                             AJMP            MAIN2
                     509     
                     510     ; FOR 'P' AS FIRST CHARACTER
03D8 121385          511     _P2:                            CALL            LCD_SHO
03DB 1212AC          512     _P2_1:                          CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
03DE 3001FA          513                                             JNB                     01H, _P2_1
03E1 C201            514                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     515     
03E3 B44312          516                                             CJNE            A, #'C', _P2_2                     
                                  ; PCHL
                     517                                             D_STR
03EC 43484C00        520                                             DB                      'CHL',0
03F0 7533E9          521                                             MOV                     33H, #0E9H                 
                                                  ; LOAD ITS 8085 INST. SET
03F3 121153          522                                             CALL            FLY_OPCODE_SKIP                    
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
03F6 0171            523                                             AJMP            MAIN2
03F8 B44F08          524     _P2_2:                          CJNE            A, #'O', _P2_3                          ; P
                             OP
03FB 121385          525                                             CALL            LCD_SHO
03FE 7450            526                                             MOV                     A, #'P'
0400 020CD9          527                                             JMP                     POP_                       
                                                  ; JUMP TO POP'S OPERAND CHARACTERS ELSE CONTINUE 
0403 B455D5          528     _P2_3:                          CJNE            A, #'U', _P2_1                          ; P
                             USH
                     529                                             D_STR
040C 55534800        532                                             DB                      'USH',0
0410 020D17          533                                             JMP                     PUSH_                      
                                                  ; JUMP TO PUSH'S OPERAND CHARACTERS ELSE CONTINUE 
                     534     
                     535     ; FOR 'R' AS FIRST CHARACTER
0413 121385          536     _R2:                            CALL            LCD_SHO
0416 1212AC          537     _R2_1:                          CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0419 3001FA          538                                             JNB                     01H, _R2_1
041C C201            539                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     540     
041E B44121          541                                             CJNE            A, #'A', _R2_2                     
                                  ; JUMP TO RA'S THIRD CHARACTERS ELSE CONTINUE
0421 121385          542                                             CALL            LCD_SHO
0424 1212AC          543     _R2_1L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0427 3001FA          544                                             JNB                     01H, _R2_1L1
042A C201            545                                             CLR                     01H             
                     546     
042C B44C08          547                                             CJNE            A, #'L', _R2_1L2                   
                                  ; RAL
042F 753317          548                                             MOV                     33H, #17H                  
                                                  ; LOAD ITS 8085 INST. SET
0432 121151          549                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0435 0171            550                                             AJMP            MAIN2
0437 B452EA          551     _R2_1L2:                        CJNE            A, #'R', _R2_1L1                        ; R
                             AR
043A 75331F          552                                             MOV                     33H, #1FH                  
                                                  ; LOAD ITS 8085 INST. SET
043D 121151          553                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0440 0171            554                                             AJMP            MAIN2
                     555     ; -------
0442 B44308          556     _R2_2:                          CJNE            A, #'C', _R2_3                          ; R
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    14

                             C 
0445 7533D8          557                                             MOV                     33H, #0D8H                 
                                                  ; LOAD ITS 8085 INST. SET
0448 121151          558                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
044B 0171            559                                             AJMP            MAIN2
                     560     ; -------
044D B4450D          561     _R2_3:                          CJNE            A, #'E', _R2_4                          ; R
                             ET 
0450 121385          562                                             CALL            LCD_SHO
0453 7454            563                                             MOV                     A, #'T'
0455 7533C9          564                                             MOV                     33H, #0C9H                 
                                                  ; LOAD ITS 8085 INST. SET
0458 121151          565                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
045B 0171            566                                             AJMP            MAIN2
                     567     ; -------
045D B4490D          568     _R2_4:                          CJNE            A, #'I', _R2_5                          ; R
                             IM
0460 121385          569                                             CALL            LCD_SHO
0463 744D            570                                             MOV                     A, #'M'
0465 753320          571                                             MOV                     33H, #20H                  
                                                  ; LOAD ITS 8085 INST. SET
0468 121151          572                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
046B 0171            573                                             AJMP            MAIN2
                     574     ; -------
046D B44C0D          575     _R2_5:                          CJNE            A, #'L', _R2_6                          ; R
                             LC 
0470 121385          576                                             CALL            LCD_SHO
0473 7443            577                                             MOV                     A, #'C'
0475 753307          578                                             MOV                     33H, #07H                  
                                                  ; LOAD ITS 8085 INST. SET
0478 121151          579                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
047B 0171            580                                             AJMP            MAIN2
                     581     ; -------
047D B44D08          582     _R2_6:                          CJNE            A, #'M', _R2_7                          ; R
                             M 
0480 7533F8          583                                             MOV                     33H, #0F8H                 
                                                  ; LOAD ITS 8085 INST. SET
0483 121151          584                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0486 0171            585                                             AJMP            MAIN2
                     586     ; -------
0488 B44E21          587     _R2_7:                          CJNE            A, #'N', _R2_8                          ; J
                             UMP TO RN'S THIRD CHARATER ELSE CONTINUE
048B 121385          588                                             CALL            LCD_SHO
048E 1212AC          589     _R2_7L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0491 3001FA          590                                             JNB                     01H, _R2_7L1
0494 C201            591                                             CLR                     01H             
                     592     
0496 B44308          593                                             CJNE            A, #'C', _R2_7L2                   
                                  ; RNC
0499 7533D0          594                                             MOV                     33H, #0D0H                 
                                                  ; LOAD ITS 8085 INST. SET
049C 121151          595                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
049F 0171            596                                             AJMP            MAIN2
04A1 B45AEA          597     _R2_7L2:                        CJNE            A, #'Z', _R2_7L1                        ; R
                             NZ
04A4 7533C0          598                                             MOV                     33H, #0C0H                 
                                                  ; LOAD ITS 8085 INST. SET
04A7 121151          599                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    15

04AA 0171            600                                             AJMP            MAIN2
                     601     ; -------
04AC B4502C          602     _R2_8:                          CJNE            A, #'P', _R2_9                          ; J
                             UMP TO RP'S THIRD CHARACTER ELSE CONTINUE 
04AF 121385          603                                             CALL            LCD_SHO
04B2 1212AC          604     _R2_8L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
04B5 3001FA          605                                             JNB                     01H, _R2_8L1
04B8 C201            606                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     607     
04BA B42A08          608                                             CJNE            A, #'*', _R2_8L2                   
                                  ; RP
04BD 7533F0          609                                             MOV                     33H, #0F0H                 
                                                  ; LOAD ITS 8085 INST. SET
04C0 121153          610                                             CALL            FLY_OPCODE_SKIP                    
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
04C3 0171            611                                             AJMP            MAIN2           
                     612     
04C5 B44508          613     _R2_8L2:                        CJNE            A, #'E', _R2_8L3                        ; R
                             PE
04C8 7533E8          614                                             MOV                     33H, #0E8H                 
                                                  ; LOAD ITS 8085 INST. SET
04CB 121151          615                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
04CE 0171            616                                             AJMP            MAIN2
                     617     
04D0 B44FDF          618     _R2_8L3:                        CJNE            A, #'O', _R2_8L1                        ; R
                             PO
04D3 7533E0          619                                             MOV                     33H, #0E0H                 
                                              ; LOAD ITS 8085 INST. SET
04D6 121151          620                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
04D9 0171            621                                             AJMP            MAIN2
                     622     ; -------
04DB B4520D          623     _R2_9:                          CJNE            A, #'R', _R2_10                         ; R
                             RC 
04DE 121385          624                                             CALL            LCD_SHO
04E1 7443            625                                             MOV                     A, #'C'
04E3 75330F          626                                             MOV                     33H, #0FH                  
                                                  ; LOAD ITS 8085 INST. SET
04E6 121151          627                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
04E9 0171            628                                             AJMP            MAIN2
                     629     ; -------
04EB B45358          630     _R2_10:                         CJNE            A, #'S', _R2_11                         ; R
                             ST
04EE 121385          631                                             CALL            LCD_SHO
04F1 7454            632                                             MOV                     A, #'T'
04F3 121385          633                                             CALL            LCD_SHO                            
                                          
04F6 7420            634                                             MOV                     A, #' '
04F8 121385          635                                             CALL            LCD_SHO                            
                                          ; GET RST'S 4TH CHARACTER
                     636     
04FB 1212AC          637     _R2_10L1:                       CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
04FE 3001FA          638                                             JNB                     01H, _R2_10L1              
                                          
0501 C201            639                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                     640     
0503 B43005          641                                             CJNE            A, #'0', _R2_10L2                  
                                  ; RST 0
0506 7533C7          642                                             MOV                     33H, #0C7H                 
                                                  ; LOAD ITS 8085 INST. SET
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    16

0509 8036            643                                             SJMP            _R2_10L9
050B B43105          644     _R2_10L2:                       CJNE            A, #'1', _R2_10L3                       ; R
                             ST 1
050E 7533CF          645                                             MOV                     33H, #0CFH                 
                                                  ; LOAD ITS 8085 INST. SET
0511 802E            646                                             SJMP            _R2_10L9
0513 B43205          647     _R2_10L3:                       CJNE            A, #'2', _R2_10L4                       ; R
                             ST 2
0516 7533D7          648                                             MOV                     33H, #0D7H                 
                                                  ; LOAD ITS 8085 INST. SET
0519 8026            649                                             SJMP            _R2_10L9
051B B43305          650     _R2_10L4:                       CJNE            A, #'3', _R2_10L5                       ; R
                             ST 3
051E 7533DF          651                                             MOV                     33H, #0DFH                 
                                                  ; LOAD ITS 8085 INST. SET
0521 801E            652                                             SJMP            _R2_10L9
0523 B43405          653     _R2_10L5:                       CJNE            A, #'4', _R2_10L6                       ; R
                             ST 4
0526 7533E7          654                                             MOV                     33H, #0E7H                 
                                                  ; LOAD ITS 8085 INST. SET
0529 8016            655                                             SJMP            _R2_10L9
052B B43505          656     _R2_10L6:                       CJNE            A, #'5', _R2_10L7                       ; R
                             ST 5
052E 7533EF          657                                             MOV                     33H, #0EFH                 
                                                  ; LOAD ITS 8085 INST. SET
0531 800E            658                                             SJMP            _R2_10L9
0533 B43605          659     _R2_10L7:                       CJNE            A, #'6', _R2_10L8                       ; R
                             ST 6
0536 7533F7          660                                             MOV                     33H, #0F7H                 
                                                  ; LOAD ITS 8085 INST. SET
0539 8006            661                                             SJMP            _R2_10L9
053B B437BD          662     _R2_10L8:                       CJNE            A, #'7', _R2_10L1                       ; R
                             ST 7
053E 7533FF          663                                             MOV                     33H, #0FFH                 
                                                  ; LOAD ITS 8085 INST. SET
0541 121151          664     _R2_10L9:                       CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0544 0171            665                                             AJMP            MAIN2
                     666     ; -------
0546 B45A08          667     _R2_11:                         CJNE            A, #'Z', _R2_12                         ; J
                             UMP TO AD'S THIRD CHARACTER ELSE CONTINUE 
0549 7533C8          668                                             MOV                     33H, #0C8H                 
                                                  ; LOAD ITS 8085 INST. SET
054C 121151          669                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
054F 0171            670                                             AJMP            MAIN2
0551 8116            671     _R2_12:                         AJMP            _R2_1                                      
                                  ; I PLACED THIS INSTRUCTION DUE TO OUT OF RANGE ERROR
                     672     
                     673     ; FOR 'S' AS FIRST CHARACTER
0553 121385          674     S2:                                     CALL            LCD_SHO
0556 1212AC          675     S2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0559 3001FA          676                                             JNB                     01H, S2_1
055C C201            677                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     678     
055E B4421C          679                                             CJNE            A, #'B', S2_2                      
                                  ; JUMP TO SB'S THIRD CHARACTER
0561 121385          680                                             CALL            LCD_SHO
0564 1212AC          681     S2_1L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED 
0567 3001FA          682                                             JNB                     01H, S2_1L1
056A C201            683                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
056C B44203          684                                             CJNE            A, #'B', S2_1L2                    
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    17

                                  ; SBB
056F 020D52          685                                             JMP                     SBB_                       
                                                  ; JUMP TO SBB OPERAND CHARACTERS
0572 B449EF          686     S2_1L2:                         CJNE            A, #'I', S2_1L1                         ; S
                             BI                                   
0575 7533DE          687                                             MOV                     33H, #0DEH                 
                                                  ; LOAD ITS 8085 INST. SET
0578 12110A          688                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
057B 0171            689                                             AJMP            MAIN2
                     690     
057D B44812          691     S2_2:                           CJNE            A, #'H', S2_3                           ; S
                             HLD 
                     692                                             D_STR
0586 484C4400        695                                             DB                      'HLD',0
058A 753322          696                                             MOV                     33H, #22H                  
                                                  ; LOAD ITS 8085 INST. SET
058D 1210B5          697                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
0590 0171            698                                             AJMP            MAIN2
0592 B4490D          699     S2_3:                           CJNE            A, #'I', S2_4                           ; S
                             IM 
0595 121385          700                                             CALL            LCD_SHO
0598 744D            701                                             MOV                     A, #'M'
059A 753330          702                                             MOV                     33H, #30H                  
                                                  ; LOAD ITS 8085 INST. SET
059D 121151          703                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
05A0 0171            704                                             AJMP            MAIN2
                     705     
05A2 B45012          706     S2_4:                           CJNE            A, #'P', S2_5                           ; S
                             PHL
                     707                                             D_STR
05AB 50484C00        710                                             DB                      'PHL',0
05AF 7533F9          711                                             MOV                     33H, #0F9H                 
                                                  ; LOAD ITS 8085 INST. SET
05B2 1210B5          712                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
05B5 0171            713                                             AJMP            MAIN2
                     714     
05B7 B45435          715     S2_5:                           CJNE            A, #'T', S2_6                           ; J
                             UMP TO ST'S THIRD CHARACTER ELSE CONTINUE 
05BA 121385          716                                             CALL            LCD_SHO
                     717                                             
05BD 1212AC          718     S2_5L1:                         CALL            KEYPAD_ID
05C0 3001FA          719                                             JNB                     01H, S2_5L1
05C3 C201            720                                             CLR                     01H     
05C5 B4411C          721                                             CJNE            A, #'A', S2_5L2                    
                                  ; GET STA'S FOURTH CHARACTER
05C8 121385          722                                             CALL            LCD_SHO                            
                                          
05CB 1212AC          723     S2_5L1L1:                       CALL            KEYPAD_ID                                  
                                  
05CE 3001FA          724                                             JNB                     01H, S2_5L1L1
05D1 C201            725                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                     726     
05D3 B42A08          727                                             CJNE            A, #'*', S2_5L1L2                  
                                  ; STA
05D6 753332          728                                             MOV                     33H, #32H                  
                                                  ; LOAD ITS 8085 INST. SET
05D9 1210B5          729                                             CALL            FLY_ADDRESS_SKIP                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
05DC 0171            730                                             AJMP            MAIN2           
05DE B458EA          731     S2_5L1L2:                       CJNE            A, #'X', S2_5L1L1                       ; S
                             TAX
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    18

05E1 020DFA          732                                             JMP                     STAX_                      
                                                  ; JUMP TO STAX'S OPERAND CHARACTERS
                     733     
05E4 B443D6          734     S2_5L2:                         CJNE            A, #'C', S2_5L1                         ; S
                             TC
05E7 753337          735                                             MOV                     33H, #37H                  
                                                  ; LOAD ITS 8085 INST. SET
05EA 121151          736                                             CALL            FLY_OPCODE                         
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
05ED 0171            737                                             AJMP            MAIN2
                     738     
05EF B4551C          739     S2_6:                           CJNE            A, #'U', S2_7                           ; J
                             UMP TO SU'S THIRD CHARACTER ELSE CONTINUE 
05F2 121385          740                                             CALL            LCD_SHO
05F5 1212AC          741     S2_6L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE THAT A KEY IS PREESSED
05F8 3001FA          742                                             JNB                     01H, S2_6L1
05FB C201            743                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                     744     
05FD B44203          745                                             CJNE            A, #'B', S2_6L2                    
                                  ; SUB
0600 020DA6          746                                             JMP                     SUB_                       
                                                  ; JUMP TO SUB'S OPERAND CHARACTERS
0603 B449EF          747     S2_6L2:                         CJNE            A, #'I', S2_6L1                         ; S
                             UI                                   
0606 7533D6          748                                             MOV                     33H, #0D6H                 
                                                  ; LOAD ITS 8085 INST. SET
0609 12110A          749                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
060C 0171            750                                             AJMP            MAIN2
060E A156            751     S2_7:                           AJMP            S2_1                                       
                                  ; I PLACED THIS INSTRUCTION DUE TO OUT OF RANGE ERROR
                     752     
                     753     ; FOR 'X' AS FIRST CHARACTER
0610 121385          754     X2:                                     CALL            LCD_SHO
0613 1212AC          755     X2_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
0616 3001FA          756                                             JNB                     01H, X2_1
0619 C201            757                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     758     
061B B44312          759                                             CJNE            A, #'C', X2_2                      
                                  ; XCHG ELSE CONTINUE
                     760                                             D_STR
0624 43484700        763                                             DB                      'CHG',0
0628 7533EB          764                                             MOV                     33H, #0EBH                 
                                                  ; LOAD ITS 8085 INST. SET
062B 121153          765                                             CALL            FLY_OPCODE_SKIP                    
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
062E 0171            766                                             AJMP            MAIN2
                     767     
0630 B4521C          768     X2_2:                           CJNE            A, #'R', X2_3                           ; J
                             UMP TO AD'S THIRD CHARACTER ELSE CONTINUE 
0633 121385          769                                             CALL            LCD_SHO
0636 1212AC          770     X2_2L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
0639 3001FA          771                                             JNB                     01H, X2_2L1
063C C201            772                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                     773                                             
063E B44103          774                                             CJNE            A, #'A', X2_2L2                    
                                  ; XRA
0641 020E1E          775                                             JMP                     XRA_                       
                                                  ; JUMP TO XRA'S OPERAND CHARACTERS
0644 B449EF          776     X2_2L2:                         CJNE            A, #'I', X2_2L1                         ; X
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    19

                             RI
0647 7533EE          777                                             MOV                     33H, #0EEH                 
                                                  ; LOAD ITS 8085 INST. SET
064A 12110A          778                                             CALL            FLY_DATA                           
                                          ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
064D 0171            779                                             AJMP            MAIN2
                     780     
064F B454C1          781     X2_3:                           CJNE            A, #'T', X2_1                           ; X
                             THL ELSE CONTINUE 
                     782                                             D_STR
0658 54484C00        785                                             DB                      'THL',0
065C 7533E3          786                                             MOV                     33H, #0E3H                 
                                                  ; LOAD ITS 8085 INST. SET
065F 121153          787                                             CALL            FLY_OPCODE_SKIP                    
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0662 0171            788                                             AJMP            MAIN2
                     789     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                     790     
                     791     
                     792     ; ------------------------------------------ OPERAND CHARACTER KEY COMBINATION ------------
                             -----------------------------------------------
                     793     
                     794     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                     795     ; ***** FOR 'ADC...'
0664 121385          796     ADC_:                           CALL            LCD_SHO
0667 7420            797                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE 
0669 121385          798                                             CALL            LCD_SHO
066C 1212AC          799     ADC_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
066F 3001FA          800                                             JNB                     01H, ADC_L1
0672 C201            801                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                     802     
0674 B44105          803                                             CJNE            A, #'A', ADC_L2                    
                                  ; ADC A
0677 75338F          804                                             MOV                     33H, #8FH                  
                                                  ; LOAD ITS 8085 INST. SET
067A 8036            805                                             SJMP            ADC_L9
067C B44205          806     ADC_L2:                         CJNE            A, #'B', ADC_L3                         ; A
                             DC B
067F 753388          807                                             MOV                     33H, #88H                  
                                                  ; LOAD ITS 8085 INST. SET
0682 802E            808                                             SJMP            ADC_L9
0684 B44305          809     ADC_L3:                         CJNE            A, #'C', ADC_L4                         ; A
                             DC C
0687 753389          810                                             MOV                     33H, #89H                  
                                                  ; LOAD ITS 8085 INST. SET
068A 8026            811                                             SJMP            ADC_L9
068C B44405          812     ADC_L4:                         CJNE            A, #'D', ADC_L5                         ; A
                             DC D
068F 75338A          813                                             MOV                     33H, #8AH                  
                                                  ; LOAD ITS 8085 INST. SET
0692 801E            814                                             SJMP            ADC_L9
0694 B44505          815     ADC_L5:                         CJNE            A, #'E', ADC_L6                         ; A
                             DC E
0697 75338B          816                                             MOV                     33H, #8BH                  
                                                  ; LOAD ITS 8085 INST. SET
069A 8016            817                                             SJMP            ADC_L9
069C B44805          818     ADC_L6:                         CJNE            A, #'H', ADC_L7                         ; A
                             DC H
069F 75338C          819                                             MOV                     33H, #8CH                  
                                                  ; LOAD ITS 8085 INST. SET
06A2 800E            820                                             SJMP            ADC_L9
06A4 B44C05          821     ADC_L7:                         CJNE            A, #'L', ADC_L8                         ; A
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    20

                             DC L
06A7 75338D          822                                             MOV                     33H, #8DH                  
                                                  ; LOAD ITS 8085 INST. SET
06AA 8006            823                                             SJMP            ADC_L9
06AC B44DBD          824     ADC_L8:                         CJNE            A, #'M', ADC_L1                         ; A
                             DC M
06AF 75338E          825                                             MOV                     33H, #8EH                  
                                                  ; LOAD ITS 8085 INST. SET
                     826     
06B2 121151          827     ADC_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
06B5 0171            828                                             AJMP            MAIN2
                     829     
                     830     ; ***** FOR 'ADD...'
06B7 121385          831     ADD_:                           CALL            LCD_SHO
06BA 7420            832                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
06BC 121385          833                                             CALL            LCD_SHO
06BF 1212AC          834     ADD_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
06C2 3001FA          835                                             JNB                     01H, ADD_L1
06C5 C201            836                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                     837     
06C7 B44105          838                                             CJNE            A, #'A', ADD_L2                    
                                  ; ADD A
06CA 753387          839                                             MOV                     33H, #87H                  
                                                  ; LOAD ITS 8085 INST. SET
06CD 8036            840                                             SJMP            ADD_L9
06CF B44205          841     ADD_L2:                         CJNE            A, #'B', ADD_L3                         ; A
                             DD B
06D2 753380          842                                             MOV                     33H, #80H                  
                                                  ; LOAD ITS 8085 INST. SET
06D5 802E            843                                             SJMP            ADD_L9     
06D7 B44305          844     ADD_L3:                         CJNE            A, #'C', ADD_L4                         ; A
                             DD C
06DA 753381          845                                             MOV                     33H, #81H                  
                                                  ; LOAD ITS 8085 INST. SET
06DD 8026            846                                             SJMP            ADD_L9
06DF B44405          847     ADD_L4:                         CJNE            A, #'D', ADD_L5                         ; A
                             DD D
06E2 753382          848                                             MOV                     33H, #82H                  
                                                  ; LOAD ITS 8085 INST. SET
06E5 801E            849                                             SJMP            ADD_L9
06E7 B44505          850     ADD_L5:                         CJNE            A, #'E', ADD_L6                         ; A
                             DD E
06EA 753383          851                                             MOV                     33H, #83H                  
                                                  ; LOAD ITS 8085 INST. SET
06ED 8016            852                                             SJMP            ADD_L9
06EF B44805          853     ADD_L6:                         CJNE            A, #'H', ADD_L7                         ; A
                             DD H
06F2 753384          854                                             MOV                     33H, #84H                  
                                                  ; LOAD ITS 8085 INST. SET
06F5 800E            855                                             SJMP            ADD_L9
06F7 B44C05          856     ADD_L7:                         CJNE            A, #'L', ADD_L8                         ; A
                             DD L
06FA 753385          857                                             MOV                     33H, #85H                  
                                                  ; LOAD ITS 8085 INST. SET
06FD 8006            858                                             SJMP            ADD_L9
06FF B44DBD          859     ADD_L8:                         CJNE            A, #'M', ADD_L1                         ; A
                             DD M
0702 753386          860                                             MOV                     33H, #86H                  
                                                  ; LOAD ITS 8085 INST. SET
                     861     
0705 121151          862     ADD_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    21

0708 0171            863                                             AJMP            MAIN2
                     864     
                     865     ; ***** FOR 'ANA...'
070A 121385          866     ANA_:                           CALL            LCD_SHO
070D 7420            867                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
070F 121385          868                                             CALL            LCD_SHO
0712 1212AC          869     ANA_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0715 3001FA          870                                             JNB                     01H, ANA_L1
0718 C201            871                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                     872     
071A B44105          873                                             CJNE            A, #'A', ANA_L2                    
                                  ; ANA A
071D 7533A7          874                                             MOV                     33H, #0A7H                 
                                                  ; LOAD ITS 8085 INST. SET
0720 8036            875                                             SJMP            ANA_L9
0722 B44205          876     ANA_L2:                         CJNE            A, #'B', ANA_L3                         ; A
                             NA B
0725 7533A0          877                                             MOV                     33H, #0A0H                 
                                                  ; LOAD ITS 8085 INST. SET
0728 802E            878                                             SJMP            ANA_L9
072A B44305          879     ANA_L3:                         CJNE            A, #'C', ANA_L4                         ; A
                             NA C
072D 7533A1          880                                             MOV                     33H, #0A1H                 
                                                  ; LOAD ITS 8085 INST. SET
0730 8026            881                                             SJMP            ANA_L9
0732 B44405          882     ANA_L4:                         CJNE            A, #'D', ANA_L5                         ; A
                             NA D
0735 7533A2          883                                             MOV                     33H, #0A2H                 
                                                  ; LOAD ITS 8085 INST. SET
0738 801E            884                                             SJMP            ANA_L9
073A B44505          885     ANA_L5:                         CJNE            A, #'E', ANA_L6                         ; A
                             NA E
073D 7533A3          886                                             MOV                     33H, #0A3H                 
                                                  ; LOAD ITS 8085 INST. SET
0740 8016            887                                             SJMP            ANA_L9
0742 B44805          888     ANA_L6:                         CJNE            A, #'H', ANA_L7                         ; A
                             NA H
0745 7533A4          889                                             MOV                     33H, #0A4H                 
                                                  ; LOAD ITS 8085 INST. SET
0748 800E            890                                             SJMP            ANA_L9
074A B44C05          891     ANA_L7:                         CJNE            A, #'L', ANA_L8                         ; A
                             NA L
074D 7533A5          892                                             MOV                     33H, #0A5H                 
                                                  ; LOAD ITS 8085 INST. SET
0750 8006            893                                             SJMP            ANA_L9
0752 B44DBD          894     ANA_L8:                         CJNE            A, #'M', ANA_L1                         ; A
                             NA M
0755 7533A6          895                                             MOV                     33H, #0A6H                 
                                                  ; LOAD ITS 8085 INST. SET
                     896     
0758 121151          897     ANA_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
075B 0171            898                                             AJMP            MAIN2
                     899     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                     900     ; ***** FOR 'CMP...'
075D 121385          901     CMP_:                           CALL            LCD_SHO
0760 7420            902                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0762 121385          903                                             CALL            LCD_SHO
0765 1212AC          904     CMP_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0768 3001FA          905                                             JNB                     01H, CMP_L1
076B C201            906                                             CLR                     01H                        
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    22

                                                          ; GET READY FOR THE NEXT KEY
                     907     
076D B44105          908                                             CJNE            A, #'A', CMP_L2                    
                                  ; CMP A
0770 7533BF          909                                             MOV                     33H, #0BFH                 
                                                  ; LOAD ITS 8085 INST. SET
0773 8036            910                                             SJMP            CMP_L9
0775 B44205          911     CMP_L2:                         CJNE            A, #'B', CMP_L3                         ; C
                             MP B
0778 7533B8          912                                             MOV                     33H, #0B8H                 
                                                  ; LOAD ITS 8085 INST. SET
077B 802E            913                                             SJMP            CMP_L9
077D B44305          914     CMP_L3:                         CJNE            A, #'C', CMP_L4                         ; C
                             MP C
0780 7533B9          915                                             MOV                     33H, #0B9H                 
                                                  ; LOAD ITS 8085 INST. SET
0783 8026            916                                             SJMP            CMP_L9
0785 B44405          917     CMP_L4:                         CJNE            A, #'D', CMP_L5                         ; C
                             MP D
0788 7533BA          918                                             MOV                     33H, #0BAH                 
                                                  ; LOAD ITS 8085 INST. SET
078B 801E            919                                             SJMP            CMP_L9
078D B44505          920     CMP_L5:                         CJNE            A, #'E', CMP_L6                         ; C
                             MP E
0790 7533BB          921                                             MOV                     33H, #0BBH                 
                                                  ; LOAD ITS 8085 INST. SET
0793 8016            922                                             SJMP            CMP_L9
0795 B44805          923     CMP_L6:                         CJNE            A, #'H', CMP_L7                         ; C
                             MP H
0798 7533BC          924                                             MOV                     33H, #0BCH                 
                                                  ; LOAD ITS 8085 INST. SET
079B 800E            925                                             SJMP            CMP_L9
079D B44C05          926     CMP_L7:                         CJNE            A, #'L', CMP_L8                         ; C
                             MP L
07A0 7533BD          927                                             MOV                     33H, #0BDH                 
                                                  ; LOAD ITS 8085 INST. SET
07A3 8006            928                                             SJMP            CMP_L9
07A5 B44DBD          929     CMP_L8:                         CJNE            A, #'M', CMP_L1                         ; C
                             MP M
07A8 7533BE          930                                             MOV                     33H, #0BEH                 
                                                  ; LOAD ITS 8085 INST. SET
                     931     
07AB 121151          932     CMP_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
07AE 0171            933                                             AJMP            MAIN2
                     934     
                     935     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                     936     ; ***** FOR 'DAD...'
07B0 121385          937     DAD_:                           CALL            LCD_SHO
07B3 7420            938                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
07B5 121385          939                                             CALL            LCD_SHO
07B8 1212AC          940     DAD_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
07BB 3001FA          941                                             JNB                     01H, DAD_L1
07BE C201            942                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                     943     
07C0 B44205          944                                             CJNE            A, #'B', DAD_L2                    
                                  ; DAD B
07C3 753309          945                                             MOV                     33H, #09H                  
                                                  ; LOAD ITS 8085 INST. SET
07C6 801B            946                                             SJMP            DAD_L5
07C8 B44405          947     DAD_L2:                         CJNE            A, #'D', DAD_L3                         ; D
                             AD D
07CB 753319          948                                             MOV                     33H, #19H                  
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    23

                                                  ; LOAD ITS 8085 INST. SET
07CE 8013            949                                             SJMP            DAD_L5
07D0 B44805          950     DAD_L3:                         CJNE            A, #'H', DAD_L4                         ; D
                             AD H
07D3 753329          951                                             MOV                     33H, #29H                  
                                                  ; LOAD ITS 8085 INST. SET
07D6 800B            952                                             SJMP            DAD_L5
07D8 B453DD          953     DAD_L4:                         CJNE            A, #'S', DAD_L1                         ; D
                             AD SP
07DB 121385          954                                             CALL            LCD_SHO
07DE 7450            955                                             MOV                     A, #'P'
07E0 753339          956                                             MOV                     33H, #39H                  
                                                  ; LOAD ITS 8085 INST. SET
                     957     
07E3 121151          958     DAD_L5:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
07E6 0171            959                                             AJMP            MAIN2
                     960     
                     961     ; ***** FOR 'DCR...'
07E8 121385          962     DCR_:                           CALL            LCD_SHO
07EB 7420            963                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
07ED 121385          964                                             CALL            LCD_SHO
07F0 1212AC          965     DCR_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
07F3 3001FA          966                                             JNB                     01H, DCR_L1
07F6 C201            967                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                     968     
07F8 B44105          969                                             CJNE            A, #'A', DCR_L2                    
                                  ; DCR A
07FB 75333D          970                                             MOV                     33H, #3DH                  
                                                  ; LOAD ITS 8085 INST. SET
07FE 8036            971                                             SJMP            DCR_L9
0800 B44205          972     DCR_L2:                         CJNE            A, #'B', DCR_L3                         ; D
                             CR B
0803 753305          973                                             MOV                     33H, #05H                  
                                                  ; LOAD ITS 8085 INST. SET
0806 802E            974                                             SJMP            DCR_L9
0808 B44305          975     DCR_L3:                         CJNE            A, #'C', DCR_L4                         ; D
                             CR C
080B 75330D          976                                             MOV                     33H, #0DH                  
                                                  ; LOAD ITS 8085 INST. SET
080E 8026            977                                             SJMP            DCR_L9
0810 B44405          978     DCR_L4:                         CJNE            A, #'D', DCR_L5                         ; D
                             CR D
0813 753315          979                                             MOV                     33H, #15H                  
                                                  ; LOAD ITS 8085 INST. SET
0816 801E            980                                             SJMP            DCR_L9
0818 B44505          981     DCR_L5:                         CJNE            A, #'E', DCR_L6                         ; D
                             CR E
081B 75331D          982                                             MOV                     33H, #1DH                  
                                                  ; LOAD ITS 8085 INST. SET
081E 8016            983                                             SJMP            DCR_L9
0820 B44805          984     DCR_L6:                         CJNE            A, #'H', DCR_L7                         ; D
                             CR H
0823 753325          985                                             MOV                     33H, #25H                  
                                                  ; LOAD ITS 8085 INST. SET
0826 800E            986                                             SJMP            DCR_L9
0828 B44C05          987     DCR_L7:                         CJNE            A, #'L', DCR_L8                         ; D
                             CR L
082B 75332D          988                                             MOV                     33H, #2DH                  
                                                  ; LOAD ITS 8085 INST. SET
082E 8006            989                                             SJMP            DCR_L9
0830 B44DBD          990     DCR_L8:                         CJNE            A, #'M', DCR_L1                         ; D
                             CR M
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    24

0833 753335          991                                             MOV                     33H, #35H                  
                                                  ; LOAD ITS 8085 INST. SET
                     992     
0836 121151          993     DCR_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0839 020071          994                                             LJMP            MAIN2
                     995     
                     996     ; ***** FOR 'DCX...'
083C 121385          997     DCX_:                           CALL            LCD_SHO
083F 7420            998                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0841 121385          999                                             CALL            LCD_SHO
0844 1212AC         1000     DCX_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0847 3001FA         1001                                             JNB                     01H, DCX_L1
084A C201           1002                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1003     
084C B44205         1004                                             CJNE            A, #'B', DCX_L2                    
                                  ; DCX B
084F 75330B         1005                                             MOV                     33H, #0BH                  
                                                  ; LOAD ITS 8085 INST. SET
0852 801B           1006                                             SJMP            DCX_L5
0854 B44405         1007     DCX_L2:                         CJNE            A, #'D', DCX_L3                         ; D
                             CX D
0857 75331B         1008                                             MOV                     33H, #1BH                  
                                                  ; LOAD ITS 8085 INST. SET
085A 8013           1009                                             SJMP            DCX_L5
085C B44805         1010     DCX_L3:                         CJNE            A, #'H', DCX_L4                         ; D
                             CX H
085F 75332B         1011                                             MOV                     33H, #2BH                  
                                                  ; LOAD ITS 8085 INST. SET
0862 800B           1012                                             SJMP            DCX_L5
0864 B453DD         1013     DCX_L4:                         CJNE            A, #'S', DCX_L1                         ; D
                             CX SP
0867 121385         1014                                             CALL            LCD_SHO
086A 7450           1015                                             MOV                     A, #'P'
086C 75333B         1016                                             MOV                     33H, #3BH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1017     
086F 121151         1018     DCX_L5:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0872 020071         1019                                             LJMP            MAIN2
                    1020     
                    1021     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1022     ; ***** FOR 'INR...'
0875 121385         1023     INR_:                           CALL            LCD_SHO
0878 7420           1024                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
087A 121385         1025                                             CALL            LCD_SHO
087D 1212AC         1026     INR_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0880 3001FA         1027                                             JNB                     01H, INR_L1
0883 C201           1028                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1029     
0885 B44105         1030                                             CJNE            A, #'A', INR_L2                    
                                  ; INR A
0888 75333C         1031                                             MOV                     33H, #3CH                  
                                                  ; LOAD ITS 8085 INST. SET
088B 8036           1032                                             SJMP            INR_L9
088D B44205         1033     INR_L2:                         CJNE            A, #'B', INR_L3                         ; I
                             NR B
0890 753304         1034                                             MOV                     33H, #04H                  
                                                  ; LOAD ITS 8085 INST. SET
0893 802E           1035                                             SJMP            INR_L9
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    25

0895 B44305         1036     INR_L3:                         CJNE            A, #'C', INR_L4                         ; I
                             NR C
0898 75330C         1037                                             MOV                     33H, #0CH                  
                                                  ; LOAD ITS 8085 INST. SET
089B 8026           1038                                             SJMP            INR_L9
089D B44405         1039     INR_L4:                         CJNE            A, #'D', INR_L5                         ; I
                             NR D
08A0 753314         1040                                             MOV                     33H, #14H                  
                                                  ; LOAD ITS 8085 INST. SET
08A3 801E           1041                                             SJMP            INR_L9
08A5 B44505         1042     INR_L5:                         CJNE            A, #'E', INR_L6                         ; I
                             NR E
08A8 75331C         1043                                             MOV                     33H, #1CH                  
                                                  ; LOAD ITS 8085 INST. SET
08AB 8016           1044                                             SJMP            INR_L9
08AD B44805         1045     INR_L6:                         CJNE            A, #'H', INR_L7                         ; I
                             NR H
08B0 753324         1046                                             MOV                     33H, #24H                  
                                                  ; LOAD ITS 8085 INST. SET
08B3 800E           1047                                             SJMP            INR_L9
08B5 B44C05         1048     INR_L7:                         CJNE            A, #'L', INR_L8                         ; I
                             NR L
08B8 75332C         1049                                             MOV                     33H, #2CH                  
                                                  ; LOAD ITS 8085 INST. SET
08BB 8006           1050                                             SJMP            INR_L9
08BD B44DBD         1051     INR_L8:                         CJNE            A, #'M', INR_L1                         ; I
                             NR M
08C0 753334         1052                                             MOV                     33H, #34H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1053     
08C3 121151         1054     INR_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
08C6 020071         1055                                             LJMP            MAIN2
                    1056     
                    1057     ; ***** FOR 'INX...'
08C9 121385         1058     INX_:                           CALL            LCD_SHO
08CC 7420           1059                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
08CE 121385         1060                                             CALL            LCD_SHO
08D1 1212AC         1061     INX_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
08D4 3001FA         1062                                             JNB                     01H, INX_L1
08D7 C201           1063                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1064     
08D9 B44205         1065                                             CJNE            A, #'B', INX_L2                    
                                  ; INX B
08DC 753303         1066                                             MOV                     33H, #03H                  
                                                  ; LOAD ITS 8085 INST. SET
08DF 801B           1067                                             SJMP            INX_L5
08E1 B44405         1068     INX_L2:                         CJNE            A, #'D', INX_L3                         ; I
                             NX D
08E4 753313         1069                                             MOV                     33H, #13H                  
                                                  ; LOAD ITS 8085 INST. SET
08E7 8013           1070                                             SJMP            INX_L5
08E9 B44805         1071     INX_L3:                         CJNE            A, #'H', INX_L4                         ; I
                             NX H
08EC 753323         1072                                             MOV                     33H, #23H                  
                                                  ; LOAD ITS 8085 INST. SET
08EF 800B           1073                                             SJMP            INX_L5
08F1 B453DD         1074     INX_L4:                         CJNE            A, #'S', INX_L1                         ; I
                             NX SP
08F4 121385         1075                                             CALL            LCD_SHO
08F7 7450           1076                                             MOV                     A, #'P'
08F9 753333         1077                                             MOV                     33H, #33H                  
                                                  ; LOAD ITS 8085 INST. SET
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    26

                    1078     
08FC 121151         1079     INX_L5:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
08FF 020071         1080                                             LJMP            MAIN2
                    1081     
                    1082     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1083     ; ***** FOR 'LDAX...'
0902 121385         1084     LDAX_:                          CALL            LCD_SHO
0905 7420           1085                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0907 121385         1086                                             CALL            LCD_SHO
090A 1212AC         1087     LDAX_L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
090D 3001FA         1088                                             JNB                     01H, LDAX_L1
0910 C201           1089                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1090     
0912 B44205         1091                                             CJNE            A, #'B', LDAX_L2                   
                                  ; LDAX B
0915 75330A         1092                                             MOV                     33H, #0AH                  
                                                  ; LOAD ITS 8085 INST. SET
0918 8006           1093                                             SJMP            LDAX_L3
091A B444ED         1094     LDAX_L2:                        CJNE            A, #'D', LDAX_L1                        ; L
                             DAX D
091D 75331A         1095                                             MOV                     33H, #1AH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1096     
0920 121151         1097     LDAX_L3:                        CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0923 020071         1098                                             LJMP            MAIN2
                    1099     
                    1100     ; ***** FOR 'LXI...'
0926 121385         1101     LXI_:                           CALL            LCD_SHO
0929 7420           1102                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
092B 121385         1103                                             CALL            LCD_SHO
092E 1212AC         1104     LXI_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0931 3001FA         1105                                             JNB                     01H, LXI_L1
0934 C201           1106                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1107     
0936 B44205         1108                                             CJNE            A, #'B', LXI_L2                    
                                  ; LXI B
0939 753301         1109                                             MOV                     33H, #01H                  
                                                  ; LOAD ITS 8085 INST. SET
093C 801B           1110                                             SJMP            LXI_L5
093E B44405         1111     LXI_L2:                         CJNE            A, #'D', LXI_L3                         ; L
                             XI D
0941 753311         1112                                             MOV                     33H, #11H                  
                                                  ; LOAD ITS 8085 INST. SET
0944 8013           1113                                             SJMP            LXI_L5
0946 B44805         1114     LXI_L3:                         CJNE            A, #'H', LXI_L4                         ; L
                             XI H
0949 753321         1115                                             MOV                     33H, #21H                  
                                                  ; LOAD ITS 8085 INST. SET
094C 800B           1116                                             SJMP            LXI_L5
094E B453DD         1117     LXI_L4:                         CJNE            A, #'S', LXI_L1                         ; L
                             XI SP
0951 121385         1118                                             CALL            LCD_SHO                            
                                          ; LOAD ITS 8085 INST. SET
0954 7450           1119                                             MOV                     A, #'P'
0956 753331         1120                                             MOV                     33H, #31H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1121     
0959 121151         1122     LXI_L5:                         CALL            FLY_OPCODE                                 
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    27

                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
095C 020071         1123                                             LJMP            MAIN2
                    1124     
                    1125     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1126     ; ***** FOR 'MOV...'
095F 121385         1127     MOV_:                           CALL            LCD_SHO
0962 7420           1128                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0964 121385         1129                                             CALL            LCD_SHO
                    1130     
                    1131                                     ; -- A -- ;
0967 1212AC         1132     MOV_A:                          CALL            KEYPAD_ID                                  
                                  ; GET THE FIRST OPERAND 
096A 3001FA         1133                                             JNB                     01H, MOV_A
096D C201           1134                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1135     
096F B44156         1136                                             CJNE            A, #'A', MOV_B
                    1137                                             D_STR
0978 412C2000       1140                                             DB                      'A, ',0                    
                                                  ; MOV A,
                    1141                                                                                                
                                                          
097C 1212AC         1142     MOV_AA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
097F 3001FA         1143                                             JNB                     01H, MOV_AA
0982 C201           1144                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1145                                             
0984 B44105         1146                                             CJNE            A, #'A', MOV_AB                    
                                  ; MOV A, A
0987 75337F         1147                                             MOV                     33H, #7FH                  
                                                  ; LOAD ITS 8085 INST. SET
098A 8036           1148                                             SJMP            MOV_A_EXIT
098C B44205         1149     MOV_AB:                         CJNE            A, #'B', MOV_AC                         ; M
                             OV A, B 
098F 753378         1150                                             MOV                     33H, #78H                  
                                                  ; LOAD ITS 8085 INST. SET
0992 802E           1151                                             SJMP            MOV_A_EXIT                         
                                                                                  
0994 B44305         1152     MOV_AC:                         CJNE            A, #'C', MOV_AD                         ; M
                             OV A, C
0997 753379         1153                                             MOV                     33H, #79H                  
                                                  ; LOAD ITS 8085 INST. SET
099A 8026           1154                                             SJMP            MOV_A_EXIT                         
                                                                                  
099C B44405         1155     MOV_AD:                         CJNE            A, #'D', MOV_AE                         ; M
                             OV A, D
099F 75337A         1156                                             MOV                     33H, #7AH                  
                                                  ; LOAD ITS 8085 INST. SET
09A2 801E           1157                                             SJMP            MOV_A_EXIT                         
                                                                                  
09A4 B44505         1158     MOV_AE:                         CJNE            A, #'E', MOV_AH                         ; M
                             OV A, E
09A7 75337B         1159                                             MOV                     33H, #7BH                  
                                                  ; LOAD ITS 8085 INST. SET
09AA 8016           1160                                             SJMP            MOV_A_EXIT                         
                                                                                  
09AC B44805         1161     MOV_AH:                         CJNE            A, #'H', MOV_AL                         ; M
                             OV A, H
09AF 75337C         1162                                             MOV                     33H, #7CH                  
                                                  ; LOAD ITS 8085 INST. SET
09B2 800E           1163                                             SJMP            MOV_A_EXIT                         
                                                                                  
09B4 B44C05         1164     MOV_AL:                         CJNE            A, #'L', MOV_AM                         ; M
                             OV A, L
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    28

09B7 75337D         1165                                             MOV                     33H, #7DH                  
                                                  ; LOAD ITS 8085 INST. SET
09BA 8006           1166                                             SJMP            MOV_A_EXIT                         
                                                                                  
09BC B44DBD         1167     MOV_AM:                         CJNE            A, #'M', MOV_AA                         ; M
                             OV A, M
09BF 75337E         1168                                             MOV                     33H, #7EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1169     
09C2 121151         1170     MOV_A_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
09C5 020071         1171                                             LJMP            MAIN2
                    1172     
                    1173                                     ; -- B -- ;
09C8 B44256         1174     MOV_B:                          CJNE            A, #'B', MOV_C
                    1175                                             D_STR
09D1 422C2000       1178                                             DB                      'B, ',0                    
                                                  ; MOV B,
                    1179     
09D5 1212AC         1180     MOV_BA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
09D8 3001FA         1181                                             JNB                     01H, MOV_BA
09DB C201           1182                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1183                                             
09DD B44105         1184                                             CJNE            A, #'A', MOV_BB                    
                                  ; MOV B, A
09E0 753347         1185                                             MOV                     33H, #47H                  
                                                  ; LOAD ITS 8085 INST. SET
09E3 80DD           1186                                             SJMP            MOV_A_EXIT
09E5 B44205         1187     MOV_BB:                         CJNE            A, #'B', MOV_BC                         ; M
                             OV B, B
09E8 753340         1188                                             MOV                     33H, #40H                  
                                                  ; LOAD ITS 8085 INST. SET
09EB 80D5           1189                                             SJMP            MOV_A_EXIT                         
                                                                                  
09ED B44305         1190     MOV_BC:                         CJNE            A, #'C', MOV_BD                         ; M
                             OV B, C
09F0 753341         1191                                             MOV                     33H, #41H                  
                                                  ; LOAD ITS 8085 INST. SET
09F3 80CD           1192                                             SJMP            MOV_A_EXIT                         
                                                                                  
09F5 B44405         1193     MOV_BD:                         CJNE            A, #'D', MOV_BE                         ; M
                             OV B, D
09F8 753342         1194                                             MOV                     33H, #42H                  
                                                  ; LOAD ITS 8085 INST. SET
09FB 80C5           1195                                             SJMP            MOV_A_EXIT                         
                                                                                  
09FD B44505         1196     MOV_BE:                         CJNE            A, #'E', MOV_BH                         ; M
                             OV B, E
0A00 753343         1197                                             MOV                     33H, #43H                  
                                                  ; LOAD ITS 8085 INST. SET
0A03 80BD           1198                                             SJMP            MOV_A_EXIT                         
                                                                                  
0A05 B44805         1199     MOV_BH:                         CJNE            A, #'H', MOV_BL                         ; M
                             OV B, H
0A08 753344         1200                                             MOV                     33H, #44H                  
                                                  ; LOAD ITS 8085 INST. SET
0A0B 80B5           1201                                             SJMP            MOV_A_EXIT                         
                                                                                  
0A0D B44C05         1202     MOV_BL:                         CJNE            A, #'L', MOV_BM                         ; M
                             OV B, L
0A10 753345         1203                                             MOV                     33H, #45H                  
                                                  ; LOAD ITS 8085 INST. SET
0A13 80AD           1204                                             SJMP            MOV_A_EXIT                         
                                                                                  
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    29

0A15 B44DBD         1205     MOV_BM:                         CJNE            A, #'M', MOV_BA                         ; M
                             OV B, M
0A18 753346         1206                                             MOV                     33H, #46H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1207     
0A1B 121151         1208     MOV_B_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0A1E 020071         1209                                             LJMP            MAIN2
                    1210     
                    1211                                     ; -- C -- ;
0A21 B44356         1212     MOV_C:                          CJNE            A, #'C', MOV_D
                    1213                                             D_STR
0A2A 432C2000       1216                                             DB                      'C, ',0                    
                                                  ; MOV C,
                    1217     
0A2E 1212AC         1218     MOV_CA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0A31 3001FA         1219                                             JNB                     01H, MOV_CA
0A34 C201           1220                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1221                                             
0A36 B44105         1222                                             CJNE            A, #'A', MOV_CB                    
                                  ; MOV C, A
0A39 75334F         1223                                             MOV                     33H, #4FH                  
                                                  ; LOAD ITS 8085 INST. SET
0A3C 8036           1224                                             SJMP            MOV_C_EXIT
0A3E B44205         1225     MOV_CB:                         CJNE            A, #'B', MOV_CC                         ; M
                             OV C, B
0A41 753348         1226                                             MOV                     33H, #48H                  
                                                  ; LOAD ITS 8085 INST. SET
0A44 802E           1227                                             SJMP            MOV_C_EXIT                         
                                                                                  
0A46 B44305         1228     MOV_CC:                         CJNE            A, #'C', MOV_CD                         ; M
                             OV C, C
0A49 753349         1229                                             MOV                     33H, #49H                  
                                                  ; LOAD ITS 8085 INST. SET
0A4C 8026           1230                                             SJMP            MOV_C_EXIT                         
                                                                                  
0A4E B44405         1231     MOV_CD:                         CJNE            A, #'D', MOV_CE                         ; M
                             OV C, D
0A51 75334A         1232                                             MOV                     33H, #4AH                  
                                                  ; LOAD ITS 8085 INST. SET
0A54 801E           1233                                             SJMP            MOV_C_EXIT                         
                                                                                  
0A56 B44505         1234     MOV_CE:                         CJNE            A, #'E', MOV_CH                         ; M
                             OV C, E
0A59 75334B         1235                                             MOV                     33H, #4BH                  
                                                  ; LOAD ITS 8085 INST. SET
0A5C 8016           1236                                             SJMP            MOV_C_EXIT                         
                                                                                  
0A5E B44805         1237     MOV_CH:                         CJNE            A, #'H', MOV_CL                         ; M
                             OV C, H
0A61 75334C         1238                                             MOV                     33H, #4CH                  
                                                  ; LOAD ITS 8085 INST. SET
0A64 800E           1239                                             SJMP            MOV_C_EXIT                         
                                                                                  
0A66 B44C05         1240     MOV_CL:                         CJNE            A, #'L', MOV_CM                         ; M
                             OV C, L
0A69 75334D         1241                                             MOV                     33H, #4DH                  
                                                  ; LOAD ITS 8085 INST. SET
0A6C 8006           1242                                             SJMP            MOV_C_EXIT                         
                                                                                  
0A6E B44DBD         1243     MOV_CM:                         CJNE            A, #'M', MOV_CA                         ; M
                             OV C, M
0A71 75334E         1244                                             MOV                     33H, #4EH                  
                                                  ; LOAD ITS 8085 INST. SET
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    30

                    1245     
0A74 121151         1246     MOV_C_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0A77 020071         1247                                             LJMP            MAIN2
                    1248     
                    1249                                     ; -- D -- ;
0A7A B44456         1250     MOV_D:                          CJNE            A, #'D', MOV_E
                    1251                                             D_STR
0A83 442C2000       1254                                             DB                      'D, ',0                    
                                                  ; MOV D, 
                    1255     
0A87 1212AC         1256     MOV_DA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0A8A 3001FA         1257                                             JNB                     01H, MOV_DA
0A8D C201           1258                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1259                                             
0A8F B44105         1260                                             CJNE            A, #'A', MOV_DB                    
                                  ; MOV D, A
0A92 753357         1261                                             MOV                     33H, #57H                  
                                                  ; LOAD ITS 8085 INST. SET
0A95 8036           1262                                             SJMP            MOV_D_EXIT
0A97 B44205         1263     MOV_DB:                         CJNE            A, #'B', MOV_DC                         ; M
                             OV D, B
0A9A 753350         1264                                             MOV                     33H, #50H                  
                                                  ; LOAD ITS 8085 INST. SET
0A9D 802E           1265                                             SJMP            MOV_D_EXIT                         
                                                                                  
0A9F B44305         1266     MOV_DC:                         CJNE            A, #'C', MOV_DD                         ; M
                             OV D, C
0AA2 753351         1267                                             MOV                     33H, #51H                  
                                                  ; LOAD ITS 8085 INST. SET
0AA5 8026           1268                                             SJMP            MOV_D_EXIT                         
                                                                                  
0AA7 B44405         1269     MOV_DD:                         CJNE            A, #'D', MOV_DE                         ; M
                             OV D, D
0AAA 753352         1270                                             MOV                     33H, #52H                  
                                                  ; LOAD ITS 8085 INST. SET
0AAD 801E           1271                                             SJMP            MOV_D_EXIT                         
                                                                                  
0AAF B44505         1272     MOV_DE:                         CJNE            A, #'E', MOV_DH                         ; M
                             OV D, E
0AB2 753353         1273                                             MOV                     33H, #53H                  
                                                  ; LOAD ITS 8085 INST. SET
0AB5 8016           1274                                             SJMP            MOV_D_EXIT                         
                                                                                  
0AB7 B44805         1275     MOV_DH:                         CJNE            A, #'H', MOV_DL                         ; M
                             OV D, H
0ABA 753354         1276                                             MOV                     33H, #54H                  
                                                  ; LOAD ITS 8085 INST. SET
0ABD 800E           1277                                             SJMP            MOV_D_EXIT                         
                                                                                  
0ABF B44C05         1278     MOV_DL:                         CJNE            A, #'L', MOV_DM                         ; M
                             OV D, L
0AC2 753355         1279                                             MOV                     33H, #55H                  
                                                  ; LOAD ITS 8085 INST. SET
0AC5 8006           1280                                             SJMP            MOV_D_EXIT                         
                                                                                  
0AC7 B44DBD         1281     MOV_DM:                         CJNE            A, #'M', MOV_DA                         ; M
                             OV D, M
0ACA 753356         1282                                             MOV                     33H, #56H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1283     
0ACD 121151         1284     MOV_D_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0AD0 020071         1285                                             LJMP            MAIN2
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    31

                    1286     
                    1287                                     ; -- E -- ;
0AD3 B44556         1288     MOV_E:                          CJNE            A, #'E', MOV_H
                    1289                                             D_STR
0ADC 452C2000       1292                                             DB                      'E, ',0                    
                                                  ; MOV E, 
                    1293     
0AE0 1212AC         1294     MOV_EA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0AE3 3001FA         1295                                             JNB                     01H, MOV_EA
0AE6 C201           1296                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1297                                             
0AE8 B44105         1298                                             CJNE            A, #'A', MOV_EB                    
                                  ; MOV E, A
0AEB 75335F         1299                                             MOV                     33H, #5FH                  
                                                  ; LOAD ITS 8085 INST. SET
0AEE 8036           1300                                             SJMP            MOV_E_EXIT
0AF0 B44205         1301     MOV_EB:                         CJNE            A, #'B', MOV_EC                         ; M
                             OV E, B
0AF3 753358         1302                                             MOV                     33H, #58H                  
                                                  ; LOAD ITS 8085 INST. SET
0AF6 802E           1303                                             SJMP            MOV_E_EXIT                         
                                                                                  
0AF8 B44305         1304     MOV_EC:                         CJNE            A, #'C', MOV_ED                         ; M
                             OV E, C
0AFB 753359         1305                                             MOV                     33H, #59H                  
                                                  ; LOAD ITS 8085 INST. SET
0AFE 8026           1306                                             SJMP            MOV_E_EXIT                         
                                                                                  
0B00 B44405         1307     MOV_ED:                         CJNE            A, #'D', MOV_EE                         ; M
                             OV E, D
0B03 75335A         1308                                             MOV                     33H, #5AH                  
                                                  ; LOAD ITS 8085 INST. SET
0B06 801E           1309                                             SJMP            MOV_E_EXIT                         
                                                                                  
0B08 B44505         1310     MOV_EE:                         CJNE            A, #'E', MOV_EH                         ; M
                             OV E, E
0B0B 75335B         1311                                             MOV                     33H, #5BH                  
                                                  ; LOAD ITS 8085 INST. SET
0B0E 8016           1312                                             SJMP            MOV_E_EXIT                         
                                                                                  
0B10 B44805         1313     MOV_EH:                         CJNE            A, #'H', MOV_EL                         ; M
                             OV E, H
0B13 75335C         1314                                             MOV                     33H, #5CH                  
                                                  ; LOAD ITS 8085 INST. SET
0B16 800E           1315                                             SJMP            MOV_E_EXIT                         
                                                                                  
0B18 B44C05         1316     MOV_EL:                         CJNE            A, #'L', MOV_EM                         ; M
                             OV E, L
0B1B 75335D         1317                                             MOV                     33H, #5DH                  
                                                  ; LOAD ITS 8085 INST. SET
0B1E 8006           1318                                             SJMP            MOV_E_EXIT                         
                                                                                  
0B20 B44DBD         1319     MOV_EM:                         CJNE            A, #'M', MOV_EA                         ; M
                             OV E, M
0B23 75335E         1320                                             MOV                     33H, #5EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1321     
0B26 121151         1322     MOV_E_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0B29 020071         1323                                             LJMP            MAIN2
                    1324     
                    1325                                     ; -- H -- ;
0B2C B44856         1326     MOV_H:                          CJNE            A, #'H', MOV_L
                    1327                                             D_STR
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    32

0B35 482C2000       1330                                             DB                      'H, ',0                    
                                                  ; MOV H, 
                    1331     
0B39 1212AC         1332     MOV_HA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND
0B3C 3001FA         1333                                             JNB                     01H, MOV_HA
0B3F C201           1334                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1335                                             
0B41 B44105         1336                                             CJNE            A, #'A', MOV_HB                    
                                  ; MOV H, A
0B44 753367         1337                                             MOV                     33H, #67H                  
                                                  ; LOAD ITS 8085 INST. SET
0B47 8036           1338                                             SJMP            MOV_H_EXIT
0B49 B44205         1339     MOV_HB:                         CJNE            A, #'B', MOV_HC                         ; M
                             OV H, B
0B4C 753360         1340                                             MOV                     33H, #60H                  
                                                  ; LOAD ITS 8085 INST. SET
0B4F 802E           1341                                             SJMP            MOV_H_EXIT                         
                                                                                  
0B51 B44305         1342     MOV_HC:                         CJNE            A, #'C', MOV_HD                         ; M
                             OV H, C
0B54 753361         1343                                             MOV                     33H, #61H                  
                                                  ; LOAD ITS 8085 INST. SET
0B57 8026           1344                                             SJMP            MOV_H_EXIT                         
                                                                                  
0B59 B44405         1345     MOV_HD:                         CJNE            A, #'D', MOV_HE                         ; M
                             OV H, D
0B5C 753362         1346                                             MOV                     33H, #62H                  
                                                  ; LOAD ITS 8085 INST. SET
0B5F 801E           1347                                             SJMP            MOV_H_EXIT                         
                                                                                  
0B61 B44505         1348     MOV_HE:                         CJNE            A, #'E', MOV_HH                         ; M
                             OV H, E
0B64 753363         1349                                             MOV                     33H, #63H                  
                                                  ; LOAD ITS 8085 INST. SET
0B67 8016           1350                                             SJMP            MOV_H_EXIT                         
                                                                                  
0B69 B44805         1351     MOV_HH:                         CJNE            A, #'H', MOV_HL                         ; M
                             OV H, H
0B6C 753364         1352                                             MOV                     33H, #64H                  
                                                  ; LOAD ITS 8085 INST. SET
0B6F 800E           1353                                             SJMP            MOV_H_EXIT                         
                                                                                  
0B71 B44C05         1354     MOV_HL:                         CJNE            A, #'L', MOV_HM                         ; M
                             OV H, L
0B74 753365         1355                                             MOV                     33H, #65H                  
                                                  ; LOAD ITS 8085 INST. SET
0B77 8006           1356                                             SJMP            MOV_H_EXIT                         
                                                                                  
0B79 B44DBD         1357     MOV_HM:                         CJNE            A, #'M', MOV_HA                         ; M
                             OV H, M
0B7C 753366         1358                                             MOV                     33H, #66H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1359     
0B7F 121151         1360     MOV_H_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0B82 020071         1361                                             LJMP            MAIN2
                    1362     
                    1363                                     ; -- L -- ;
0B85 B44C56         1364     MOV_L:                          CJNE            A, #'L', MOV_M
                    1365                                             D_STR
0B8E 4C2C2000       1368                                             DB                      'L, ',0                    
                                                  ; MOV L, 
                    1369     
0B92 1212AC         1370     MOV_LA:                         CALL            KEYPAD_ID                                  
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    33

                                  ; GET THE SECOND OPERAND
0B95 3001FA         1371                                             JNB                     01H, MOV_LA
0B98 C201           1372                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1373                                             
0B9A B44105         1374                                             CJNE            A, #'A', MOV_LB                    
                                  ; MOV L, A
0B9D 75336F         1375                                             MOV                     33H, #6FH                  
                                                  ; LOAD ITS 8085 INST. SET
0BA0 8036           1376                                             SJMP            MOV_L_EXIT
0BA2 B44205         1377     MOV_LB:                         CJNE            A, #'B', MOV_LC                         ; M
                             OV L, B
0BA5 753368         1378                                             MOV                     33H, #68H                  
                                                  ; LOAD ITS 8085 INST. SET
0BA8 802E           1379                                             SJMP            MOV_L_EXIT                         
                                                                                  
0BAA B44305         1380     MOV_LC:                         CJNE            A, #'C', MOV_LD                         ; M
                             OV L, C
0BAD 753369         1381                                             MOV                     33H, #69H                  
                                                  ; LOAD ITS 8085 INST. SET
0BB0 8026           1382                                             SJMP            MOV_L_EXIT                         
                                                                                  
0BB2 B44405         1383     MOV_LD:                         CJNE            A, #'D', MOV_LE                         ; M
                             OV L, D
0BB5 75336A         1384                                             MOV                     33H, #6AH                  
                                                  ; LOAD ITS 8085 INST. SET
0BB8 801E           1385                                             SJMP            MOV_L_EXIT                         
                                                                                  
0BBA B44505         1386     MOV_LE:                         CJNE            A, #'E', MOV_LH                         ; M
                             OV L, E
0BBD 75336B         1387                                             MOV                     33H, #6BH                  
                                                  ; LOAD ITS 8085 INST. SET
0BC0 8016           1388                                             SJMP            MOV_L_EXIT                         
                                                                                  
0BC2 B44805         1389     MOV_LH:                         CJNE            A, #'H', MOV_LL                         ; M
                             OV L, H
0BC5 75336C         1390                                             MOV                     33H, #6CH                  
                                                  ; LOAD ITS 8085 INST. SET
0BC8 800E           1391                                             SJMP            MOV_L_EXIT                         
                                                                                  
0BCA B44C05         1392     MOV_LL:                         CJNE            A, #'L', MOV_LM                         ; M
                             OV L, L
0BCD 75336D         1393                                             MOV                     33H, #6DH                  
                                                  ; LOAD ITS 8085 INST. SET
0BD0 8006           1394                                             SJMP            MOV_L_EXIT                         
                                                                                  
0BD2 B44DBD         1395     MOV_LM:                         CJNE            A, #'M', MOV_LA                         ; M
                             OV L, M
0BD5 75336E         1396                                             MOV                     33H, #6EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1397     
0BD8 121151         1398     MOV_L_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0BDB 020071         1399                                             LJMP            MAIN2
                    1400     
                    1401                                     ; -- M -- ;
0BDE B44D4E         1402     MOV_M:                          CJNE            A, #'M', MOV_A_EXTRA            ; I PLACED 
                             THIS INSTRUCTION DUE TO OUT OF RANGE ERROR
                    1403                                             D_STR                                              
                                                          
0BE7 4D2C2000       1406                                             DB                      'M, ',0                    
                                                  ; MOV M, 
                    1407     
0BEB 1212AC         1408     MOV_MA:                         CALL            KEYPAD_ID                                  
                                  ; GET THE SECOND OPERAND 
0BEE 3001FA         1409                                             JNB                     01H, MOV_MA
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    34

0BF1 C201           1410                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1411                                             
0BF3 B44105         1412                                             CJNE            A, #'A', MOV_MB                    
                                  ; MOV M, A
0BF6 753377         1413                                             MOV                     33H, #77H                  
                                                  ; LOAD ITS 8085 INST. SET
0BF9 802E           1414                                             SJMP            MOV_M_EXIT
0BFB B44205         1415     MOV_MB:                         CJNE            A, #'B', MOV_MC                         ; M
                             OV M, B
0BFE 753370         1416                                             MOV                     33H, #70H                  
                                                  ; LOAD ITS 8085 INST. SET
0C01 8026           1417                                             SJMP            MOV_M_EXIT                         
                                                                                  
0C03 B44305         1418     MOV_MC:                         CJNE            A, #'C', MOV_MD                         ; M
                             OV M, C
0C06 753371         1419                                             MOV                     33H, #71H                  
                                                  ; LOAD ITS 8085 INST. SET
0C09 801E           1420                                             SJMP            MOV_M_EXIT                         
                                                                                  
0C0B B44405         1421     MOV_MD:                         CJNE            A, #'D', MOV_ME                         ; M
                             OV M, D
0C0E 753372         1422                                             MOV                     33H, #72H                  
                                                  ; LOAD ITS 8085 INST. SET
0C11 8016           1423                                             SJMP            MOV_M_EXIT                         
                                                                                  
0C13 B44505         1424     MOV_ME:                         CJNE            A, #'E', MOV_MH                         ; M
                             OV M, E
0C16 753373         1425                                             MOV                     33H, #73H                  
                                                  ; LOAD ITS 8085 INST. SET
0C19 800E           1426                                             SJMP            MOV_M_EXIT                         
                                                                                  
0C1B B44805         1427     MOV_MH:                         CJNE            A, #'H', MOV_ML                         ; M
                             OV M, H
0C1E 753374         1428                                             MOV                     33H, #74H                  
                                                  ; LOAD ITS 8085 INST. SET
0C21 8006           1429                                             SJMP            MOV_M_EXIT                         
                                                                                  
0C23 B44CC5         1430     MOV_ML:                         CJNE            A, #'L', MOV_MA                         ; M
                             OV M, L
0C26 753375         1431                                             MOV                     33H, #75H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1432                                                                                                
                                                          ; NOTICE THAT THERE IS NO INSTRUCTION LIKE 'MOV M, M'
0C29 121151         1433     MOV_M_EXIT:                     CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0C2C 020071         1434                                             LJMP            MAIN2
                    1435     
0C2F 2167           1436     MOV_A_EXTRA:            AJMP            MOV_A                                           ; T
                             HIS INST. WAS TO THE EFFECT OF OUT OF RANGE ERROR
                    1437     
                    1438     ; ***** FOR 'MVI...'
0C31 121385         1439     MVI_:                           CALL            LCD_SHO
0C34 7420           1440                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0C36 121385         1441                                             CALL            LCD_SHO
0C39 1212AC         1442     MVI_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0C3C 3001FA         1443                                             JNB                     01H, MVI_L1
0C3F C201           1444                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1445     
0C41 B44105         1446                                             CJNE            A, #'A', MVI_L2                    
                                  ; MVI A
0C44 75333E         1447                                             MOV                     33H, #3EH                  
                                                  ; LOAD ITS 8085 INST. SET
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    35

0C47 8036           1448                                             SJMP            MVI_L9
0C49 B44205         1449     MVI_L2:                         CJNE            A, #'B', MVI_L3                         ; M
                             VI B
0C4C 753306         1450                                             MOV                     33H, #06H                  
                                                  ; LOAD ITS 8085 INST. SET
0C4F 802E           1451                                             SJMP            MVI_L9
0C51 B44305         1452     MVI_L3:                         CJNE            A, #'C', MVI_L4                         ; M
                             VI C
0C54 75330E         1453                                             MOV                     33H, #0EH                  
                                                  ; LOAD ITS 8085 INST. SET
0C57 8026           1454                                             SJMP            MVI_L9
0C59 B44405         1455     MVI_L4:                         CJNE            A, #'D', MVI_L5                         ; M
                             VI D
0C5C 753316         1456                                             MOV                     33H, #16H                  
                                                  ; LOAD ITS 8085 INST. SET
0C5F 801E           1457                                             SJMP            MVI_L9
0C61 B44505         1458     MVI_L5:                         CJNE            A, #'E', MVI_L6                         ; M
                             VI E
0C64 75331E         1459                                             MOV                     33H, #1EH                  
                                                  ; LOAD ITS 8085 INST. SET
0C67 8016           1460                                             SJMP            MVI_L9
0C69 B44805         1461     MVI_L6:                         CJNE            A, #'H', MVI_L7                         ; M
                             VI H
0C6C 753326         1462                                             MOV                     33H, #26H                  
                                                  ; LOAD ITS 8085 INST. SET
0C6F 800E           1463                                             SJMP            MVI_L9
0C71 B44C05         1464     MVI_L7:                         CJNE            A, #'L', MVI_L8                         ; M
                             VI L
0C74 75332E         1465                                             MOV                     33H, #2EH                  
                                                  ; LOAD ITS 8085 INST. SET
0C77 8006           1466                                             SJMP            MVI_L9
0C79 B44DBD         1467     MVI_L8:                         CJNE            A, #'M', MVI_L1                         ; M
                             VI M
0C7C 753336         1468                                             MOV                     33H, #36H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1469     
0C7F 12110A         1470     MVI_L9:                         CALL            FLY_DATA                                   
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE DATA OPERAND IN-TAKE
0C82 020071         1471                                             LJMP            MAIN2
                    1472     
                    1473     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1474     ; ***** FOR 'ORA...'
0C85 121385         1475     ORA_:                           CALL            LCD_SHO
0C88 7420           1476                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0C8A 121385         1477                                             CALL            LCD_SHO
0C8D 1212AC         1478     ORA_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0C90 3001FA         1479                                             JNB                     01H, ORA_L1
0C93 C201           1480                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1481     
0C95 B44105         1482                                             CJNE            A, #'A', ORA_L2                    
                                  ; ORA A
0C98 7533B7         1483                                             MOV                     33H, #0B7H                 
                                                  ; LOAD ITS 8085 INST. SET
0C9B 8036           1484                                             SJMP            ORA_L9
0C9D B44205         1485     ORA_L2:                         CJNE            A, #'B', ORA_L3                         ; O
                             RA B
0CA0 7533B0         1486                                             MOV                     33H, #0B0H                 
                                                  ; LOAD ITS 8085 INST. SET
0CA3 802E           1487                                             SJMP            ORA_L9
0CA5 B44305         1488     ORA_L3:                         CJNE            A, #'C', ORA_L4                         ; O
                             RA C
0CA8 7533B1         1489                                             MOV                     33H, #0B1H                 
                                                  ; LOAD ITS 8085 INST. SET
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    36

0CAB 8026           1490                                             SJMP            ORA_L9
0CAD B44405         1491     ORA_L4:                         CJNE            A, #'D', ORA_L5                         ; O
                             RA D
0CB0 7533B2         1492                                             MOV                     33H, #0B2H                 
                                                  ; LOAD ITS 8085 INST. SET
0CB3 801E           1493                                             SJMP            ORA_L9
0CB5 B44505         1494     ORA_L5:                         CJNE            A, #'E', ORA_L6                         ; O
                             RA E
0CB8 7533B3         1495                                             MOV                     33H, #0B3H                 
                                                  ; LOAD ITS 8085 INST. SET
0CBB 8016           1496                                             SJMP            ORA_L9
0CBD B44805         1497     ORA_L6:                         CJNE            A, #'H', ORA_L7                         ; O
                             RA H
0CC0 7533B4         1498                                             MOV                     33H, #0B4H                 
                                                  ; LOAD ITS 8085 INST. SET
0CC3 800E           1499                                             SJMP            ORA_L9
0CC5 B44C05         1500     ORA_L7:                         CJNE            A, #'L', ORA_L8                         ; O
                             RA L
0CC8 7533B5         1501                                             MOV                     33H, #0B5H                 
                                                  ; LOAD ITS 8085 INST. SET
0CCB 8006           1502                                             SJMP            ORA_L9
0CCD B44DBD         1503     ORA_L8:                         CJNE            A, #'M', ORA_L1                         ; O
                             RA M
0CD0 7533B6         1504                                             MOV                     33H, #0B6H                 
                                                  ; LOAD ITS 8085 INST. SET
                    1505     
0CD3 121151         1506     ORA_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0CD6 020071         1507                                             LJMP            MAIN2
                    1508     
                    1509     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1510     ; ***** FOR 'POP...'
0CD9 121385         1511     POP_:                           CALL            LCD_SHO
0CDC 7420           1512                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0CDE 121385         1513                                             CALL            LCD_SHO
0CE1 1212AC         1514     POP_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0CE4 3001FA         1515                                             JNB                     01H, POP_L1
0CE7 C201           1516                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1517     
0CE9 B44205         1518                                             CJNE            A, #'B', POP_L2                    
                                  ; POP B
0CEC 7533C1         1519                                             MOV                     33H, #0C1H                 
                                                  ; LOAD ITS 8085 INST. SET
0CEF 8020           1520                                             SJMP            POP_L5
0CF1 B44405         1521     POP_L2:                         CJNE            A, #'D', POP_L3                         ; P
                             OP D
0CF4 7533D1         1522                                             MOV                     33H, #0D1H                 
                                                  ; LOAD ITS 8085 INST. SET
0CF7 8018           1523                                             SJMP            POP_L5
0CF9 B44805         1524     POP_L3:                         CJNE            A, #'H', POP_L4                         ; P
                             OP H
0CFC 7533E1         1525                                             MOV                     33H, #0E1H                 
                                                  ; LOAD ITS 8085 INST. SET
0CFF 8010           1526                                             SJMP            POP_L5
0D01 B450DD         1527     POP_L4:                         CJNE            A, #'P', POP_L1                         ; P
                             OP PSW
                    1528                                             D_STR
0D0A 50535700       1531                                             DB                      'PSW',0
0D0E 7533F1         1532                                             MOV                     33H, #0F1H                 
                                                  ; LOAD ITS 8085 INST. SET
                    1533     
0D11 121153         1534     POP_L5:                         CALL            FLY_OPCODE_SKIP                         ; C
                             ALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    37

0D14 020071         1535                                             LJMP            MAIN2
                    1536     
                    1537     ; ***** FOR 'PUSH...'
0D17 7420           1538     PUSH_:                          MOV                     A, #' '                            
                                      ; GIVE SPACE
0D19 121385         1539                                             CALL            LCD_SHO
0D1C 1212AC         1540     PUSH_L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0D1F 3001FA         1541                                             JNB                     01H, PUSH_L1
0D22 C201           1542                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1543     
0D24 B44205         1544                                             CJNE            A, #'B', PUSH_L2                   
                                  ; PUSH B
0D27 7533C5         1545                                             MOV                     33H, #0C5H                 
                                                  ; LOAD ITS 8085 INST. SET
0D2A 8020           1546                                             SJMP            PUSH_L5
0D2C B44405         1547     PUSH_L2:                        CJNE            A, #'D', PUSH_L3                        ; P
                             USH D
0D2F 7533D5         1548                                             MOV                     33H, #0D5H                 
                                                  ; LOAD ITS 8085 INST. SET
0D32 8018           1549                                             SJMP            PUSH_L5
0D34 B44805         1550     PUSH_L3:                        CJNE            A, #'H', PUSH_L4                        ; P
                             USH H
0D37 7533E5         1551                                             MOV                     33H, #0E5H                 
                                                  ; LOAD ITS 8085 INST. SET
0D3A 8010           1552                                             SJMP            PUSH_L5
0D3C B450DD         1553     PUSH_L4:                        CJNE            A, #'P', PUSH_L1                        ; P
                             USH PSW
                    1554                                             D_STR
0D45 50535700       1557                                             DB                      'PSW',0
0D49 7533F5         1558                                             MOV                     33H, #0F5H                 
                                                  ; LOAD ITS 8085 INST. SET
                    1559     
0D4C 121153         1560     PUSH_L5:                        CALL            FLY_OPCODE_SKIP                         ; C
                             ALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0D4F 020071         1561                                             LJMP            MAIN2
                    1562     
                    1563     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1564     ; ***** FOR 'SBB...'
0D52 121385         1565     SBB_:                           CALL            LCD_SHO
0D55 7420           1566                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0D57 121385         1567                                             CALL            LCD_SHO
0D5A 1212AC         1568     SBB_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0D5D 3001FA         1569                                             JNB                     01H, SBB_L1
0D60 C201           1570                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1571     
0D62 B44105         1572                                             CJNE            A, #'A', SBB_L2                    
                                  ; SBB A
0D65 75339F         1573                                             MOV                     33H, #9FH                  
                                                  ; LOAD ITS 8085 INST. SET
0D68 8036           1574                                             SJMP            SBB_L9
0D6A B44205         1575     SBB_L2:                         CJNE            A, #'B', SBB_L3                         ; S
                             BB B
0D6D 753398         1576                                             MOV                     33H, #98H                  
                                                  ; LOAD ITS 8085 INST. SET
0D70 802E           1577                                             SJMP            SBB_L9
0D72 B44305         1578     SBB_L3:                         CJNE            A, #'C', SBB_L4                         ; S
                             BB C
0D75 753399         1579                                             MOV                     33H, #99H                  
                                                  ; LOAD ITS 8085 INST. SET
0D78 8026           1580                                             SJMP            SBB_L9
0D7A B44405         1581     SBB_L4:                         CJNE            A, #'D', SBB_L5                         ; S
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    38

                             BB D
0D7D 75339A         1582                                             MOV                     33H, #9AH                  
                                                  ; LOAD ITS 8085 INST. SET
0D80 801E           1583                                             SJMP            SBB_L9
0D82 B44505         1584     SBB_L5:                         CJNE            A, #'E', SBB_L6                         ; S
                             BB E
0D85 75339B         1585                                             MOV                     33H, #9BH                  
                                                  ; LOAD ITS 8085 INST. SET
0D88 8016           1586                                             SJMP            SBB_L9
0D8A B44805         1587     SBB_L6:                         CJNE            A, #'H', SBB_L7                         ; S
                             BB H
0D8D 75339C         1588                                             MOV                     33H, #9CH                  
                                                  ; LOAD ITS 8085 INST. SET
0D90 800E           1589                                             SJMP            SBB_L9
0D92 B44C05         1590     SBB_L7:                         CJNE            A, #'L', SBB_L8                         ; S
                             BB L
0D95 75339D         1591                                             MOV                     33H, #9DH                  
                                                  ; LOAD ITS 8085 INST. SET
0D98 8006           1592                                             SJMP            SBB_L9
0D9A B44DBD         1593     SBB_L8:                         CJNE            A, #'M', SBB_L1                         ; S
                             BB M
0D9D 75339E         1594                                             MOV                     33H, #9EH                  
                                                  ; LOAD ITS 8085 INST. SET
                    1595     
0DA0 121151         1596     SBB_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0DA3 020071         1597                                             LJMP            MAIN2
                    1598     
                    1599     ; ***** FOR 'SUB...'
0DA6 121385         1600     SUB_:                           CALL            LCD_SHO
0DA9 7420           1601                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0DAB 121385         1602                                             CALL            LCD_SHO
0DAE 1212AC         1603     SUB_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0DB1 3001FA         1604                                             JNB                     01H, SUB_L1
0DB4 C201           1605                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1606     
0DB6 B44105         1607                                             CJNE            A, #'A', SUB_L2                    
                                  ; SUB A
0DB9 753397         1608                                             MOV                     33H, #97H                  
                                                  ; LOAD ITS 8085 INST. SET
0DBC 8036           1609                                             SJMP            SUB_L9
0DBE B44205         1610     SUB_L2:                         CJNE            A, #'B', SUB_L3                         ; S
                             UB B
0DC1 753390         1611                                             MOV                     33H, #90H                  
                                                  ; LOAD ITS 8085 INST. SET
0DC4 802E           1612                                             SJMP            SUB_L9
0DC6 B44305         1613     SUB_L3:                         CJNE            A, #'C', SUB_L4                         ; S
                             UB C
0DC9 753391         1614                                             MOV                     33H, #91H                  
                                                  ; LOAD ITS 8085 INST. SET
0DCC 8026           1615                                             SJMP            SUB_L9
0DCE B44405         1616     SUB_L4:                         CJNE            A, #'D', SUB_L5                         ; S
                             UB D
0DD1 753392         1617                                             MOV                     33H, #92H                  
                                                  ; LOAD ITS 8085 INST. SET
0DD4 801E           1618                                             SJMP            SUB_L9
0DD6 B44505         1619     SUB_L5:                         CJNE            A, #'E', SUB_L6                         ; S
                             UB E
0DD9 753393         1620                                             MOV                     33H, #93H                  
                                                  ; LOAD ITS 8085 INST. SET
0DDC 8016           1621                                             SJMP            SUB_L9
0DDE B44805         1622     SUB_L6:                         CJNE            A, #'H', SUB_L7                         ; S
                             UB H
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    39

0DE1 753394         1623                                             MOV                     33H, #94H                  
                                                  ; LOAD ITS 8085 INST. SET
0DE4 800E           1624                                             SJMP            SUB_L9
0DE6 B44C05         1625     SUB_L7:                         CJNE            A, #'L', SUB_L8                         ; S
                             UB L
0DE9 753395         1626                                             MOV                     33H, #95H                  
                                                  ; LOAD ITS 8085 INST. SET
0DEC 8006           1627                                             SJMP            SUB_L9
0DEE B44DBD         1628     SUB_L8:                         CJNE            A, #'M', SUB_L1                         ; S
                             UB M
0DF1 753396         1629                                             MOV                     33H, #96H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1630     
0DF4 121151         1631     SUB_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0DF7 020071         1632                                             LJMP            MAIN2
                    1633     
                    1634     ; ***** FOR 'STAX...'
0DFA 121385         1635     STAX_:                          CALL            LCD_SHO
0DFD 7420           1636                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0DFF 121385         1637                                             CALL            LCD_SHO
0E02 1212AC         1638     STAX_L1:                        CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0E05 3001FA         1639                                             JNB                     01H, STAX_L1
0E08 C201           1640                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1641     
0E0A B44205         1642                                             CJNE            A, #'B', STAX_L2                   
                                  ; STAX B
0E0D 753302         1643                                             MOV                     33H, #02H                  
                                                  ; LOAD ITS 8085 INST. SET
0E10 8006           1644                                             SJMP            STAX_L3
0E12 B444ED         1645     STAX_L2:                        CJNE            A, #'D', STAX_L1                        ; S
                             TAX D
0E15 753312         1646                                             MOV                     33H, #12H                  
                                                  ; LOAD ITS 8085 INST. SET
                    1647     
0E18 121151         1648     STAX_L3:                        CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0E1B 020071         1649                                             LJMP            MAIN2
                    1650     
                    1651     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    1652     ; ***** FOR 'XRA...'
0E1E 121385         1653     XRA_:                           CALL            LCD_SHO
0E21 7420           1654                                             MOV                     A, #' '                    
                                                  ; GIVE SPACE
0E23 121385         1655                                             CALL            LCD_SHO
0E26 1212AC         1656     XRA_L1:                         CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY (OPERAND ALPHABET) IS DEPRESSED
0E29 3001FA         1657                                             JNB                     01H, XRA_L1
0E2C C201           1658                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1659     
0E2E B44105         1660                                             CJNE            A, #'A', XRA_L2                    
                                  ; XRA A
0E31 7533AF         1661                                             MOV                     33H, #0AFH                 
                                                  ; LOAD ITS 8085 INST. SET
0E34 8036           1662                                             SJMP            XRA_L9
0E36 B44205         1663     XRA_L2:                         CJNE            A, #'B', XRA_L3                         ; X
                             RA B
0E39 7533A8         1664                                             MOV                     33H, #0A8H                 
                                                  ; LOAD ITS 8085 INST. SET
0E3C 802E           1665                                             SJMP            XRA_L9
0E3E B44305         1666     XRA_L3:                         CJNE            A, #'C', XRA_L4                         ; X
                             RA C
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    40

0E41 7533A9         1667                                             MOV                     33H, #0A9H                 
                                                  ; LOAD ITS 8085 INST. SET
0E44 8026           1668                                             SJMP            XRA_L9
0E46 B44405         1669     XRA_L4:                         CJNE            A, #'D', XRA_L5                         ; X
                             RA D
0E49 7533AA         1670                                             MOV                     33H, #0AAH                 
                                                  ; LOAD ITS 8085 INST. SET
0E4C 801E           1671                                             SJMP            XRA_L9
0E4E B44505         1672     XRA_L5:                         CJNE            A, #'E', XRA_L6                         ; X
                             RA E
0E51 7533AB         1673                                             MOV                     33H, #0ABH                 
                                                  ; LOAD ITS 8085 INST. SET
0E54 8016           1674                                             SJMP            XRA_L9
0E56 B44805         1675     XRA_L6:                         CJNE            A, #'H', XRA_L7                         ; X
                             RA H
0E59 7533AC         1676                                             MOV                     33H, #0ACH                 
                                                  ; LOAD ITS 8085 INST. SET
0E5C 800E           1677                                             SJMP            XRA_L9
0E5E B44C05         1678     XRA_L7:                         CJNE            A, #'L', XRA_L8                         ; X
                             RA L
0E61 7533AD         1679                                             MOV                     33H, #0ADH                 
                                                  ; LOAD ITS 8085 INST. SET
0E64 8006           1680                                             SJMP            XRA_L9
0E66 B44DBD         1681     XRA_L8:                         CJNE            A, #'M', XRA_L1                         ; X
                             RA M
0E69 7533AE         1682                                             MOV                     33H, #0AEH                 
                                                  ; LOAD ITS 8085 INST. SET
                    1683     
0E6C 121151         1684     XRA_L9:                         CALL            FLY_OPCODE                                 
                                  ; CALL A SUBROUTINE THAT WOULD HANDLE OPCODE IN-TAKE
0E6F 020071         1685                                             LJMP            MAIN2
                    1686     
                    1687     ; ------------------------------------------ END OF CHARACTER KEY COMBINATION -------------
                             ---------------------------------------------
                    1688     
                    1689     ; ================================================ INTERRUPT SUBROUTINES (ISRs) ===========
                             =============================================
0E72                1690     SECOND_FUNCTION:
0E72 120F3E         1691                                             LCALL           DELAY_500mS                        
                                          ; DELAY_500mS = 500ms
0E75 1212AC         1692                                             LCALL           KEYPAD_ID                          
                                          ; CALL THE KEYPAD TO SUPPLY THE ASCII OF THE KEY DEPRESSED
0E78 D530F7         1693                                             DJNZ            30H, SECOND_FUNCTION            ; M
                             AKE THE SECOND FUNCTION ACTIVE FOR ABOUT 2 SECONDS
0E7B 30013C         1694                                             JNB                     01H, EXIT_SECOND_FUNCTION  
                                  ; IF NO KEY IS DEPRESSED AFTER 2 SECONDS, EXIT ELSE CONTINUE
0E7E C201           1695                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    1696     
0E80 B44D05         1697                                             CJNE            A, #'M', SF_1
0E83 12143F         1698                                             LCALL           SUB_MEM                            
                                          ; CALL SUBTITUTE MEMORY OSR
0E86 8032           1699                                             SJMP            EXIT_SECOND_FUNCTION    
                    1700     
0E88 B45805         1701     SF_1:                           CJNE            A, #'X', SF_2
0E8B 1210AF         1702                                             LCALL           EXE                                
                                                  ; CALL EXECUTE OSR
0E8E 802A           1703                                             SJMP            EXIT_SECOND_FUNCTION
                    1704                                                                                                
                                  
0E90 B44E09         1705     SF_2:                           CJNE            A, #'N', SF_3
0E93 120F33         1706                                             LCALL           CANCEL                             
                                          ; CALL CANCEL OSR
0E96 758157         1707                                             MOV                     SP, #57H                   
                                                  ; INITIALIZATION OF THE TOP OF THE STACK(40 BYTES OF MEM. ARE AVAILABLE ON THIS INITIALIZATION)
0E99 020071         1708                                             JMP                     MAIN2                      
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    41

                                                  ; START AFRESH
                    1709     
                    1710     ;SF_3:                          CJNE            A, #'C', SF_4 
                    1711     ;                                       LCALL           CPLT                               
                                          ; CALL CPLT (CODE OR PROGRAMMING LANGUAGE TYPE) OSR
                    1712     ;                                       SJMP            EXIT_SECOND_FUNCTION
                    1713                                              
0E9C B44205         1714     SF_3:                           CJNE            A, #'B', SF_4 
0E9F 12143E         1715                                             LCALL           STEP                               
                                          ; CALL STEP-BY-STEP EXECUTION OSR
0EA2 8016           1716                                             SJMP            EXIT_SECOND_FUNCTION
                    1717     
0EA4 B45A05         1718     SF_4:                           CJNE            A, #'Z', SF_5 
0EA7 121022         1719                                             LCALL           EXAM_REG                           
                                          ; CALL EXAM_REG SR
0EAA 800E           1720                                             SJMP            EXIT_SECOND_FUNCTION
                    1721     
0EAC B45605         1722     SF_5:                           CJNE            A, #'V', SF_6 
0EAF 12145B         1723                                             LCALL           V_HEX                              
                                          ; CALL V_HEX (VIEW HEXCODE) OSR
0EB2 8006           1724                                             SJMP            EXIT_SECOND_FUNCTION
                    1725     
0EB4 B42A03         1726     SF_6:                           CJNE            A, #'*', EXIT_SECOND_FUNCTION 
0EB7 120F79         1727                                             LCALL           E_N_D                              
                                          ; CALL E_N_D (END PROGRAM) OSR
                    1728                                             
0EBA                1729     EXIT_SECOND_FUNCTION:
0EBA 32             1730                                             RETI
                    1731     
                    1732     ; ================================================ ORDINARY SUBROUTINES (OSRs) ============
                             ==============================================
                    1733     
                    1734     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
0EBB                1735     ADDRESS_DISPLAY_CONTROL:
                    1736     ; THIS SR IS USED BY FLY_OPCODE & FLY_OPERAND (ie DATA TYPE & ADDRESS TYPE) TO CONTROL THE 
                             ADDRESS DISPLAY IN LINE 1
                    1737     ; WHENEVER ENTRY IN LINE 2 IS COMPLETE AND NEXT IS PRESSED.
                    1738     ; ALSO IT IS USED BY V_HEX AND CANCEL SR TO CONTROL THE ADDRESS DISPLAY IN LINE 1
                    1739     ; THE INPUT MEMORY LOCATIONS TO THIS SUBROUTINE ARE 3AH & 39H
                    1740     
                    1741     ; IT FIRST CLEARS THE SCREEN OF THE LCD BEFORE WRITING INTO ITS LINE 1 ONLY. ALSO INCLUDE '
                             :' AFTER THE ADDRESS
                    1742     
                    1743                                     CLR_LCD
                    1746     
                    1747                                     ; MOST SIGNIFICANT BYTE (MSB)
0EC0 853A36         1748                                     MOV                     36H, 3AH                           
                                  ; PLACE THE HOB OF THE CURRENT ADDRESS INTO THE INPUT MEMORY LOC. (36H) OF H2A SR
0EC3 12120D         1749                                     CALL            HEX_2_ASCII
                    1750     
0EC6 7480           1751                                     MOV                     A, #80H                            
                                  ; LOAD A COMMAND TO DISPLAY THE CONTENT OF 38H & 37H ON LINE 1, POSITION 1 & 2
0EC8 12135E         1752                                     CALL            LCD_CMD
                    1753     
0ECB E538           1754                                     MOV                     A, 38H                             
                                  ; 1ST NIBBLE DISPLAYED IN HEX IN POSITION 1
0ECD 121385         1755                                     CALL            LCD_SHO
                    1756     
0ED0 E537           1757                                     MOV                     A, 37H                             
                                  ; 2ND NIBBLE DISPLAYED IN HEX IN POSITION 2
0ED2 121385         1758                                     CALL            LCD_SHO
                    1759     
                    1760                                     ; LEAST SIGNIFICANT BYTE (LSB)
0ED5 853936         1761                                     MOV                     36H, 39H                           
                                  ; PLACE THE HOB OF THE CURRENT ADDRESS INTO THE INPUT MEMORY LOC. (36H) OF H2A SR
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    42

0ED8 12120D         1762                                     CALL            HEX_2_ASCII
                    1763     
0EDB E538           1764                                     MOV                     A, 38H                             
                                  ; 3RD NIBBLE DISPLAYED IN HEX IN POSITION 3
0EDD 121385         1765                                     CALL            LCD_SHO
                    1766     
0EE0 E537           1767                                     MOV                     A, 37H                             
                                  ; 4TH (LAST) NIBBLE DISPLAYED IN HEX IN POSITION 4
0EE2 121385         1768                                     CALL            LCD_SHO
                    1769     
                    1770     
0EE5 743A           1771                                     MOV                     A, #':'                            
                                  ; DISPLAY ':' PROBABLY ON LINE 1, POSITION 5 (SINCE FOUR DISPLAYS HAS BEEN CARRIED OUT)
0EE7 121385         1772                                     CALL            LCD_SHO
                    1773     
0EEA 22             1774                                     RET
                    1775     
                    1776     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    1777     ; THIS SUBROUTINE CONVERTS A GIVEN ASCII CHARACTER INTO ITS EQUIVALENT HGEXADECIMAL NUMBER 
                             USING 8051 INSTRUCTION SETS
                    1778     ; SOME ADDITIONAL CODE HERE ARE TO ENSURE PROTECTION SINCE THIS SR IS TO BE USED WERE A-Z A
                             PHABET KEYS ARE AVAILABLE TO BE DEPRESSED
                    1779     
                    1780     ; REGISTER DEFINITION:
                    1781     ; OPERATING REGISTER = A
                    1782     
                    1783     ; BI                    BIT             04H                                     ; BYTE INDI
                             CATOR (INDICATES WHEN AN OPERAND IS A 2 BYTE(4 NIBBLES) OR 1 BYTE (2NIBBLES) )
                    1784     
                    1785     
                    1786     ; ****REMEMBER TO SAVE REGS & FLAGS STILL RELEVANT TO THE CALLER PROGRAM TO AVOID DATA LOSS
                             ****
                    1787     
0EEB                1788     ASCII_2_HEX:    
0EEB B43001         1789                                     CJNE    A, #30H, A2H_1  ; THE CONTENT OF 'A' MUST SATISFY T
                             HE FOLLOWING INEQUALITY: 30H =< A =< 46H
0EEE C3             1790                                     CLR             C                               ; ENSURE IT
                              PASSES TO THE NEXT INSTRUCTION
                    1791     
0EEF 4041           1792     A2H_1:                  JC              EXIT_A2H
0EF1 9430           1793                                     SUBB    A, #30H                 ; SUBTRACT 30H FROM A REGIS
                             TER
0EF3 B40A01         1794                                     CJNE    A, #0AH, A2H_2
0EF6 C3             1795                                     CLR             C                               ; ENSURE IT
                              PASSES TO THE NEXT INSTRUCTION
                    1796     
0EF7 4008           1797     A2H_2:                  JC              A2H_4
0EF9 9407           1798                                     SUBB    A, #07H                 ; SUBTRACT 07H FROM 'A' REG
                             ISTER
0EFB B40F01         1799                                     CJNE    A, #0FH, A2H_3  ; CHECK IF THE RESULT OF THE SUBTRA
                             CTION IS GREATER THAN 0FH; IF SO EXIT THE SR ELSE CONTINUE
0EFE D3             1800                                     SETB    C                               ; ENSURE IT PASSES 
                             TO THE NEXT INSTRUCTION
                    1801     
0EFF 5031           1802     A2H_3:                  JNC             EXIT_A2H                
                    1803     ; ELOO U MAY PUT UR FLAG FOR SUB MEM ASCII_2_HEX SR CALL HERE(NOTE SUCH FLAG MUST BE CLEAR 
                             AT THE SUB MEM SR ON RETURN IMMEDIATELY)
                    1804     ; EXPECTED FLAG INSTRUCTION: JB         SubMem'sAscii2hexFlag, EXIT_A2H
                    1805     
                    1806     ; THE TEST IS COMPLETED. THE INEQUQLITY: 30H =< A =< 46H HAS BEEN SATISFIED AND CONVERSION 
                             HAS TAKEN PLACE!!!
                    1807     
0F01 D202           1808     A2H_4:                  SETB    02H                             ; THE FLAG, 02H BEEN SET IN
                             DICATES THAT THE KEY PRESSED IS BETWEEN 0 - F IN HEX
0F03 C3             1809                                     CLR             C                               ; ENSURE TH
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    43

                             AT THE SUBTRCTION IS DONE WITHOUT BORROW(ie THE CARRY FLAG)
                    1810     
                    1811     ; MARRIAGE BEGINS
0F04 30041A         1812                                     JNB             04H, A2H_7              ; MEM BIT, 04H = 1 
                             MEANS 2 BYTES(4 NIBBLES) & 04H = 0 MEANS 1 BYTE (2 NIBBLES)
0F07 200602         1813                                     JB              06H, A2H_5              ; HAS THE MARRIAGE 
                             OF HIGH ORDER BYTE COMPLETED? FOR NO, 06H = 1; FOR YES, 06H = 0
0F0A 8015           1814                                     SJMP    A2H_7                   ; JMUP FOR THE LOWER BYTE O
                             F ADDRESS
                    1815     
                    1816     ; FOR HIGHER ORDER BYTE OF AN ADDRESS
0F0C B205           1817     A2H_5:                  CPL             05H                             ; CONTROLS THE NIBB
                             LE MARRIAGE INTO A BYTE
0F0E 200508         1818                                     JB              05H, A2H_6
0F11 4535           1819                                     ORL             A, 35H                  ; MARRY MSB(1ST NIB
                             BLE IN MEM LOC. 34H) AND THE LSB(2ND NIBBLE IN 'A') INTO A BYTE DATA OR ADDRESS
0F13 F535           1820                                     MOV             35H, A                  ; SAVE THE FINAL RE
                             SULT IN MEM LOC. 35H 
0F15 C206           1821                                     CLR             06H                             ; CLEARS ON
                              MARRIAGE COMPLETION FOR HIGH ORDER BYTE
0F17 8019           1822                                     SJMP    EXIT_A2H
                    1823     
0F19 23             1824     A2H_6:                  RL              A                               ; SWAP MSB AND LSB
0F1A 23             1825                                     RL              A
0F1B 23             1826                                     RL              A
0F1C 23             1827                                     RL              A
0F1D F535           1828                                     MOV             35H, A                  ; SAVE THE CURRENT 
                             RESULT IN MEM LOC. 35H
                    1829     
0F1F 8011           1830                                     SJMP    EXIT_A2H
                    1831     
                    1832     ; FOR DATA OR LOWER ORDER BYTE OF AN ADDRESS
0F21 B205           1833     A2H_7:                  CPL             05H                             ; CONTROLS THE NIBB
                             LE MARRIAGE INTO A BYTE
0F23 200506         1834                                     JB              05H, A2H_8
0F26 4534           1835                                     ORL             A, 34H                  ; MARRY MSB(1ST NIB
                             BLE IN MEM LOC. 34H) AND THE LSB(2ND NIBBLE IN 'A') INTO A BYTE DATA OR ADDRESS
0F28 F534           1836                                     MOV             34H, A                  ; SAVE THE FINAL RE
                             SULT IN MEM LOC. 34H 
0F2A 8006           1837                                     SJMP    EXIT_A2H
                    1838     
0F2C 23             1839     A2H_8:                  RL              A                               ; SWAP MSB AND LSB
0F2D 23             1840                                     RL              A
0F2E 23             1841                                     RL              A
0F2F 23             1842                                     RL              A
0F30 F534           1843                                     MOV             34H, A                  ; SAVE THE CURRENT 
                             RESULT IN MEM LOC. 34H
                    1844     
0F32                1845     EXIT_A2H:
0F32 22             1846                                     RET                                             ; RETURN TO
                              THE CALLER PROGRAM
                    1847     
                    1848     ; TESTED: QC PASSED SYNTAXICALLY
                    1849     
                    1850     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    1851     ; CANCEL (<===)
                    1852     ; THIS IS THE SR THAT IS CALLED BY THE USER WHEN HE/SHE MAKES A MISTAKE
                    1853     ; THE SR CANCELS ALL THE CHARACTERS IN THE CURRENT LINE (EITHER LINE 1 OR 2) OF THE LCD
                    1854     
0F33                1855     CANCEL:                         ; RESTORE IN THE ADDRESS DISPLAY CONTROL MEM LOC. THE CURRE
                             NT ADDRESS ALREADY SAVED IN THE PAGE MEMORY 
0F33 C205           1856                                             CLR                     05H                        
                                                          ; REFRESH THE BYTE MARRIAGE FLAG. IT HELPS THE CANCEL SR
                    1857     
0F35 85433A         1858                                             MOV                     3AH, 43H                   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    44

                                                  ; (HOB)
0F38 854239         1859                                             MOV                     39H, 42H                   
                                                  ; (LOB)
                    1860                                     
0F3B D1BB           1861                                             CALL            ADDRESS_DISPLAY_CONTROL
                    1862                                             ; see if any other memory location for those it has
                              affected 
                    1863     
                    1864                                             ; THE STACK POINTER IS ALWAYS RESET WHEN THE SUBROU
                             TINE RETURNS
                    1865                                             ; THE SUBROUTINE TAKE CARE OF WHEHTER THE USER IS U
                             SING THE MHEX OR THE ASM TO PROGRAM
0F3D                1866     EXIT_CANCEL:
0F3D 22             1867                                             RET
                    1868     
                    1869     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
0F3E                1870     DELAY_500mS:
                    1871     ; THIS SUBROUTINE PROVIDES A DELAY OF 500ms TO ENSURE THAT THE SECOND FUNCTION IS ON FOR AT
                              LEAST 2sec (ie 4 X 500ms)
0F3E 755019         1872                                             MOV             50H, #19H                          
                                                  ; MOVE #19H (25DEC) INTO MEM LOC. 50H FOR DELAY (25 x 20mS = 500mS)
                    1873                                             ; 20mS DELAY
0F41 75513A         1874     DLY_500mS_1:            MOV             51H, #3AH                                          
                                  ; MOVE #3AH & #0ABH INTO MEM LOCATIONS (51H & 52H) THAT SERVE 
0F44 7552AB         1875     DLY_500mS_2:            MOV             52H, #0ABH                                         
                                  ; AS COUNTER FOR THIS PARTICULAR DELAY SUBROUTINE
0F47 D552FD         1876                                             DJNZ    52H, $                                     
                                          ; STAY HERE TILL THE CONTENT OF THE MEMORY LOCATION (52H) IS ZERO
0F4A D551F7         1877                                             DJNZ    51H, DLY_500mS_2                           
                                  ; STAY HERE TILL THE CONTENT OF THE MEMORY LOCATION (51H) IS ZERO
                    1878                                             ;        --- END
0F4D D550F1         1879                                             DJNZ    50H, DLY_500mS_1                           
                                  ; STAY HERE TILL THE CONTENT OF THE MEMORY LOCATION (50H) IS ZERO
                    1880     
0F50 22             1881                                             RET
                    1882     
                    1883     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    1884     ; THIS SUBROUTINE PROVIDES A DELAY OF 2S TO ENSURE THAT THE MESSAGE DISPLAYED IN GO_TO OSR 
                             IS SEEN BY THE USER
0F51 755064         1885     DELAY_2S:                       MOV             50H, #64H                                  
                                          ; MOVE #64H (100DEC) INTO MEM LOC. 50H FOR DELAY (100 x 20mS = 2S)
                    1886                                             ; 20mS DELAY
0F54 75513D         1887     DLY_2S_1:                       MOV             51H, #3DH                                  
                                          ; MOVE #0FFH INTO MEM LOCATIONS (52H & 52H) THAT SERVE 
0F57 7552A2         1888     DLY_2S_2:                       MOV             52H, #0A2H                                 
                                          ; AS COUNTER FOR THIS PARTICULAR DELAY SUBROUTINE
0F5A D552FD         1889                                             DJNZ    52H, $                                     
                                          ; STAY HERE TILL THE CONTENT OF THE MEMORY LOCATION (52H) IS ZERO
0F5D D551F7         1890                                             DJNZ    51H, DLY_2S_2                              
                                  ; STAY HERE TILL THE CONTENT OF THE MEMORY LOCATION (51H) IS ZERO
                    1891                                             ; --- END
0F60 D550F1         1892                                             DJNZ    50H, DLY_2S_1                              
                                  ; STAY HERE TILL THE CONTENT OF THE MEMORY LOCATION (50H) IS ZERO
                    1893                                     
0F63 22             1894                                             RET
                    1895     
                    1896     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
0F64                1897     DISP_CHAR:
0F64 D083           1898                                     POP             DPH
0F66 D082           1899                                     POP             DPL
0F68                1900     PRINT_TEXT:
0F68 E4             1901                                     CLR             A
0F69 93             1902                                     MOVC            A, @A+DPTR
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    45

0F6A B40002         1903                                     CJNE            A, #00H, LOOP
0F6D 8007           1904                                     SJMP            RETURN
0F6F 121385         1905     LOOP:                           LCALL           LCD_SHO
0F72 A3             1906                                     INC             DPTR
0F73 020F68         1907                                     LJMP            PRINT_TEXT
0F76 7401           1908     RETURN:                         MOV             A, #01H
0F78 73             1909                                     JMP             @A+DPTR
                    1910     
                    1911     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    1912     ; E_N_D (END OF PROGRAM)
                    1913     ; THIS SR IS THE SUBBROUTINE THAT IS CALLED BY THE USER AT THE END OF ANY PROGRAM WRITING
                    1914     ; REMEMBER TO DECREMENT THE CURRENT ADDRESS MEMORY LOC BEFORE SAVING IT INSIDE END MEMORY L
                             OCATION
                    1915     
                    1916     ; *** REMEMBER THE S1 - S4 AND L1 - L4
                    1917     
0F79                1918     E_N_D:
                    1919                                             CLR_LCD
                    1922                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS ON LINE ONE (SINCE LCD DDRAM ADDRESS RESETS WHEN CLEARED)
0F84 20506C65       1925                                             DB                      ' Please Wait... ',0
0F88 61736520                
0F8C 57616974                
0F90 2E2E2E20                
0F94 00                      
                    1926     
0F95 C083           1927                                             PUSH            DPH                                
                                                  ; SAVE THIER CONTENTS
0F97 C082           1928                                             PUSH            DPL
                    1929                                             
0F99 7943           1930                                             MOV                     R1, #43H                   
                                                  ; STARTING ADDRESS OF THE RESERVED AREA FOR ...
0F9B 7842           1931                                             MOV                     R0, #42H                   
                                                  ; RESULTS OF THE EXAMINED 8085'S REG. = PAGE ADDRESS
                    1932     
                    1933     ; ------------------------------------
0F9D 854383         1934                                             MOV                     DPH, 43H                   
                                                  ; THE PAGE ADDRESS CONTAINS THE BEGINNING OF THE MEMORY SPACE WHERE THE CONTENT...
0FA0 854282         1935                                             MOV                     DPL, 42H                   
                                                  ; OF EXAMINED 8085'S REGISTERS ARE SAVED. 1 OF (2 BYTE X 7)
                    1936                                                                                                
                                                          ; FOR REGISTER A
                    1937     
0FA3 A3             1938                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 2 OF (2 BYTE X 7)
0FA4 858345         1939                                             MOV                     45H, DPH                   
                                                  ; FOR REGISTER B
0FA7 858244         1940                                             MOV                     44H, DPL                   
                                                  
                    1941     
0FAA A3             1942                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 3 OF (2 BYTE X 7)
0FAB 858347         1943                                             MOV                     47H, DPH                   
                                                  ; FOR REGISTER C
0FAE 858246         1944                                             MOV                     46H, DPL                   
                                                  
                    1945     
0FB1 A3             1946                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 4 OF (2 BYTE X 7)
0FB2 858349         1947                                             MOV                     49H, DPH                   
                                                  ; FOR REGISTER D
0FB5 858248         1948                                             MOV                     48H, DPL                   
                                                  
                    1949     
0FB8 A3             1950                                             INC                     DPTR                       
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    46

                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 5 OF (2 BYTE X 7)
0FB9 85834B         1951                                             MOV                     4BH, DPH                   
                                                  ; FOR REGISTER E
0FBC 85824A         1952                                             MOV                     4AH, DPL                   
                                                  
                    1953     
0FBF A3             1954                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 6 OF (2 BYTE X 7)
0FC0 85834D         1955                                             MOV                     4DH, DPH                   
                                                  ; FOR REGISTER H
0FC3 85824C         1956                                             MOV                     4CH, DPL                   
                                                  
                    1957     
0FC6 A3             1958                                             INC                     DPTR                       
                                                  ; THE ADDRESS OF THE RESERVED AREA FOR THE EXAMINED REGISTERS. 7 OF (2 BYTE X 7)
0FC7 85834F         1959                                             MOV                     4FH, DPH                   
                                                  ; FOR REGISTER L
0FCA 85824E         1960                                             MOV                     4EH, DPL                   
                                                  
                    1961     
                    1962     
                    1963     ; ------------------------------------
                    1964     ;                                       MOV                     A, #7FH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, A' 
0FCD 121013         1965                                             CALL            END_LOADER                         
                                          ; NOTICE THAT IT IS NOT NECESSARY FOR uP TO CARRY OUT THE ABOVE INSTRUCTION
                    1966     
0FD0 7478           1967                                             MOV                     A, #78H                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, B' 
0FD2 121013         1968                                             CALL            END_LOADER
                    1969     
0FD5 7479           1970                                             MOV                     A, #79H                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, C' 
0FD7 121013         1971                                             CALL            END_LOADER
                    1972     
0FDA 747A           1973                                             MOV                     A, #7AH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, D' 
0FDC 121013         1974                                             CALL            END_LOADER
                    1975     
0FDF 747B           1976                                             MOV                     A, #7BH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, E' 
0FE1 121013         1977                                             CALL            END_LOADER
                    1978     
0FE4 747C           1979                                             MOV                     A, #7CH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, H' 
0FE6 121013         1980                                             CALL            END_LOADER
                    1981     
0FE9 747D           1982                                             MOV                     A, #7DH                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'MOV     A, L' 
0FEB 121013         1983                                             CALL            END_LOADER
                    1984     
0FEE D082           1985                                             POP                     DPL                        
                                                          ; RETRIEVE THIER CONTENT 
0FF0 D083           1986                                             POP                     DPH                        
                                                          ; (ELOO CHECK IF THIS AND THE OTHER INSTRUCTION ABOVE IS NECESSARY)
                    1987     ; ELOO YOU MAY INCLUDE AT MOST 1 OR 2 SECONDS DELAY SO THAT THE LCD MESSAGE ABOVE MAY BE VI
                             SIBLE TO THE USER
                    1988                                             CLR_LCD
                    1991                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS ON LINE ONE (SINCE LCD DDRAM ADDRESS RESETS WHEN CLEARED)
0FFD 20202020       1994                                             DB                      '      Done!!!     ',0
1001 2020446F                
1005 6E652121                
1009 21202020                
100D 202000                  
                    1995     
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    47

1010 300CFD         1996                                             JNB                     0CH, $                     
                                                  ; JUST STAY HERE WHILE THE USER ANALYIZE HE/HER DATA
                    1997     
                    1998     ; ------------------------------------
1013 A3             1999     END_LOADER:                     INC                     DPTR                               
                                          ; SEND TO THE EXTERNAL DATA MEM. THE HEXCODE (IN 8085uP INSTRUCTION SET) TO READ  
1014 F0             2000                                             MOVX            @DPTR, A                           
                                          ; THE CONTENT OF THE REGISTER TO BE EXAMINED AND PLACE IT IN 8085''s ACCUMMULATOR
                    2001     
1015 7432           2002                                             MOV                     A, #32H                    
                                                  ; SAVE THE HEXCODE (8085 INST. SET) OF THE INSTRUCTION 'STA ....'  
1017 A3             2003                                             INC                     DPTR
1018 F0             2004                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
                    2005     
1019 E6             2006                                             MOV                     A, @R0                     
                                                  ; LOAD THE SECOND BYTE (LOB OF THE ADDRESS) FIRST AS ASSMBLEY PRINCIPLE DEMANDS
101A A3             2007                                             INC                     DPTR
101B F0             2008                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
                    2009     
101C E7             2010                                             MOV                     A, @R1                     
                                                  ; LOAD THE THIRD BYTE (HOB OF THE ADDRESS) SECOND AS ASSMBLEY PRINCIPL
                             E DEMANDS                                 
101D A3             2011                                             INC                     DPTR
101E F0             2012                                             MOVX            @DPTR, A                           
                                          ; PLACE IN THE EXTERNAL DATA MEMORY
                    2013     
101F 09             2014                                             INC                     R1                         
                                                          ; GET READY FOR THE NEXT ADDRESS TRANSFER
1020 08             2015                                             INC                     R0
                    2016     
1021 22             2017                                             RET
                    2018     
                    2019     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    2020     ; EXAMINE THE REGISTERS OF THE 8085uP (EXAM REG)
                    2021     ; THIS SUBROUTINE IS USED TO EXAMINE THE CONTENT OF THE 8085uP IN-BUILT REGISTERS (ie A, B,
                              C, D, E, H & L)
                    2022     
                    2023     ; *** IT SHOULD BE INCLUDED IN THE MANUAL THAT THE USER SHOULD EXAMINE THE CONTENT OF THE A
                             CCUMMULATOR FIRST BEFORE OTHER TO AVOID 
                    2024     ; *** LOSS OF ITS DATA SINCE IT IS THE ONE THAT DOES THE TRANFER
                    2025     
1022                2026     EXAM_REG:                       
                    2027                                             CLR_LCD
                    2030                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS ON LINE ONE (SINCE LCD DDRAM ADDRESS RESETS WHEN CLEARED)
102D 4578616D       2033                                             DB                      'Examine Register',0
1031 696E6520                
1035 52656769                
1039 73746572                
103D 00                      
103E 854183         2034                                             MOV                     DPH, 41H                   
                                                  ; PREPARE AN ADDRESS +2 GREATER THAN THE END ADDRESS FOR AUTO EXECUTION 
1041 854082         2035                                             MOV                     DPL, 40H                   
                                                  ; BY BOTH THE uC AND uP
                    2036     
1044 74C0           2037                                             MOV                     A, #0C0H                   
                                                  ; THE INSTRUCTIONS BELOW DISPLAYS ON LINE 2
1046 715E           2038                                             CALL            LCD_CMD
                    2039                                             
1048 51AC           2040     ER_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY(1ST KEY) IS DEPRESSED
104A 3001FB         2041                                             JNB                     01H, ER_1
104D C201           2042                                             CLR                     01H                        
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    48

                                                          ; GET READY FOR NEXT KEY
                    2043                                             
104F B44108         2044                                             CJNE            A, #'A', ER_2                      
                                  ; JUMP TO DISPLAY 'A' AND ITS CONTENT ELSE SKIP
1052 854383         2045                                             MOV                     DPH, 43H                   
                                                  ; THEY CONTAIN THE 16 BIT ADDRESS LOCATION WHERE THE CONTENT OF 'A' IS SAVED
1055 854282         2046                                             MOV                     DPL, 42H                   
                                                  
1058 8040           2047                                             SJMP            ER_8
105A B44208         2048     ER_2:                           CJNE            A, #'B', ER_3                           ; J
                             UMP TO DISPLAY 'B' AND ITS CONTENT ELSE SKIP
105D 854383         2049                                             MOV                     DPH, 43H                   
                                                  ; THEY CONTAIN THE 16 BIT ADDRESS LOCATION WHERE THE CONTENT OF 'B' IS SAVED
1060 854282         2050                                             MOV                     DPL, 42H                   
                                                  
1063 8035           2051                                             SJMP            ER_8
1065 B44308         2052     ER_3:                           CJNE            A, #'C', ER_4                           ; J
                             UMP TO DISPLAY 'C' AND ITS CONTENT ELSE SKIP
1068 854383         2053                                             MOV                     DPH, 43H                   
                                                  ; THEY CONTAIN THE 16 BIT ADDRESS LOCATION WHERE THE CONTENT OF 'C' IS SAVED
106B 854282         2054                                             MOV                     DPL, 42H                   
                                                  
106E 802A           2055                                             SJMP            ER_8
1070 B44408         2056     ER_4:                           CJNE            A, #'D', ER_5                           ; J
                             UMP TO DISPLAY 'D' AND ITS CONTENT ELSE SKIP
1073 854383         2057                                             MOV                     DPH, 43H                   
                                                  ; THEY CONTAIN THE 16 BIT ADDRESS LOCATION WHERE THE CONTENT OF 'D' IS SAVED
1076 854282         2058                                             MOV                     DPL, 42H                   
                                                  
1079 801F           2059                                             SJMP            ER_8
107B B44508         2060     ER_5:                           CJNE            A, #'E', ER_6                           ; J
                             UMP TO DISPLAY 'E' AND ITS CONTENT ELSE SKIP
107E 854383         2061                                             MOV                     DPH, 43H                   
                                                  ; THEY CONTAIN THE 16 BIT ADDRESS LOCATION WHERE THE CONTENT OF 'E' IS SAVED
1081 854282         2062                                             MOV                     DPL, 42H                   
                                                  
1084 8014           2063                                             SJMP            ER_8
1086 B44808         2064     ER_6:                           CJNE            A, #'H', ER_7                           ; J
                             UMP TO DISPLAY 'H' AND ITS CONTENT ELSE SKIP
1089 854383         2065                                             MOV                     DPH, 43H                   
                                                  ; THEY CONTAIN THE 16 BIT ADDRESS LOCATION WHERE THE CONTENT OF 'H' IS SAVED
108C 854282         2066                                             MOV                     DPL, 42H                   
                                                  
108F 8009           2067                                             SJMP            ER_8
1091 B44CB4         2068     ER_7:                           CJNE            A, #'L', ER_1                           ; J
                             UMP TO DISPLAY 'L' AND ITS CONTENT ELSE START AFRESH (KEY PRESSED NOT ACCESSABLE)
1094 854383         2069                                             MOV                     DPH, 43H                   
                                                  ; THEY CONTAIN THE 16 BIT ADDRESS LOCATION WHERE THE CONTENT OF 'L' IS SAVED
1097 854282         2070                                             MOV                     DPL, 42H                   
                                                  
                    2071     
109A 7185           2072     ER_8:                           CALL            LCD_SHO                                    
                                  ; DISPLAY THE REGISTERS' ALPAHBET INDICATOR FOLLOWED BY THE CHARATER ':'
109C 743A           2073                                             MOV                     A, #':'
109E 7185           2074                                             CALL            LCD_SHO
                    2075     
10A0 E0             2076                                             MOVX            A, @DPTR                           
                                          ; RETRIEVE THE HEX CODE IN THE ADDRESS SPECIFIED BY THE CONTENT OF THE DPTR
10A1 F536           2077                                             MOV                     36H, A                     
                                                  ; PLACE THE HEX CODE INTO THE INPUT MEMORY LOC. (36H) OF THE HEX_2_ASCII SR
                    2078     
10A3 510D           2079                                             CALL            HEX_2_ASCII                        
                                          ; CALL THE OSR FOR CONVERSION
                    2080     
10A5 E538           2081                                             MOV                     A, 38H                     
                                                  ; MOVE THE ASCII CODE OF THE HIGHER ORDER BYTE TO FOR DISPLAY
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    49

10A7 7185           2082                                             CALL            LCD_SHO
10A9 E537           2083                                             MOV                     A, 37H                     
                                                  ; MOVE THE ASCII CODE OF THE LOWER ORDER BYTE TO FOR DISPLAY
10AB 7185           2084                                             CALL            LCD_SHO
                    2085     
                    2086     
10AD 0122           2087                                             AJMP            EXAM_REG                           
                                          ; START AFRESH
                    2088     
                    2089     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    2090     ; EXECUTE (EXE)
                    2091     ; THIS IS A SR THAT COMMUNICATES WITH THE MICROPROCESSOR TELL IT TO CARRY OUT THE CODE LOAD
                             ED IN THE EXTERNAL DATA MEMORY
                    2092     
                    2093     ; I MAY USE INTERRUPT IN THE 8085 TO DO THIS
                    2094     
10AF 758701         2095     EXE:                    MOV                     PCON, #01H                              ; A
                             CTIVATE THE IDLE MODE
10B2 22             2096                                     RET
                    2097     
                    2098     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
10B3                2099     FLY_ADDRESS:
10B3 7185           2100                                             CALL            LCD_SHO                            
                                          ; SHOW THE LAST ALPHABET OF TGHE OPCODE (DISPLAY THE CHARATER IN 'A' FROM THE CALLER PROGRAM)
10B5                2101     FLY_ADDRESS_SKIP:
10B5 51AC           2102                                             CALL            KEYPAD_ID                          
                                          ; ENSURE A KEY IS DEPRESSED
10B7 3001FB         2103                                             JNB                     01H, FLY_ADDRESS_SKIP
10BA C201           2104                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2105     
10BC B42AF6         2106                                             CJNE            A, #'*', FLY_ADDRESS_SKIP       ; E
                             NSURES NEXT IS USE TO GIVE SPACE
10BF 7420           2107                                             MOV                     A, #' '                    
                                                  ; GIVE A GAP                               
10C1 7185           2108                                             CALL            LCD_SHO
10C3 C203           2109                                             CLR                     03H                        
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
10C5 71DA           2110                                             CALL            NEXT                               
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE OPCODE'S CODES
10C7                2111     FLY_SUB_MEM:                                    
10C7 753204         2112                                             MOV                     32H, #04H                  
                                                  ; ENSURES THAT ONLY FOUR NIBBLES (ie 2 BYTE DATA) ARE ENTERED
10CA D204           2113                                             SETB            04H                                
                                                  ; SET THE BYTE INDICATOR FOR A 2 BYTE(4 NIBBLE) OPERAND CONVERSION
10CC D206           2114                                             SETB            06H                                
                                                  ; SET FLAG TO CAUSE THE ASCII_2_HEX SR TO CARRY OUT HIGH ORDER BYTE MARRIAGE FIRST
                    2115     
10CE 51AC           2116     FA_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
10D0 3001FB         2117                                             JNB                     01H, FA_1
10D3 C201           2118                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2119     
10D5 30080C         2120                                             JNB                     08H, FA_CONTINUE           
                                          ; IF IT IS NOT SUB MEM PASSING THIS SEGMENT SKIP THE SEGMENT
10D8 C205           2121                                             CLR                     05H                        
                                                          ; REFRESH THE BYTE MARRIAGE FLAG. IT HELPS THE CANCEL SR
10DA B44E07         2122                                             CJNE            A, #'N', FA_CONTINUE            ; E
                             LOO NOTE THAT THE FOLLOWING 3 INSTRUCTION IS SOLELY FOR SUB MEM'S CANCEL
                    2123                                             CLR_LCD
10E2 80E3           2126                                             SJMP            FLY_SUB_MEM
                    2127     
10E4 120EEB         2128     FA_CONTINUE:            CALL            ASCII_2_HEX                                     ; D
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    50

                             O THE CONVERSION AND COMPARE
10E7 3002E4         2129                                             JNB                     02H, FA_1                  
                                                  ; ENSURES THAT THE KEY PRESSED IS BETWEEN 0 - F IN HEX
10EA C202           2130                                             CLR                     02H                        
                                                          ; GET READY FOR NEXT KEY
                    2131     
10EC E531           2132                                             MOV             A,31H                              
                                          ; DISPLAY THE NUMBER
10EE 7185           2133                                             CALL            LCD_SHO
10F0 D532DB         2134                                             DJNZ            32H, FA_1                          
                                          ; CHECK IF FOUR NIBBLES (TWO BYTES) DATA HAVE BEEN ENTERED
                    2135     
10F3 51AC           2136     FA_2:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
10F5 3001FB         2137                                             JNB                     01H, FA_2
10F8 C201           2138                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
10FA B42AF6         2139                                             CJNE            A, #'*', FA_2                      
                                  ; ENSURES NEXT IS PRESSED TO CONTINUE
                    2140     
10FD 200009         2141                                             JB                      00H, FA_EXIT               
                                          ; SKIP THE SR SEGMENT BELOW IF IT IS A SUB MEM CALL
                    2142     
1100 D203           2143                                             SETB            03H                                
                                                  ; SELECT OPERAND TYPE IN THE 'NEXT SR' (NOT OPCODE TYPE)
1102 D207           2144                                             SETB            07H                                
                                                  ; SELECT ADDRESS TYPE OPERAND IN THE 'NEXT SR'
1104 71DA           2145                                             CALL            NEXT                               
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE OPERAND CODES
1106 120EBB         2146                                             CALL            ADDRESS_DISPLAY_CONTROL         ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
1109                2147     FA_EXIT:                                                                                   
                                                                                             
1109 22             2148                                             RET
                    2149     
                    2150     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
110A                2151     FLY_DATA:
                    2152     ; THIS SUBROUTINE IS SUPPOSE TO CARRY PROGRAMS FOR THE DISPLAY OF ',' & ' '(SPACE)
                    2153     ; BEFORE THE INPUT DATA
110A 7185           2154                                             CALL            LCD_SHO                            
                                          ; SHOW THE LAST ALPHABET OF THE OPCODE (DISPLAY THE CHARATER IN 'A' FROM THE CALLER PROGRAM)
110C                2155     FLY_DATA_SKIP:                                                                             
                                          ; SKIPS THE INSTRUCTION 'CALL LCD_SHO'
110C 51AC           2156                                             CALL            KEYPAD_ID                          
                                          ; ENSURE A KEY IS DEPRESSED
110E 3001FB         2157                                             JNB                     01H, FLY_DATA_SKIP
1111 C201           2158                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2159                                             
1113 B42AF6         2160                                             CJNE            A, #'*', FLY_DATA_SKIP          ; E
                             NSURES NEXT IS USE TO GIVE SPACE
1116 742C           2161                                             MOV                     A, #','                    
                                                  ; PLACE A COMMA                            
1118 7185           2162                                             CALL            LCD_SHO
111A 7420           2163                                             MOV                     A, #' '                    
                                                  ; GIVE A GAP                               
111C 7185           2164                                             CALL            LCD_SHO
111E C203           2165                                             CLR                     03H                        
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
1120 71DA           2166                                             CALL            NEXT
                    2167                                             
1122 753202         2168                                             MOV                     32H, #02H                  
                                                  ; ENSURES THAT ONLY TWO NIBBLES (ie 1 BYTE DATA) ARE ENTERED
1125 C204           2169                                             CLR                     04H                        
                                                          ; CLEAR THE BYTE INDICATOR FOR A 1 BYTE(2 NIBBLE) OPERAND CONVERSION
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    51

                    2170     
1127 51AC           2171     FD_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
1129 3001FB         2172                                             JNB                     01H, FD_1
112C C201           2173                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2174     
112E 120EEB         2175                                             CALL            ASCII_2_HEX                        
                                          ; DO THE CONVERSION AND COMPARE
1131 3002F3         2176                                             JNB                     02H, FD_1                  
                                                  ; ENSURES THAT THE KEY PRESSED IS BETWEEN 0 - F IN HEX
1134 C202           2177                                             CLR                     02H                        
                                                          ; GET READY FOR NEXT KEY
                    2178     
1136 E531           2179                                             MOV             A,31H                              
                                          ; DISPLAY THE NUMBER
1138 7185           2180                                             CALL            LCD_SHO
113A D532EA         2181                                             DJNZ            32H, FD_1                          
                                          ; CHECK IF TWO NIBBLES (ONE BYTE) DATA HAVE BEEN ENTERED
                    2182     
113D 51AC           2183     FD_2:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
113F 3001FB         2184                                             JNB                     01H, FD_2
1142 C201           2185                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
1144 B42AF6         2186                                             CJNE            A, #'*', FD_2                      
                                  ; ENSURES NEXT IS USE TO GIVE SPACE
1147 D203           2187                                             SETB            03H                                
                                                  ; SELECT OPERAND TYPE 'NEXT SR' (NOT OPCODE TYPE)
1149 C207           2188                                             CLR                     07H                        
                                                          ; SELECT DATA TYPE OPERAND IN THE 'NEXT SR'
114B 71DA           2189                                             CALL            NEXT                               
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE OPCODE
114D 120EBB         2190                                             CALL            ADDRESS_DISPLAY_CONTROL         ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
                    2191     
1150 22             2192                                             RET
                    2193     
                    2194     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1151                2195     FLY_OPCODE:
                    2196     ; THIS IS A SUBROUTINE THAT IS DEDICATED TO 8085 INST. SETS THAT HAS NO OPERAND
                    2197                     
1151 7185           2198                                             CALL            LCD_SHO 
1153                2199     FLY_OPCODE_SKIP:
1153 51AC           2200                                             CALL            KEYPAD_ID                          
                                          ; ENSURE A KEY IS DEPRESSED
1155 3001FB         2201                                             JNB                     01H, FLY_OPCODE_SKIP
1158 C201           2202                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
115A B42AF6         2203                                             CJNE            A, #'*', FLY_OPCODE_SKIP        ; E
                             NSURES NEXT IS TO INPUT THE CODE TO HE EXTERNAL MEMORY
115D C203           2204                                             CLR                     03H                        
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
115F 71DA           2205                                             CALL            NEXT                               
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE OPCODE IN THE EXTERNAL MEMORY
1161 120EBB         2206                                             CALL            ADDRESS_DISPLAY_CONTROL         ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
                    2207     
1164 22             2208                                             RET
                    2209     
                    2210     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1165                2211     GET_READY:
                    2212     ; THIS SUBROUTINE CHECKS BUSY FLAG (P0.7=D7) TO ENABLE COMMAND OR DATA LATCH-IN
                    2213     ; SFR BITS: P0.7 (D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    52

1165 D287           2214                                             SETB            P0.7                               
                                          ; MAKE P1.7 INPUT PORT
1167 C2A5           2215                                             CLR             P2.5                               
                                          ; RS=0 ACCESS LCD COMMAND REG
1169 D2A6           2216                                             SETB            P2.6                               
                                          ; R/W=1 READ COMMAND REG
                    2217                                                                                                
                                                          ; READ COMMAND REG AND CHECK BUSY FLAG
116B                2218     BACK:   
116B C2B3           2219                                             CLR             P3.3                               
                                          ; E=0 L-TO-H PULSE
116D D2B3           2220                                             SETB            P3.3                               
                                          ; E=1 FOR L-TO-H PULSE
116F 2087F9         2221                                             JB                      P0.7, BACK                 
                                                  ; STAY UNTIL BUSY FLAG=0
1172 22             2222                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
                    2223     
                    2224     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    2225     ; GO_TO (GO TO)
                    2226     ; THIS A SR THE SELECTS OR GIVE THE USER THE OPPORTUNITY TO EXAMINE A PARTICULAR PART OF A 
                             PROGRAM
                    2227     ; USE UNDER THE V_HEX(VIEW HEX) MODE ONLY
                    2228     
1173                2229     GO_TO: 
1173 C2AF           2230                                             CLR                     IE.7                       
                                                  ; DISABLE THE EXTERNAL INTERRUPT(!INT0) USING THE GLOBAL IE BIT
1175 C205           2231                                             CLR                     05H                        
                                                          ; REFRESH THE BYTE MARRIAGE FLAG. IT HELPS THE CANCEL SR
                    2232     
                    2233                                             CLR_LCD                                            
                                                  ; CLEAR THE LCD SCREEN
                    2236                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
1182 474F2054       2239                                             DB                      'GO TO: ',0
1186 4F3A2000                
                    2240     
118A 753204         2241                                             MOV                     32H, #04H                  
                                                  ; ENSURES THAT ONLY FOUR NIBBLES (ie 2 BYTE DATA) ARE ENTERED
118D D204           2242                                             SETB            04H                                
                                                  ; SET THE BYTE INDICATOR FOR A 2 BYTE(4 NIBBLE) ADDRESS CONVERSION
118F D206           2243                                             SETB            06H                                
                                                  ; SET FLAG TO CAUSE THE ASCII_2_HEX SR TO CARRY OUT HIGH ORDER BYTE MARRIAGE FIRST
                    2244     
1191 51AC           2245     GT_1:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE THAT A KEY IS PRESSED
1193 3001FB         2246                                             JNB                     01H, GT_1
1196 C201           2247                                             CLR                     01H                        
                                                          ; GET READY FOR THE NEXT KEY
                    2248     
1198 B44E02         2249                                             CJNE            A, #'N', GT_2                      
                                  ; ELOO NOTE THAT THE FOLLOWING 3 INSTRUCTION IS SOLELY FOR GOTO'S CANCEL
                    2250     ; IF 'N' IS PRESSED (ie CANCEL) RETURN TO THE CALL PROGRAM
119B 806D           2251                                             SJMP            EXIT_GOTO                          
                                          ; ESCAPE THE OSR(GOTO)
                    2252     
119D 120EEB         2253     GT_2:                           CALL            ASCII_2_HEX                                
                                  ; DO THE CONVERSION AND COMPARE
11A0 3002EE         2254                                             JNB                     02H, GT_1                  
                                                  ; ENSURES THAT THE KEY PRESSED IS BETWEEN 0 - F IN HEX
11A3 C202           2255                                             CLR                     02H                        
                                                          ; GET READY FOR NEXT KEY
                    2256     
11A5 E531           2257                                             MOV             A,31H                              
                                          ; DISPLAY THE NUMBER
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    53

11A7 7185           2258                                             CALL            LCD_SHO
11A9 D532E5         2259                                             DJNZ            32H, GT_1                          
                                          ; CHECK IF FOUR NIBBLES (TWO BYTES) DATA HAVE BEEN ENTERED
                    2260     
11AC 51AC           2261     GT_3:                           CALL            KEYPAD_ID                                  
                                  ; ENSURE A KEY IS DEPRESSED
11AE 3001FB         2262                                             JNB                     01H, GT_3
11B1 C201           2263                                             CLR                     01H                        
                                                          ; GET READY FOR NEXT KEY
                    2264                                             
                    2265     ; WAIT FOR NEXT OR CANCEL
11B3 B44E02         2266                                             CJNE            A, #'N', GT_4                      
                                  ; ENSURES NEXT IS PRESSED TO CONTINUE OR 'N' TO ESCAPE THE OSR
11B6 8052           2267                                             SJMP            EXIT_GOTO                          
                                          ; ESCAPE THE OSR(GOTO)
                    2268     
11B8 B42AF1         2269     GT_4:                           CJNE            A, #'*', GT_3                       ; ACCEP
                             T USER'S INPUT ADDRESS FOR TEST
                    2270     
                    2271     ; COMPARE ADDRESS WITH THE START ADDRESS MEM LOCS.
11BB E53F           2272                                             MOV                     A, 3FH                     
                                                  ; LOAD THE START ADDRESS HOB FOR COMPARISON     WITH GOTO'S HOB ADDRESS
11BD B53502         2273                                             CJNE            A, 35H, GT_5
11C0 8004           2274                                             SJMP            GT_6                               
                                          ; IF EQUAL JUMP TO TEST THE LOB(THIS IS DONE ONLY FOR EQUALITY ENCOUTERED)
11C2 5025           2275     GT_5:                           JNC                     OUT_OF_RANGE                       
                                  ; EXIT IF START ADDRESS HOB IS GREATER THAN THE GOTO'S HOB ADDRESS
11C4 8008           2276                                             SJMP            GT_8                               
                                          ; SKIP LOB ADDRESS TEST, CONTINUE WITH THE END ADDRESS TEST
                    2277     
11C6 E53E           2278     GT_6:                           MOV                     A, 3EH                             
                                          ; LOAD THE START ADDRESS LOB FOR COMPARISON     WITH GOTO'S LOB ADDRESS
11C8 B53401         2279                                             CJNE            A, 34H, GT_7
11CB D3             2280                                             SETB            C
11CC 501B           2281     GT_7:                           JNC                     OUT_OF_RANGE                       
                                  ; EXIT IF START ADDRESS LOB IS GREATER THAN THE GOTO'S LOB ADDRESS 
                    2282                                                                                                
                                                          ; ELSE CONTINUE
                    2283     ; COMPARE ADDRESS WITH THE END ADDRESS MEM LOCS.
11CE E541           2284     GT_8:                           MOV                     A, 41H                             
                                          ; LOAD THE END ADDRESS HOB FOR COMPARISON WITH GOTO'S HOB ADDRESS
11D0 B53502         2285                                             CJNE            A, 35H, GT_9
11D3 8004           2286                                             SJMP            GT_10                              
                                          ; IF EQUAL JUMP TO TEST THE LOB(THIS IS DONE ONLY FOR EQUALITY ENCOUTERED)
11D5 4012           2287     GT_9:                           JC                      OUT_OF_RANGE                       
                                  ; EXIT IF END ADDRESS HOB IS GREATER THAN THE GOTO'S HOB ADDRESS
11D7 8008           2288                                             SJMP            GT_12                              
                                          ; SKIP LOB ADDRESS TEST, AND CARRY OUT A JUMP TO THE USER'S DESIRED ADDRESS
                    2289     
11D9 E540           2290     GT_10:                          MOV                     A, 40H                             
                                          ; LOAD THE END ADDRESS LOB FOR COMPARISON WITH GOTO'S LOB ADDRESS
11DB B53401         2291                                             CJNE            A, 34H, GT_11
11DE C3             2292                                             CLR                     C
11DF 4008           2293     GT_11:                          JC                      OUT_OF_RANGE                       
                                  ; EXIT IF END ADDRESS LOB IS GREATER THAN THE GOTO'S LOB ADDRESS ELSE CONTINUE
                    2294     ; ALL TESTS HAVE BEEN COMPLETED
                    2295                                                                                                
                                                          ; ACCEPT USER'S INPUT ADDRESS AND EXIT
11E1 85353D         2296     GT_12:                          MOV                     3DH, 35H                           
                                          ; LOAD THE USER'S DESIRED ADDRESS(HOB) INTO THE V_HEX CURRENT ADDRESS MEM LOC.2(HOB)
11E4 85343C         2297                                             MOV                     3CH, 34H                   
                                                  ; LOAD THE USER'S DESIRED ADDRESS(LOB) INTO THE V_HEX CURRENT ADDRESS MEM LOC.1(LOB)
11E7 8021           2298                                             SJMP            EXIT_GOTO
11E9                2299     OUT_OF_RANGE:                   
                    2300                                             CLR_LCD                                            
                                                  ; CLEAR THE LCD SCREEN
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    54

                    2303                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
11F4 20204F75       2306                                             DB                      '  Out Of Range  ',0
11F8 74204F66                
11FC 2052616E                
1200 67652020                
1204 00                      
1205 120F51         2307                                             CALL            DELAY_2S                           
                                          ; DELAY FOR THE USER TO SEE THE MESSAGE
1208 2173           2308                                             AJMP            GO_TO                              
                                          ; START AFRESH
120A                2309     EXIT_GOTO:
120A D2AF           2310                                             SETB            IE.7                               
                                          ; NOW ENABLE THE EXTERNAL INTERRUPT
120C 22             2311                                             RET
                    2312                     ; IF THE ADDRESS PUT BY THE USER PASS THE TEST OF COMPARISON LOAD THE APPRO
                             PRIATE MEM LOCS WITH THE ADDRESS AND EXIT THE OSR
                    2313                     ; ELSE DISPLAY THE FOLOWING MESSAGE: 'OUT OF RANGE' FOR TWO SECONDS (USE 1S
                             EC X 2) THEN JUMP BACK TO BLANK THE LCD SCREEN
                    2314     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
120D                2315     HEX_2_ASCII:
                    2316     ; THIS A SR THAT TAKES CARE OF GENERATING THE EQUIVALENT ASCII CODE FROM A HEX INPUT CODE
                    2317                                     ; HIGH ORDER BYTE CONVERSION BEGINS     HERE
120D E536           2318                                     MOV                     A, 36H                             
                                  ; LOAD THE HEX BYTE TO BE CONVERTED INTO 'A'
120F 54F0           2319                                     ANL                     A, #0F0H                           
                                  ; MASK THE LOW ORDER BYTE
1211 C4             2320                                     SWAP            A                                          
                                  ; HOB <==> LOB
1212 B40A01         2321                                     CJNE            A, #0AH, H2A_1
1215 C3             2322                                     CLR                     C
                    2323                                                                                                
                                          ; IF 'A' >= 0AH DO THE FOLLOWING INSTRUCTIONS
1216 4002           2324     H2A_1:                  JC                      H2A_2                                   ; A
                             DD 07H & LATER 30H 
1218 2407           2325                                     ADD                     A, #07H                            
                                  ; (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE)
                    2326     
                    2327                                                                                                
                                          ; IF 'A' < 0AH DO THE FOLLOWING INSTRUCTIONS
121A 2430           2328     H2A_2:                  ADD                     A, #30H                                 ; A
                             DD 30H (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE) 
                    2329     
121C F538           2330                                     MOV                     38H, A                             
                                  ; SAVE THE ASCII CODE OF THE HIGH ORDER BYTE IN MEM. 38H
                    2331                                                                                                
                                          ; HIGH ORDER BYTE CONVERSION ENDS HERE
                    2332     
                    2333                                     ; LOW ORDER BYTE CONVERSION BEGINS HERE
121E E536           2334                                     MOV                     A, 36H                             
                                  ; LOAD THE HEX BYTE TO BE CONVERTED INTO 'A'
1220 540F           2335                                     ANL                     A, #0FH                            
                                  ; MASK THE HIGH ORDER BYTE
1222 B40A01         2336                                     CJNE            A, #0AH, H2A_3
1225 C3             2337                                     CLR                     C
                    2338                                                                                                
                                          ; IF 'A' >= 0AH DO THE FOLLOWING INSTRUCTIONS
1226 4002           2339     H2A_3:                  JC                      H2A_4                                   ; A
                             DD 07H & LATER 30H 
1228 2407           2340                                     ADD                     A, #07H                            
                                  ; (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE)
                    2341     
                    2342                                                                                                
                                          ; IF 'A' < 0AH DO THE FOLLOWING INSTRUCTIONS
122A 2430           2343     H2A_4:                  ADD                     A, #30H                                 ; A
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    55

                             DD 30H (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE) 
                    2344     
122C F537           2345                                     MOV                     37H, A                             
                                  ; SAVE THE ASCII CODE OF THE LOWER ORDER BYTE IN MEM. 37H
                    2346     
                    2347                                                                                                
                                          ; LOW ORDER BYTE CONVERSION ENDS HERE
122E 22             2348                                     RET
                    2349     
                    2350     ; TESTED: QC PASSED SYNTAXICALLY AND SEMANTICALLY
                    2351     
                    2352     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
122F                2353     INTRO_CPLT:                     
                    2354     ;                                       MOV                     A, #80H                    
                                                  ; THIS INSTRUCTION MY NOT BE RELEVANT SINCE THIS MESSAGE IS CALLED IMMEDIATELY AFTER 
                    2355                                             D_STR                                              
                                                  ; A LCD SCREEN CLEAR THUS DDRAM ADDRESS AUTOMATICALLY RESETS TO LINE 1
1235 20202053       2358                                             DB                      '   SBC 8085uP   ',0       
                                  ; LINE 1
1239 42432038                
123D 30383575                
1241 50202020                
1245 00                      
1246 74C0           2359                                             MOV                     A, #0C0H                   
                                                  ; SET DDRAM ADDRESS TO LINE 2
1248 715E           2360                                             CALL            LCD_CMD                           
                    2361                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
1250 62792049       2364                                             DB                      'by IFEDIORA E.C.',0       
                                  ; LINE 2
1254 46454449                
1258 4F524120                
125C 452E432E                
1260 00                      
1261 22             2365                                             RET
                    2366     
                    2367     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1262                2368     INTRO_MSG:
                    2369     ;
                    2370     ;
                    2371     ;                                       MOV                     A, #80H                    
                                                  ; THIS INSTRUCTION MY NOT BE RELEVANT SINCE THIS MESSAGE IS CALLED IMMEDIATELY AFTER 
                    2372                                             D_STR                                              
                                                  ; A LCD SCREEN CLEAR THUS DDRAM ADDRESS AUTOMATICALLY RESETS TO LINE 1
1268 50726573       2375                                             DB                      'Press 0 for MHEX',0       
                                  ; LINE 1
126C 73203020                
1270 666F7220                
1274 4D484558                
1278 00                      
1279 74C0           2376                                             MOV                     A, #0C0H                   
                                                  ; SET DDRAM ADDRESS TO LINE 2
127B 715E           2377                                             CALL            LCD_CMD                           
                    2378                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS
1283 50726573       2381                                             DB                      'Press 1 for ASM',0        
                                      ; LINE 2
1287 73203120                
128B 666F7220                
128F 41534D00                
1293 22             2382                                             RET
                    2383     
                    2384     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    56

1294                2385     INTRO_SUBMEM_REQUEST:
                    2386     ;                               
                    2387                                             D_STR                                              
                                                  ; DISPLAY THE FOLLOWING STRINGS 
129A 456E7465       2390                                             DB                      'Enter Start Addr',0       
                                  ; LINE 1
129E 72205374                
12A2 61727420                
12A6 41646472                
12AA 00                      
12AB 22             2391                                             RET
                    2392     
                    2393     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
12AC                2394     KEYPAD_ID:
                    2395     ; THIS SUBROUTINE RETRIEVES DATA FROM THE KEYPAD AND IDENTIFIES THE KEY PRESSED
                    2396     ; IT STORES THE ASCII CODE OF THE KEY PRESSED IN THE CHARACTER DISPLAY MEMORY (ie CDM 31H)
                    2397     ; IT ALSO HAS IN IT SOME STATUTORY FLAGS SUCH AS: 01H(KEY PRESSED FLAG),
                    2398     ; ALSO HAS IN IT SOME STATUTORY MEMORY LOC SUCH AS: 30H(SUB MEM DELAY COUNTER 4 X 500ms), L
                             OAD #01H IF KEY IS PRESSED
                    2399     
                    2400     ; ****************************** KEYPAD_ID
12AC 759000         2401                                     MOV     P1, #00H                                ; MAKE P1 O
                             UTPUT
12AF 75B0FF         2402                                     MOV             P3, #0FFH                               ; M
                             AKE P3.0, P3.1, P3.4 & P3.5 INPUT PORTS AND SECURE THE OTHER PINS' SETTINGS
12B2 E5B0           2403                                     MOV     A, P3                                   ; READ THE 
                             ROW
                    2404     ;                               ANL     A,#0FFH                                 ; MASK THE 
                             4 MSB (3 COLUMNS & 1(P1.7) EMPTY PIN)
12B4 B4FF02         2405                                     CJNE    A,#0FFH,KEY2                            ; IS ANY KE
                             Y DEPRESSED? IF 'NO' RETURN TO KEYPAD_ID ELSE JUMP TO KEY2 FOR COMFIRMATION
12B7 615D           2406                                     JMP     KEYFNL                                  ; THE ABOVE
                              SEGMENT ENSURES THAT KEYPAD IS FREE BEFORE A NEW SCAN IS CARRIED OUT
12B9                2407     KEY2:   
12B9 716B           2408                                     CALL    LCD_DLY                                 ; DELAY TO 
                             DEBOUNCE KEYPAD
12BB 759000         2409                                     MOV     P1, #00H                                ; MAKE P1 O
                             UTPUT
12BE 75B0FF         2410                                     MOV             P3, #0FFH                               ; M
                             AKE P3.0, P3.1, P3.4 & P3.5 INPUT PORTS AND SECURE THE OTHER PINS' SETTINGS
12C1 E5B0           2411                                     MOV     A,P3                                    ; READ THE 
                             ROW AGAIN TO COMFIRM KEY DEPRESSED 
                    2412     ;                               ANL     A,#0FFH                                 ; MASK THE 
                             FOLLOWING BITS' RESULTS READ FROM P3: D2, D3, D6 & D7 (THEY ARE NOT FROM ROW PINS)
12C3 B4FF02         2413                                     CJNE    A,#0FFH,KEY3                    ; IS ANY KEY DEPRES
                             SED? IF 'NO' RETURN TO KEYPAD_ID ELSE JUMP TO KEY3 FOR IDENTIFICATION
12C6 615D           2414                                     JMP     KEYFNL
                    2415     ; ****************************** ROW SCAN STARTS
12C8                2416     KEY3:
12C8 7D06           2417                                     MOV     R5,#06H                                 ; LOAD 6 IN
                             TO R5 FOR ROW SCAN (NEEDED SCAN = 4 OF 6; THE OTHER 2 AT THE MIDDLE ARE USELESS)
12CA 44CC           2418                                     ORL             A, #0CCH                                ; #
                             0CCH = 11001100B. THIS IS DONE TO PURPOSELY SKIP (PARTICULARLY) P3.2 & P3.3
                    2419                                                                                                
                                  ; P3.6 & P3.7 HAS BEEN TAKEN CARE OF (ie SKIP) BY THE BOTH INSTRUCTIONS JUST ABOVE
12CC                2420     KEY31:  
12CC 13             2421                                     RRC     A                                               ; S
                             CAN EACH OF THE 4 ROWS
12CD 5002           2422                                     JNC     KEY4                                    ; IF CY = 0
                             , A KEY HAS BEEN DEPRESSED ON THAT ROW JUMP TO KEY4 ELSE CONTINUE
12CF DDFB           2423                                     DJNZ    R5,KEY31                                ; SCAN NEXT
                              ROW
12D1                2424     KEY4:
12D1 BD0605         2425                                     CJNE    R5,#6,KEY41                             ; IF R5 = 6
                              LOAD ROW_1 ADDRESS AND JUMP TO KEY41 ELSE JUMP TO KEY5
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    57

12D4 9014DA         2426                                     MOV     DPTR,#ROW_1
12D7 801A           2427                                     JMP     KEY5
12D9                2428     KEY41:  
12D9 BD0505         2429                                     CJNE    R5,#5,KEY42                             ; IF R5 = 5
                              LOAD ROW_2 ADDRESS AND JUMP TO KEY42 ELSE JUMP KEY5
12DC 9014E2         2430                                     MOV     DPTR,#ROW_2
12DF 8012           2431                                     JMP     KEY5
12E1                2432     KEY42:  
12E1 BD0205         2433                                     CJNE    R5,#2,KEY43                             ; IF R5 = 2
                              LOAD ROW_3 ADDRESS AND JUMP TO KEY43 ELSE JUMP KEY5
12E4 9014EA         2434                                     MOV     DPTR,#ROW_3
12E7 800A           2435                                     JMP     KEY5
12E9                2436     KEY43:  
12E9 BD0105         2437                                     CJNE    R5,#1,KEY44                             ; IF R5 = 1
                              LOAD ROW_4 ADDRESS AND JUMP TO KEY44 ELSE JUMP KEY5
12EC 9014F2         2438                                     MOV     DPTR,#ROW_4
12EF 8002           2439                                     JMP     KEY5
12F1                2440     KEY44:                                                                                  
12F1 806A           2441                                     JMP     KEYFNL                                  ; ERROR! RE
                             TURN TO KEYPAD_ID (NO KEY DEPRESSED)
                    2442     ; *************************** COLUMN SCAN STARTS
12F3                2443     KEY5:                                                                   
12F3 75B0FF         2444                                     MOV     P3, #0FFH                               ; MAKE ALL 
                             INPUT (IT MAY MEAN CLEAR, JUST COMFIRM LATER!)
12F6 759000         2445                                     MOV     P1, #00H                                ;  
12F9 75B0FF         2446                                     MOV             P3, #0FFH                               ; M
                             AKE P3 OUTPUT NOW
12FC E590           2447                                     MOV     A, P1                                   ; READ P1
12FE                2448     KEY6:                                                                           
12FE 7D09           2449                                     MOV     R5,#9                                   ; LOAD 9 IN
                             TO R5 FOR COLUMN SCAN
1300                2450     KEY61:  
1300 13             2451                                     RRC     A                                               ; S
                             CAN EACH OF THE 8 COLUMNS
1301 5004           2452                                     JNC     KEY7                                    ; IF CY = 0
                             , A KEY HAS BEEN DEPRESSED ON THAT COLUMNS JUMP TO KEY7 ELSE CONTINUE
1303 DDFB           2453                                     DJNZ    R5,KEY61                                ; SCAN NEXT
                              COLUMN
1305 8056           2454                                     JMP     KEYFNL                                  ; ERROR! RE
                             TURN TO KEYPAD_ID (NO KEY DEPRESSED)
                    2455     ; *****************************LOAD DATA ADDRESS        
1307                2456     KEY7:
1307 BD0902         2457                                     CJNE    R5,#9,KEY71                             ; IF R5 ~= 
                             9 CONTINUE ELSE JUMP TO KEY71
130A 8041           2458                                     JMP     KEY8                                    ; JUMP TO K
                             EY8 AND PROVIDE DATA. REMEMBER DPTR CONTAINS X00H ADRRESS HERE
                    2459                                                                                                
                                  ; THUS THE DISPARITY WHILE INCREMENT OCCUR ALONG (DOWN THE PROGRAM)
130C                2460     KEY71:  
130C BD0803         2461                                     CJNE    R5,#8,KEY72                             ; IF R5 ~= 
                             8 CONTINUE ELSE JUMP TO KEY72
130F A3             2462                                     INC     DPTR                                    ; INCREMENT
                              ADDRESS ALREADY IN DPTR ONCE FOR COLUMN 2
1310 803B           2463                                     JMP     KEY8                                    ; JUMP TO K
                             EY8 AND PROVIDE DATA
1312                2464     KEY72:  
1312 BD0704         2465                                     CJNE    R5,#7,KEY73                             ; IF R5 ~= 
                             7 CONTINUE ELSE JUMP TO KEY73
1315 A3             2466                                     INC     DPTR                                    ; INCREMENT
                              ADDRESS ALREADY IN DPTR TWICE FOR COLUMN 3
1316 A3             2467                                     INC     DPTR
1317 8034           2468                                     JMP     KEY8                                    ; JUMP TO K
                             EY8 AND PROVIDE DATA
1319                2469     KEY73:  
1319 BD0605         2470                                     CJNE    R5,#6,KEY74                     ; IF R5 ~= 6 CONTIN
                             UE ELSE JUMP TO KEY74
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    58

131C A3             2471                                     INC     DPTR                                    ; INCREMENT
                              ADDRESS ALREADY IN DPTR THRICE FOR COLUMN 4
131D A3             2472                                     INC     DPTR
131E A3             2473                                     INC     DPTR    
131F 802C           2474                                     JMP     KEY8                                    ; JUMP TO K
                             EY8 AND PROVIDE DATA
1321                2475     KEY74:  
1321 BD0506         2476                                     CJNE    R5,#5,KEY75                     ; IF R5 ~= 5 CONTIN
                             UE ELSE JUMP TO KEY75
1324 A3             2477                                     INC     DPTR                                    ; INCREMENT
                              ADDRESS ALREADY IN DPTR 4 TIMES FOR COLUMN 5
1325 A3             2478                                     INC     DPTR
1326 A3             2479                                     INC     DPTR    
1327 A3             2480                                     INC     DPTR
1328 8023           2481                                     JMP     KEY8                                    ; JUMP TO K
                             EY8 AND PROVIDE DATA
132A                2482     KEY75:  
132A BD0407         2483                                     CJNE    R5,#4,KEY76                     ; IF R5 ~= 4 CONTIN
                             UE ELSE JUMP TO KEY76
132D A3             2484                                     INC     DPTR                                    ; INCREMENT
                              ADDRESS ALREADY IN DPTR 5 TIMES FOR COLUMN 6
132E A3             2485                                     INC     DPTR
132F A3             2486                                     INC     DPTR    
1330 A3             2487                                     INC     DPTR
1331 A3             2488                                     INC     DPTR
1332 8019           2489                                     JMP     KEY8                                    ; JUMP TO K
                             EY8 AND PROVIDE DATA
1334                2490     KEY76:  
1334 BD0308         2491                                     CJNE    R5,#3,KEY77                     ; IF R5 ~= 3 CONTIN
                             UE ELSE JUMP TO KEY77
1337 A3             2492                                     INC     DPTR                                    ; INCREMENT
                              ADDRESS ALREADY IN DPTR 6 TIMES FOR COLUMN 7
1338 A3             2493                                     INC     DPTR
1339 A3             2494                                     INC     DPTR    
133A A3             2495                                     INC     DPTR
133B A3             2496                                     INC     DPTR
133C A3             2497                                     INC     DPTR
133D 800E           2498                                     JMP     KEY8                                    ; JUMP TO K
                             EY8 AND PROVIDE DATA
133F                2499     KEY77:  
133F BD0209         2500                                     CJNE    R5,#2,KEY78                     ; IF R5 ~= 2 CONTIN
                             UE ELSE JUMP TO KEY78
1342 A3             2501                                     INC     DPTR                                    ; INCREMENT
                              ADDRESS ALREADY IN DPTR 7 TIMES FOR COLUMN 8
1343 A3             2502                                     INC     DPTR
1344 A3             2503                                     INC     DPTR
1345 A3             2504                                     INC     DPTR
1346 A3             2505                                     INC     DPTR
1347 A3             2506                                     INC     DPTR
1348 A3             2507                                     INC     DPTR    
1349 8002           2508                                     JMP     KEY8                                    ; JUMP TO K
                             EY8 AND PROVIDE DATA
134B                2509     KEY78:
134B 8010           2510                                     JMP     KEYFNL                                  ; RETURN TO
                              KEYPAD_ID
134D                2511     KEY8:
134D 759000         2512                                     MOV     P1, #00H                                ; MAKE P1 O
                             UTPUT
1350 75B0F7         2513                                     MOV             P3, #0F7H                               ; M
                             AKE P3.0, P3.1, P3.4 & P3.5 INPUT PORTS AND SECURE THE OTHER PINS' SETTINGS
1353 E5B0           2514                                     MOV     A, P3                                   ; READ THE 
                             ROW
1355 B433F5         2515                                     CJNE    A,#33H,KEY8                             ; IS ANY KE
                             Y DEPRESSED? IF 'NO' RETURN TO KEYPAD_ID ELSE JUMP TO KEY2 FOR COMFIRMATION
                    2516                                                                                                
                                  ; THE 4 INSTRUCTIONS JUST ABOVE IS USED TO PREVENT REPETITIVE DISPLAY ON KEY HOLD DOWN
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    59

                    2517     
1358 7400           2518                                     MOV     A,#0                                    ; CLEAR THE
                              ACCUMULATOR
135A 93             2519                                     MOVC    A,@A+DPTR                               ; LOAD THE 
                             CODE FOR DISPLAY
135B 7185           2520                                     CALL    LCD_SHO                                 ; CALL SUBR
                             OUTINE TO DISPLAY DATA
                    2521     
135D                2522     KEYFNL:
135D 22             2523                                     RET                                                        
                                  ; RETURN TO KEYPAD_ID
                    2524     
                    2525     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
135E                2526     LCD_CMD:
                    2527     ; THIS SUBROUTINE SENDS THE ASCII CODE FOR THE COMMAND CHARATER TO BE DISPLAYED ON THE LCD
                    2528     ; IT CALLS READY (OSR) TO CHECK BUSY FLAG FOR COMMAND TO BE LATCHED-IN
                    2529     ; OPERATING REGISTER: A
                    2530     ; SFR BITS: P0 (LCD DATA PORT D0-D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
                    2531      
135E 3165           2532                                             ACALL           GET_READY                          
                                          ; IS LCD READY?
1360 F580           2533                                             MOV             P0, A                              
                                          ; LATCH COMMAND INTO LCD DATA PORT        
1362 C2A5           2534                                             CLR             P2.5                               
                                          ; RS=0 ACCESS LCD DATA REG
1364 C2A6           2535                                             CLR                     P2.6                       
                                                  ; WRITE
1366 D2B3           2536                                             SETB            P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
1368 C2B3           2537                                             CLR             P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
136A 22             2538                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
                    2539     
                    2540     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
136B                2541     LCD_DLY:
136B 755032         2542                                             MOV             50H,#50
136E                2543     HERE2:
136E 755132         2544                                             MOV             51H,#50
1371                2545     HERE1:
1371 D551FD         2546                                             DJNZ            51H,HERE1       
1374 D550F7         2547                                             DJNZ            50H,HERE2
1377 22             2548                                             RET
                    2549     
                    2550     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1378                2551     LCD_SET:
                    2552     ; THIS SUBROUTINE SETS THE MODE OF OPERATION OF THE LCD
                    2553     ; IT CALLS LCD_CMD OSR TO LATCH-IN THE COMMAND
                    2554     ; OPERATING REGISTER: A
1378 7438           2555                                             MOV             A, #38H                            
                                          ; 5 X 7 MATRIX DISPLAY
137A 715E           2556                                             CALL            LCD_CMD                            
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
137C 7480           2557                                             MOV             A, #80H                            
                                          ; DISPLAY ON LINE 1
137E 715E           2558                                             CALL            LCD_CMD                            
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
1380 7406           2559                                             MOV             A, #06H                            
                                          ; INCREMENT FROM LEFT TO RIGHT
1382 715E           2560                                             CALL            LCD_CMD                            
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
1384 22             2561                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    60

                    2562     
                    2563     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
1385                2564     LCD_SHO:
                    2565     ; THIS SUBROUTINE SENDS THE ASCII CODE FOR THE DATA CHARATER TO BE DISPLAYED ON THE LCD
                    2566     ; IT CALLS READY (OSR) TO CHECK BUSY FLAG FOR DATA TO BE LATCHED-IN
                    2567     ; OPERATING REGISTER: A
                    2568     ; SFR BITS: P0 (LCD DATA PORT D0-D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
1385 3165           2569                                             ACALL           GET_READY                          
                                          ; IS LCD READY?
1387 F580           2570                                             MOV             P0, A                              
                                          ; LATCH DATA INTO LCD DATA PORT 
1389 D2A5           2571                                             SETB            P2.5                               
                                          ; RS=1, ACCESS LCD DATA REG
138B C2A6           2572                                             CLR                     P2.6                       
                                                  ; R/!W=0, WRITE
138D D2B3           2573                                             SETB            P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
138F C2B3           2574                                             CLR             P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
1391 22             2575                                             RET
                    2576     
                    2577     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    2578     ; =*=*=*=*=*=*=*=*=*=*=*=*=*   MACHINE LANGUAGE (IN HEX, MHEX) AS THE CODE/PROGRAMMING LANG
                             UAGE TYPE (CPLT)  =*=*=*=*=*=*=*=*=*=*=*=*=*=
                    2579     ; THIS MANIS SEGMENT/SUBROUTINE IS DEDICATED FOR MHEX
                    2580     ; THE CHOICE WOULD ALWAYS BE BETWEEN MACHINE LANGUAGE (IN HEX, MHEX) AND ASSEMBLY LANGUAGE 
                             (ASM)
                    2581     ; A TEST FLAG SHOULD COME AFTER SUB MEM FLAG IN THE MAIN PROGRAM
                    2582     
1392                2583     M_HEX:                  
                    2584     ; ELOO PLEASE INCLUDE THE INSTRUCTIONS TO CARRY OUT DISPLAY ON LINE 2 HERE
1392 51AC           2585                                     CALL            KEYPAD_ID                                  
                                          ; ENSURE A KEY(1ST KEY) IS DEPRESSED
1394 3001FB         2586                                     JNB                     01H, M_HEX
1397 C201           2587                                     CLR                     01H                                
                                                          ; GET READY FOR NEXT KEY
                    2588     
1399 B43001         2589                                     CJNE            A, #30H, MH_1                              
                                  ; THE CONTENT OF 'A' MUST SATISFY THE FOLLOWING INEQUALITY: 30H =< A =< 46H
139C C3             2590                                     CLR                     C                                  
                                                          ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                    2591     
139D 40F3           2592     MH_1:                   JC                      M_HEX                                      
                                          ; IF A > 30 CONTINUE ELSE GO BACK TO MHEX
139F 9430           2593                                     SUBB            A, #30H                                    
                                          ; SUBTRACT 30H FROM A REGISTER
13A1 B40A01         2594                                     CJNE            A, #0AH, MH_2                              
                                  
13A4 C3             2595                                     CLR                     C                                  
                                                          ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                    2596     
13A5 4008           2597     MH_2:                   JC                      MH_4
13A7 9407           2598                                     SUBB            A, #07H                                    
                                          ; SUBTRACT 07H FROM 'A' REGISTER
13A9 B40F01         2599                                     CJNE            A, #0FH, MH_3                              
                                  ; CHECK IF THE RESULT OF THE SUBTRACTION IS GREATER THAN 0FH; IF SO EXIT THE SR ELSE CONTINUE
13AC D3             2600                                     SETB            C                                          
                                                  ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                    2601     
13AD 50E3           2602     MH_3:                   JNC                     M_HEX                                      
                                          ; START AFRESH (ie MHEX) IF THE KEYPAD INPUT DOES NOT SATISFY THE ABOVE INEQUALITY
                    2603                                                                                                
                                                          ; ELSE CONTINUE
13AF B20A           2604     MH_4:                   CPL                     0AH                                        
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    61

                                                  ; FORMAT THE DATA AND SAVE TEMPORARILY IN THE MEM LOC 33H
13B1 300A05         2605                                     JNB                     0AH, MH_5
13B4 C4             2606                                     SWAP            A
13B5 F533           2607                                     MOV                     33H, A                             
                                                  
13B7 8004           2608                                     SJMP            MH_6                                       
                                          ; SKIP OPERATIONS IN LABEL MHEX_5
                    2609     
13B9 4533           2610     MH_5:                   ORL                     A, 33H                                     
                                          ; FORMAT COMPLETED
13BB F533           2611                                     MOV                     33H, A                             
                                                  ; CARRY OUT THE FINAL SAVE
                    2612                                     
13BD E531           2613     MH_6:                   MOV                     A, 31H                                     
                                          ; LOAD THE ASCII CODE FOR THE CURRENT CHARARTER TO BE DISPLAYED
13BF 7185           2614                                     CALL            LCD_SHO
                    2615     
13C1 D53BCE         2616                                     DJNZ            3BH, M_HEX                                 
                                          ; DECREMENT AND JUMP TILL ZERO TO CONTINUE
                    2617     
13C4 51AC           2618     MH_7:                   CALL            KEYPAD_ID                                          
                                  ; ENSURE A KEY IS DEPRESSED
13C6 3001FB         2619                                     JNB                     01H, MH_7
13C9 C201           2620                                     CLR                     01H     
                    2621     
13CB B42AF6         2622                                     CJNE            A, #'*', MH_7                              
                                  ; WAIT FOR 'NEXT KEY' TO BE PRESSED
                    2623     
13CE 753B02         2624                                     MOV                     3BH, #02H                          
                                                  ; LOAD ANOTHER TWO DIGIT COUNT INTO MHC FOR THE NEXT INPUT (INSTRUCTION SET)
                    2625     
13D1 C203           2626                                     CLR                     03H                                
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
13D3 71DA           2627                                     CALL            NEXT                                       
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE HEX CODE IN THE EXTERNAL MEMORY
13D5 120EBB         2628                                     CALL            ADDRESS_DISPLAY_CONTROL                 ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
                    2629     
13D8 6192           2630                                     AJMP            M_HEX                                      
                                          
                    2631     ; ELOO U MAY PUT UR FLAG FOR SUB MEM ASCII_2_HEX SR CALL HERE(NOTE SUCH FLAG MUST BE CLEAR 
                             AT THE SUB MEM SR ON RETURN IMMEDIATELY)
                    2632     ; EXPECTED FLAG INSTRUCTION: JB         SubMem'sAscii2hexFlag, EXIT_A2H
                    2633     
                    2634     ; THE TEST IS COMPLETED. THE INEQUQLITY: 30H =< A =< 46H HAS BEEN SATISFIED AND CONVERSION 
                             HAS TAKEN PLACE!!!
                    2635     
                    2636     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    2637     ; THIS SUBROUTINE LOADS THE APPROPRIATE OPCODE OR OPERAND(ie DATA OR ADDRESS) INTO THEIR PE
                             RMANENT LOCATION
                    2638     ; IT DIFFRENETIATES OPCODE CALL FROM AN OPERAND CALL BY USING THE NEXT TYPE FLAG (ie NCF 03
                             H)
                    2639     ; WHEN IT IS SET IT CALLS THE OPERAND ELSE THE OPCODE, NCF IS TESTED AT THE ENTRANCE TO THE
                              SR 
                    2640     ; IT ALSO HANDLES THE SUB MEM START ADDRESS INTIALIZATION 
                    2641     
                    2642     ; THIS IS THE SR WHERE MEMORY ADDRESS INCREMENT DISPLAY REGISTER IS TO BE CONFIGURED
                    2643     ; ***ON ERROR AFTER TESTING THIS SR CHANGE DPH = 83H, & DPL = 82H(DIRECT ADDRESSING)
                    2644     
                    2645     ; ****REMEMBER TO SAVE REGS & FLAGS STILL RELEVANT TO THE CALLER PROGRAM TO AVOID DATA LOSS
                             ****
                    2646     
13DA                2647     NEXT:                   
                    2648     
13DA 200802         2649                                     JB                      08H, NEXT_4_SUB_MEM                
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    62

                                  ; CHECK WHETHER CALLER PROGRAM IS SUB MEM OR OTHERS AND JUMP APTLY
13DD 801C           2650                                     SJMP            NEXT_4_OPCODE
13DF                2651     NEXT_4_SUB_MEM:
                    2652                                     ; LOAD THE USER'S DESIRED START CODE ADDRESS IN THE DATA PO
                             INTER'S HIGH AND LOWER ORDER REG.
                    2653                                     
                    2654     
13DF 85353A         2655                                     MOV                     3AH, 35H                           
                                          ; LOAD THE HIGH ORDER BYTE INTO NEXT ADDRESS HOLDER/ADDRESS_DISPLAY_CONTROL'S INPUT MEM LOC 2 FOR DISPLAY 
13E2 853439         2656                                     MOV                     39H, 34H                           
                                          ; LOAD THE LOW ORDER BYTE INTO NEXT ADDRESS HOLDER/ADDRESS_DISPLAY_CONTROL'S INPUT MEM LOC 1 FOR DISPLAY
                    2657     
13E5 85353F         2658                                     MOV                     3FH, 35H                           
                                          ; LOAD THE HIGH ORDER BYTE INTO THE V_HEX DISPLAY ADDRESS MEM LOC 2
13E8 85343E         2659                                     MOV                     3EH, 34H                           
                                          ; LOAD THE LOWER ORDER BYTE     INTO THE V_HEX DISPLAY ADDRESS MEM LOC 1
                    2660     
13EB 853543         2661                                     MOV                     43H, 35H                           
                                          ; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
13EE 853442         2662                                     MOV                     42H, 34H                           
                                          ;                                                                                         (LOB)
                    2663     
13F1 853541         2664                                     MOV                     41H, 35H                           
                                          ; THE END ADDRESS (PREPARE AN ADDRESS +1 GREATER THAN ITSELF) FOR AUTO EXAM REG... 
13F4 853440         2665                                     MOV                     40H, 34H                           
                                          ; BY BOTH THE uC AND uP AFTER 'END' IS PRESSED
                    2666     
                    2667                                     ; THE MEM. LOCATIONS TO BE USED HERE ARE 34H & 35H (BECAUSE
                              THEY CONTAIN THE CURRENT LOW & HIGH ORDER ADDRESS RESPECTIVELY)
                    2668                                     ; LOAD IT INTO A REGISTER (EXTERNAL TRANSFER REGISTER) THAT
                              CAN COMMUNICATE WITH THE OUTSIDE WORLD(I MEAN OUTSIDE THE MICROCONTROLLER)
                    2669     
13F7 C208           2670                                     CLR                     08H                                
                                                  ; CLEAR THE NEXT SUB MEM FLAG (IS IT NECESSARY TO CLEAR THIS FLAG OR J
                             UST LEAVE IT TO CLEAR ON RESET)
13F9 8032           2671                                     SJMP            EXIT_NEXT
13FB                2672     NEXT_4_OPCODE:
13FB C083           2673                                     PUSH            DPH                                        
                                          ; SAVE THE CONTENT OF THE DATA POINTER REGISTERS SINCE THEY WOULD BE USED HERE
13FD C082           2674                                     PUSH            DPL
                    2675     
13FF 853A83         2676                                     MOV                     DPH, 3AH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE DATA POINTER
1402 853982         2677                                     MOV                     DPL, 39H
                    2678     
1405 858341         2679                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
1408 858240         2680                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                    2681     
140B 200306         2682                                     JB                      03H, NEXT_OPERAND                  
                                  ; SELECT BETWEEN OPERAND AND OPCODE NEXT CALL (OPCODE TYPE 03H= 0, OPERAND TYPE 03H= 1)
                    2683     
                    2684                                     ; OPCODE NEXT CALL BEGINS HERE
                    2685     
140E E533           2686                                     MOV                     A, 33H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 1 TEMPORARY STORE (ie 33H)
1410 F0             2687                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
1411 A3             2688                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                    2689     
1412 8019           2690                                     SJMP            EXIT_NEXT                                  
                                  ; 'NEXT SR' CALL ENDS HERE FOR THE OPCODE
1414                2691     NEXT_OPERAND:
                    2692                                     ; THE DATA TYPE OR BYTE 2 OPERAND BEGINS HERE
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    63

                    2693                                     
1414 858341         2694                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
1417 858240         2695                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                    2696     
141A E534           2697                                     MOV                     A, 34H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 2 TEMPORARY STORE (ie 34H)
141C F0             2698                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
141D A3             2699                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                    2700     
141E 200702         2701                                     JB                      07H, NEXT_OPERAND_AD_TYPE       ; S
                             ELECT BETWEEN DATA AND ADDRESS TYPE OPERAND
                    2702                                                                                                
                                                  ; THE DATA TYPE CONTINUES WHILE ADDRESS TYPE JUMPS
1421 800A           2703                                     SJMP            EXIT_NEXT                                  
                                  ; SR ENDS HERE FOR THE DATA TYPE OPERAND
                    2704     
1423                2705     NEXT_OPERAND_AD_TYPE:
                    2706                                     ; ADDRESS TYPE COMPLETES THE REMAINING HALF (ie BYTE 3)
1423 858341         2707                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
1426 858240         2708                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                    2709     
1429 E535           2710                                     MOV                     A, 35H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 3 TEMPORARY STORE (ie 35H)
142B F0             2711                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
142C A3             2712                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                    2713     
142D                2714     EXIT_NEXT:              ; SAVE THE NEXT INSTRUCTION'S EXTERNAL TRANSFER ADDRESS (CURRENT AD
                             DRESS)
142D 85833A         2715                                     MOV                     3AH, DPH                           
                                          ; LOAD THE HIGH ORDER BYTE
1430 858239         2716                                     MOV                     39H, DPL                           
                                          ; LOAD THE LOWER ORDER BYTE
                    2717     
1433 853A43         2718                                     MOV                     43H, 3AH                           
                                          ; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
1436 853942         2719                                     MOV                     42H, 39H                           
                                          ;                                                                                         (LOB)
                    2720     
                    2721                                     ; DISPLAY THE NEW ADDRESS IN LINE 1 OF THE LCD (THE NEW ADD
                             RESS ARE IN THE MEM LOC. 39H & 3AH)
1439 D082           2722                                     POP             DPL                                        
                                          ; RETRIEVE THE FORMER CONTENT OF THE DATA POINTER REGISTER
143B D083           2723                             POP             DPH                                                
                                  ; REMEMBER 'FIFO' TECHGNIQUE IS USED WHEN PUSHING AND POPPING ON THE STACK
                    2724                                     
143D 22             2725                                     RET
                    2726                                                                             
                    2727     ; THIS SR IS CALL WHEN THE BEGIN ADDRESS IS TO BE ENTERED
                    2728     ; IT LOADS THE START ADDRESS INTO THE MEMORY ADDRESS INCREMENT DISPLAY REGISTER (THIS SHUOL
                             D BE IN THE HEX FORM)
                    2729     
                    2730     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
143E                2731     STEP:
143E 22             2732                                     RET
                    2733     
                    2734     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    64

143F                2735     SUB_MEM:                
143F D200           2736                                     SETB            00H                             ; INDICATES
                              THAT SUB MEM IS PRESSED THUS ENABLES THE PASS TO THE MAIN2 SEGMENT ON RETURN TO THE CALLER PROGRAM
1441 C2AF           2737                                     CLR                     IE.7                    ; DISABLE T
                             HE EXTERNAL INTERRUPT(!INT0) USING THE GLOBAL IE BIT
                    2738                                     CLR_LCD                                         ; CLEAR THE
                              LCD SCREEN
                    2741     
1448 7480           2742                                     MOV                     A, #80H                 ; WRITE ON 
                             THE FIRST LINE OF THE LCD
144A 715E           2743                                     CALL            LCD_CMD                 
144C D208           2744                                     SETB            08H                             ; SET THE N
                             EXT SUB MEM FLAG (SELECTS THE PART OF THE NEXT SR MEANT FOR SUB MEM) 
                    2745                                                                                             ; T
                             HE FLAG IS CLEARED IN THE NEXT SR (CHECK IF BIT 00H AND 08H FUNCTIONS CAN BE CO0MBINED IN ONE FLAGs)
144E 11C7           2746                                     CALL            FLY_SUB_MEM             ; TAKE CARE OF SUB 
                             MEM ADDRESS DISPLAY AND PROPER MEM START INITIALIZATION
                    2747     
1450 7484           2748                                     MOV                     A, #84H                 ; LOAD A CO
                             MMAND TO DISPLAY ':' ON LINE 1, POSITION 5
1452 715E           2749                                     CALL            LCD_CMD
1454 743A           2750                                     MOV                     A, #':'
1456 7185           2751                                     CALL            LCD_SHO
                    2752     
1458 D2AF           2753                                     SETB            IE.7                    ; NOW ENABLE THE EX
                             TERNAL INTERRUPT
                    2754     
145A 22             2755                                     RET
                    2756     
                    2757     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                    2758     ; VIEW HEXADECIMAL (V_HEX)
                    2759     ; THIS IS A SUBROUTINE THAT ENABLES THE USER TO VIEW THE HEXADECIMAL CODE OF THE ALREADY WR
                             ITTEN CODE
                    2760     ; BOTH IN MACHINE LANGUAGE AND IN ASMBELY LANGUAGE
                    2761     
                    2762     ; **** MAKE SURE YOU INCLUDE THE START AND END OF ADDRESS CHECKERS TO AVOID READ SUPERFULOU
                             S CODES
                    2763     ; **** ALSO THE ADDRESS DISPLAY CONTROL OF THE SR
145B 853F3D         2764     V_HEX:                  MOV                     3DH, 3FH                                   
                                  ; LOAD THE START ADDRESS' HOB INTO THE V_HEX DISPLAY ADDRESS MEM LOC 2
145E 853E3C         2765                                     MOV                     3CH, 3EH                           
                                          ; LOAD THE START ADDRESS' LOB INTO THE V_HEX DISPLAY ADDRESS MEM LOC 1
                    2766     
1461 853D3A         2767     VH_1:                   MOV                     3AH, 3DH                                   
                                  ; LOAD THE START ADDRESS (ON ENTRANCE TO THE SR) OR CURRENT ADDRESS (ON SR CONTINUITY)...
1464 853C39         2768                                     MOV                     39H, 3CH                           
                                          ; INTO ADDRESS_DISPLAY_CONTROL'S INPUT REGISTERS FOR DISPLAY
1467 120EBB         2769                                     CALL            ADDRESS_DISPLAY_CONTROL         ; NOTE THE 
                             OSR CONTAINS THE MACRO 'CLR_LCD'
                    2770     
146A 853D83         2771                                     MOV                     DPH, 3DH                           
                                          ; LOAD THE START ADDRESS ON ENTRANCE TO THE SR OR... 
146D 853C82         2772                                     MOV                     DPL, 3CH                           
                                          ; CURRENT ADDRESS INTO THE DATA POINTER ON SR CONTINUITY
                    2773     
1470 E0             2774                                     MOVX            A, @DPTR                                   
                                  ; RETRIEVE THE HEX CODE IN THE ADDRESS SPECIFIED BY THE CONTENT OF THE DPTR
1471 F536           2775                                     MOV                     36H, A                             
                                          ; PLACE THE HEX CODE INTO THE INPUT MEMORY LOC. (36H) OF THE HEX_2_ASCII SR
                    2776     
1473 510D           2777                                     CALL            HEX_2_ASCII                                
                                  ; CALL THE OSR FOR CONVERSION
                    2778     
1475 74C0           2779                                     MOV                     A, #0C0H                           
                                          ; LOAD A COMMAND TO DISPLAY THE CONTENT OF 38H & 37H ON LINE 2, POSITION 1 & 2
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    65

1477 715E           2780                                     CALL            LCD_CMD
                    2781     
1479 E538           2782                                     MOV                     A, 38H                             
                                          ; MOVE THE ASCII CODE OF THE HIGHER ORDER BYTE TO FOR DISPLAY
147B 7185           2783                                     CALL            LCD_SHO
147D E537           2784                                     MOV                     A, 37H                             
                                          ; MOVE THE ASCII CODE OF THE LOWER ORDER BYTE TO FOR DISPLAY
147F 7185           2785                                     CALL            LCD_SHO
                    2786     
1481 51AC           2787     VH_2:                   CALL            KEYPAD_ID                                       ; E
                             NSURE A KEY IS DEPRESSED
1483 3001FB         2788                                     JNB                     01H, VH_2
1486 C201           2789                                     CLR                     01H     
                    2790     
                    2791     ; ***************SCROLL EITHER UP OR DOWN
                    2792     
1488 B4362A         2793                                     CJNE            A, #'6', VH_9                           ; S
                             CROLL UP
                    2794     ; A COMPARISON INSTRUCTION IS HERE TO DETERMINE WHETHER THE SCROLLING HAS ENDED OR NOT. THI
                             S INVOLVES THE USE OF ...
                    2795     ; 2 DIFFERENT REGISTERS TO COMPARE ANOTHER 2 (SINCE ADDRESS IS A 16 BIT STUFF). MEM LOCS. I
                             NVOLVED: 3D&3CH AND START'S ADDRESS STORAGE MEM LOCS.
148B E53D           2796                                     MOV                     A, 3DH
148D B53F01         2797                                     CJNE            A, 3FH, VH_3                            ; C
                             OMPARE HOB OF CURRENT ADDRESS AND THAT OF START ADDRESS
1490 D3             2798                                     SETB            C                       
1491 4002           2799     VH_3:                   JC                      VH_4
1493 8008           2800                                     SJMP            VH_6                                       
                                  ; PASSED. JUMP TO CONTINUE
                    2801                                     
1495 E53C           2802     VH_4:                   MOV                     A, 3CH
1497 B53E01         2803                                     CJNE            A, 3EH, VH_5                            ; C
                             OMPARE LOB OF CURRENT ADDRESS AND THAT OF START ADDRESS
149A D3             2804                                     SETB            C
149B 40E4           2805     VH_5:                   JC                      VH_2                                       
                                  ; THE 'SCROLL UP STOP' TEST ENDS HERE
                    2806                                                                                                
                                                  ; PASSED. CONTINUE
                    2807     
149D 200B03         2808     VH_6:                   JB                      0BH, VH_7
14A0 D53C0A         2809                                     DJNZ            3CH, VH_8                                  
                                  ; DECREMENT THE ADDRESS (16 BITS OR 2 BYTES) FOR THE NEXT CODE AND...
14A3 B20B           2810     VH_7:                   CPL                     0BH                                        
                                          ; HELPS TO MONITOR DECREMENT ON OVERFLOW
14A5 200B05         2811                                     JB                      0BH, VH_8
14A8 153D           2812                                     DEC                     3DH                                
                                                  ; (THIS ADDRESS DECREMENT IS A I6 BIT OR 2 BYTE DECREMENTING SO OBSERVE CAREFULLY)
14AA 753CFF         2813                                     MOV                     3CH, #0FFH
                    2814     
14AD 853D83         2815     VH_8:                   MOV                     DPH, 3DH                                   
                                  ; LOAD THE START/CURRENT ADDRESS INTO THE DATA POINTER
14B0 853C82         2816                                     MOV                     DPL, 3CH
                    2817     
14B3 80AC           2818                                     SJMP            VH_1                                       
                                  ; GO BACK AND START AFRESH WITH THE THE NEW(PREVIOUS) ADDRESS
                    2819     
14B5 B4371B         2820     VH_9:                   CJNE            A, #'7', VH_14                          ; SCROLL DO
                             WN
                    2821     ; A COMPARISON INSTRUCTION HERE TO DETERMINE WHETHER THE SCROLLING HAS ENDED OR NOT. THIS M
                             AY INVOLVE THE USE OF ...
                    2822     ; 2 DIFFERENT REGISTERS TO COMPARE ANOTHER 2 (SINCE ADDRESS IS A 16 BIT STUFF). REGSITERS I
                             NVOLVED: 3D&3CH AND END'S ADDRESS STORAGE MEM LOC.
14B8 E53D           2823                                     MOV                     A, 3DH
14BA B54101         2824                                     CJNE            A, 41H, VH_10                           ; C
                             OMPARE HOB OF CURRENT ADDRESS AND THAT OF END ADDRESS
14BD C3             2825                                     CLR                     C                       
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    66

14BE 5002           2826     VH_10:                  JNC                     VH_11
14C0 8008           2827                                     SJMP            VH_13                                      
                                  ; PASSED. JUMP TO CONTINUE
                    2828                                     
14C2 E53C           2829     VH_11:                  MOV                     A, 3CH
14C4 B54001         2830                                     CJNE            A, 40H, VH_12                           ; C
                             OMPARE LOB OF CURRENT ADDRESS AND THAT OF END ADDRESS
14C7 C3             2831                                     CLR                     C
14C8 50B7           2832     VH_12:                  JNC                     VH_2                                       
                                  ; THE 'SCROLL DOWN STOP' TEST ENDS HERE
                    2833                                                                                                
                                                  ; PASSED. CONTINUE
                    2834     
14CA A3             2835     VH_13:                  INC                     DPTR                                       
                                  ; INCREMENT THE ADDRESS FOR THE NEXT CODE
14CB 85833D         2836                                     MOV                     3DH, DPH                           
                                          ; LOAD THE START/CURRENT ADDRESS INTO THE DATA POINTER
14CE 85823C         2837                                     MOV                     3CH, DPL
                    2838     
14D1 808E           2839                                     SJMP            VH_1                                       
                                  ; GO BACK AND START AFRESH WITH THE THE NEW(NEXT) ADDRESS
                    2840     
14D3 B435AB         2841     VH_14:                  CJNE            A, #'5', VH_2                           ; JUMP TO A
                              USER SPECIFIED ADDRESS
14D6 3173           2842                                     CALL            GO_TO                                      
                                  ; GO TO THE USER ADDRESS
14D8 8087           2843                                     SJMP            VH_1                                       
                                  ; GO BACK AND START AFRESH WITH THE THE NEW(NEXT) ADDRESS
                    2844                                ; U MAY INCLUDE A SKIP IN THE GOTO OSR WHEN CANCEL IS PRESS TO C
                             OME ON THIS LINE. PUT ON THIS LINE INSTRUCTIONS TO GO BACK AT ITS FORMER ADDRESS
                    2845     
                    2846     ; TESTED: QC PASSED SYNTAXICALLY
                    2847     
                    2848     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
14DA 30313233       2849     ROW_1:                          DB                      '0','1','2','3','4','5','6','7'    
                                  ; DATA STORED IN ASCII CODE
14DE 34353637                
14E2 45525455       2850     ROW_2:                          DB                      'E','R','T','U','I','O','P','8'
14E6 494F5038                
14EA 41534446       2851     ROW_3:                          DB                      'A','S','D','F','H','J','L','9'
14EE 484A4C39                
14F2 5A584356       2852     ROW_4:                          DB                      'Z','X','C','V','B','N','M','*'    
                                  ; '*' IS RESERVED FOR THE FUNCTION 'NEXT'
14F6 424E4D2A                
                    2853     
                    2854                                             END
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    67

SYMBOL TABLE LISTING
------ ----- -------


N A M E                  T Y P E  V A L U E   ATTRIBUTES

A2. . . . . . . . . . .  C ADDR   00FAH   A   
A2H_1 . . . . . . . . .  C ADDR   0EEFH   A   
A2H_2 . . . . . . . . .  C ADDR   0EF7H   A   
A2H_3 . . . . . . . . .  C ADDR   0EFFH   A   
A2H_4 . . . . . . . . .  C ADDR   0F01H   A   
A2H_5 . . . . . . . . .  C ADDR   0F0CH   A   
A2H_6 . . . . . . . . .  C ADDR   0F19H   A   
A2H_7 . . . . . . . . .  C ADDR   0F21H   A   
A2H_8 . . . . . . . . .  C ADDR   0F2CH   A   
A2_1. . . . . . . . . .  C ADDR   00FDH   A   
A2_2. . . . . . . . . .  C ADDR   0115H   A   
A2_2L1. . . . . . . . .  C ADDR   011BH   A   
A2_2L2. . . . . . . . .  C ADDR   0128H   A   
A2_2L3. . . . . . . . .  C ADDR   012DH   A   
A2_3. . . . . . . . . .  C ADDR   0138H   A   
A2_3L1. . . . . . . . .  C ADDR   013EH   A   
A2_3L2. . . . . . . . .  C ADDR   014BH   A   
ADC_. . . . . . . . . .  C ADDR   0664H   A   
ADC_L1. . . . . . . . .  C ADDR   066CH   A   
ADC_L2. . . . . . . . .  C ADDR   067CH   A   
ADC_L3. . . . . . . . .  C ADDR   0684H   A   
ADC_L4. . . . . . . . .  C ADDR   068CH   A   
ADC_L5. . . . . . . . .  C ADDR   0694H   A   
ADC_L6. . . . . . . . .  C ADDR   069CH   A   
ADC_L7. . . . . . . . .  C ADDR   06A4H   A   
ADC_L8. . . . . . . . .  C ADDR   06ACH   A   
ADC_L9. . . . . . . . .  C ADDR   06B2H   A   
ADDRESS_DISPLAY_CONTROL  C ADDR   0EBBH   A   
ADD_. . . . . . . . . .  C ADDR   06B7H   A   
ADD_L1. . . . . . . . .  C ADDR   06BFH   A   
ADD_L2. . . . . . . . .  C ADDR   06CFH   A   
ADD_L3. . . . . . . . .  C ADDR   06D7H   A   
ADD_L4. . . . . . . . .  C ADDR   06DFH   A   
ADD_L5. . . . . . . . .  C ADDR   06E7H   A   
ADD_L6. . . . . . . . .  C ADDR   06EFH   A   
ADD_L7. . . . . . . . .  C ADDR   06F7H   A   
ADD_L8. . . . . . . . .  C ADDR   06FFH   A   
ADD_L9. . . . . . . . .  C ADDR   0705H   A   
ANA_. . . . . . . . . .  C ADDR   070AH   A   
ANA_L1. . . . . . . . .  C ADDR   0712H   A   
ANA_L2. . . . . . . . .  C ADDR   0722H   A   
ANA_L3. . . . . . . . .  C ADDR   072AH   A   
ANA_L4. . . . . . . . .  C ADDR   0732H   A   
ANA_L5. . . . . . . . .  C ADDR   073AH   A   
ANA_L6. . . . . . . . .  C ADDR   0742H   A   
ANA_L7. . . . . . . . .  C ADDR   074AH   A   
ANA_L8. . . . . . . . .  C ADDR   0752H   A   
ANA_L9. . . . . . . . .  C ADDR   0758H   A   
ASCII_2_HEX . . . . . .  C ADDR   0EEBH   A   
ASM . . . . . . . . . .  C ADDR   0079H   A   
ASM1_1. . . . . . . . .  C ADDR   0086H   A   
ASM1_10 . . . . . . . .  C ADDR   00DEH   A   
ASM1_11 . . . . . . . .  C ADDR   00E3H   A   
ASM1_12 . . . . . . . .  C ADDR   00E8H   A   
ASM1_13 . . . . . . . .  C ADDR   00EDH   A   
ASM1_14 . . . . . . . .  C ADDR   00F2H   A   
ASM1_2. . . . . . . . .  C ADDR   008BH   A   
ASM1_3. . . . . . . . .  C ADDR   0090H   A   
ASM1_4. . . . . . . . .  C ADDR   00A0H   A   
ASM1_5. . . . . . . . .  C ADDR   00B5H   A   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    68

ASM1_6. . . . . . . . .  C ADDR   00BAH   A   
ASM1_7. . . . . . . . .  C ADDR   00BFH   A   
ASM1_8. . . . . . . . .  C ADDR   00C4H   A   
ASM1_9. . . . . . . . .  C ADDR   00C9H   A   
BACK. . . . . . . . . .  C ADDR   116BH   A   
C2. . . . . . . . . . .  C ADDR   0156H   A   
C2_1. . . . . . . . . .  C ADDR   0159H   A   
C2_2. . . . . . . . . .  C ADDR   0176H   A   
C2_3. . . . . . . . . .  C ADDR   0181H   A   
C2_3L1. . . . . . . . .  C ADDR   0187H   A   
C2_3L2. . . . . . . . .  C ADDR   019AH   A   
C2_3L3. . . . . . . . .  C ADDR   01A5H   A   
C2_3L4. . . . . . . . .  C ADDR   01B0H   A   
C2_4. . . . . . . . . .  C ADDR   01B5H   A   
C2_4L1. . . . . . . . .  C ADDR   01BBH   A   
C2_4L2. . . . . . . . .  C ADDR   01CEH   A   
C2_5. . . . . . . . . .  C ADDR   01D9H   A   
C2_5L1. . . . . . . . .  C ADDR   01DFH   A   
C2_5L2. . . . . . . . .  C ADDR   01F2H   A   
C2_5L3. . . . . . . . .  C ADDR   01FDH   A   
C2_5L4. . . . . . . . .  C ADDR   0208H   A   
C2_6. . . . . . . . . .  C ADDR   0213H   A   
C2_7. . . . . . . . . .  C ADDR   021EH   A   
CANCEL. . . . . . . . .  C ADDR   0F33H   A   
CMP_. . . . . . . . . .  C ADDR   075DH   A   
CMP_L1. . . . . . . . .  C ADDR   0765H   A   
CMP_L2. . . . . . . . .  C ADDR   0775H   A   
CMP_L3. . . . . . . . .  C ADDR   077DH   A   
CMP_L4. . . . . . . . .  C ADDR   0785H   A   
CMP_L5. . . . . . . . .  C ADDR   078DH   A   
CMP_L6. . . . . . . . .  C ADDR   0795H   A   
CMP_L7. . . . . . . . .  C ADDR   079DH   A   
CMP_L8. . . . . . . . .  C ADDR   07A5H   A   
CMP_L9. . . . . . . . .  C ADDR   07ABH   A   
D2. . . . . . . . . . .  C ADDR   0220H   A   
D2_1. . . . . . . . . .  C ADDR   0223H   A   
D2_1L1. . . . . . . . .  C ADDR   0231H   A   
D2_1L2. . . . . . . . .  C ADDR   0244H   A   
D2_2. . . . . . . . . .  C ADDR   0249H   A   
D2_2L1. . . . . . . . .  C ADDR   024FH   A   
D2_2L2. . . . . . . . .  C ADDR   025CH   A   
D2_3. . . . . . . . . .  C ADDR   0262H   A   
DAD_. . . . . . . . . .  C ADDR   07B0H   A   
DAD_L1. . . . . . . . .  C ADDR   07B8H   A   
DAD_L2. . . . . . . . .  C ADDR   07C8H   A   
DAD_L3. . . . . . . . .  C ADDR   07D0H   A   
DAD_L4. . . . . . . . .  C ADDR   07D8H   A   
DAD_L5. . . . . . . . .  C ADDR   07E3H   A   
DCR_. . . . . . . . . .  C ADDR   07E8H   A   
DCR_L1. . . . . . . . .  C ADDR   07F0H   A   
DCR_L2. . . . . . . . .  C ADDR   0800H   A   
DCR_L3. . . . . . . . .  C ADDR   0808H   A   
DCR_L4. . . . . . . . .  C ADDR   0810H   A   
DCR_L5. . . . . . . . .  C ADDR   0818H   A   
DCR_L6. . . . . . . . .  C ADDR   0820H   A   
DCR_L7. . . . . . . . .  C ADDR   0828H   A   
DCR_L8. . . . . . . . .  C ADDR   0830H   A   
DCR_L9. . . . . . . . .  C ADDR   0836H   A   
DCX_. . . . . . . . . .  C ADDR   083CH   A   
DCX_L1. . . . . . . . .  C ADDR   0844H   A   
DCX_L2. . . . . . . . .  C ADDR   0854H   A   
DCX_L3. . . . . . . . .  C ADDR   085CH   A   
DCX_L4. . . . . . . . .  C ADDR   0864H   A   
DCX_L5. . . . . . . . .  C ADDR   086FH   A   
DELAY_2S. . . . . . . .  C ADDR   0F51H   A   
DELAY_500MS . . . . . .  C ADDR   0F3EH   A   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    69

DISP_CHAR . . . . . . .  C ADDR   0F64H   A   
DLY_2S_1. . . . . . . .  C ADDR   0F54H   A   
DLY_2S_2. . . . . . . .  C ADDR   0F57H   A   
DLY_500MS_1 . . . . . .  C ADDR   0F41H   A   
DLY_500MS_2 . . . . . .  C ADDR   0F44H   A   
DPH . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . .  D ADDR   0082H   A   
END_LOADER. . . . . . .  C ADDR   1013H   A   
ER_1. . . . . . . . . .  C ADDR   1048H   A   
ER_2. . . . . . . . . .  C ADDR   105AH   A   
ER_3. . . . . . . . . .  C ADDR   1065H   A   
ER_4. . . . . . . . . .  C ADDR   1070H   A   
ER_5. . . . . . . . . .  C ADDR   107BH   A   
ER_6. . . . . . . . . .  C ADDR   1086H   A   
ER_7. . . . . . . . . .  C ADDR   1091H   A   
ER_8. . . . . . . . . .  C ADDR   109AH   A   
EXAM_REG. . . . . . . .  C ADDR   1022H   A   
EXE . . . . . . . . . .  C ADDR   10AFH   A   
EXIT_A2H. . . . . . . .  C ADDR   0F32H   A   
EXIT_CANCEL . . . . . .  C ADDR   0F3DH   A   
EXIT_GOTO . . . . . . .  C ADDR   120AH   A   
EXIT_NEXT . . . . . . .  C ADDR   142DH   A   
EXIT_SECOND_FUNCTION. .  C ADDR   0EBAH   A   
E_N_D . . . . . . . . .  C ADDR   0F79H   A   
FA_1. . . . . . . . . .  C ADDR   10CEH   A   
FA_2. . . . . . . . . .  C ADDR   10F3H   A   
FA_CONTINUE . . . . . .  C ADDR   10E4H   A   
FA_EXIT . . . . . . . .  C ADDR   1109H   A   
FD_1. . . . . . . . . .  C ADDR   1127H   A   
FD_2. . . . . . . . . .  C ADDR   113DH   A   
FLY_ADDRESS . . . . . .  C ADDR   10B3H   A   
FLY_ADDRESS_SKIP. . . .  C ADDR   10B5H   A   
FLY_DATA. . . . . . . .  C ADDR   110AH   A   
FLY_DATA_SKIP . . . . .  C ADDR   110CH   A   
FLY_OPCODE. . . . . . .  C ADDR   1151H   A   
FLY_OPCODE_SKIP . . . .  C ADDR   1153H   A   
FLY_SUB_MEM . . . . . .  C ADDR   10C7H   A   
GET_READY . . . . . . .  C ADDR   1165H   A   
GO_TO . . . . . . . . .  C ADDR   1173H   A   
GT_1. . . . . . . . . .  C ADDR   1191H   A   
GT_10 . . . . . . . . .  C ADDR   11D9H   A   
GT_11 . . . . . . . . .  C ADDR   11DFH   A   
GT_12 . . . . . . . . .  C ADDR   11E1H   A   
GT_2. . . . . . . . . .  C ADDR   119DH   A   
GT_3. . . . . . . . . .  C ADDR   11ACH   A   
GT_4. . . . . . . . . .  C ADDR   11B8H   A   
GT_5. . . . . . . . . .  C ADDR   11C2H   A   
GT_6. . . . . . . . . .  C ADDR   11C6H   A   
GT_7. . . . . . . . . .  C ADDR   11CCH   A   
GT_8. . . . . . . . . .  C ADDR   11CEH   A   
GT_9. . . . . . . . . .  C ADDR   11D5H   A   
H2A_1 . . . . . . . . .  C ADDR   1216H   A   
H2A_2 . . . . . . . . .  C ADDR   121AH   A   
H2A_3 . . . . . . . . .  C ADDR   1226H   A   
H2A_4 . . . . . . . . .  C ADDR   122AH   A   
HERE1 . . . . . . . . .  C ADDR   1371H   A   
HERE2 . . . . . . . . .  C ADDR   136EH   A   
HEX_2_ASCII . . . . . .  C ADDR   120DH   A   
I2. . . . . . . . . . .  C ADDR   026DH   A   
I2_1. . . . . . . . . .  C ADDR   0275H   A   
I2_2. . . . . . . . . .  C ADDR   0288H   A   
I2_3. . . . . . . . . .  C ADDR   028EH   A   
IE. . . . . . . . . . .  D ADDR   00A8H   A   
INR_. . . . . . . . . .  C ADDR   0875H   A   
INR_L1. . . . . . . . .  C ADDR   087DH   A   
INR_L2. . . . . . . . .  C ADDR   088DH   A   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    70

INR_L3. . . . . . . . .  C ADDR   0895H   A   
INR_L4. . . . . . . . .  C ADDR   089DH   A   
INR_L5. . . . . . . . .  C ADDR   08A5H   A   
INR_L6. . . . . . . . .  C ADDR   08ADH   A   
INR_L7. . . . . . . . .  C ADDR   08B5H   A   
INR_L8. . . . . . . . .  C ADDR   08BDH   A   
INR_L9. . . . . . . . .  C ADDR   08C3H   A   
INTRO_CPLT. . . . . . .  C ADDR   122FH   A   
INTRO_MSG . . . . . . .  C ADDR   1262H   A   
INTRO_SUBMEM_REQUEST. .  C ADDR   1294H   A   
INX_. . . . . . . . . .  C ADDR   08C9H   A   
INX_L1. . . . . . . . .  C ADDR   08D1H   A   
INX_L2. . . . . . . . .  C ADDR   08E1H   A   
INX_L3. . . . . . . . .  C ADDR   08E9H   A   
INX_L4. . . . . . . . .  C ADDR   08F1H   A   
INX_L5. . . . . . . . .  C ADDR   08FCH   A   
J2. . . . . . . . . . .  C ADDR   0294H   A   
J2_1. . . . . . . . . .  C ADDR   0297H   A   
J2_2. . . . . . . . . .  C ADDR   02AAH   A   
J2_2L1. . . . . . . . .  C ADDR   02B0H   A   
J2_2L2. . . . . . . . .  C ADDR   02C3H   A   
J2_3. . . . . . . . . .  C ADDR   02CEH   A   
J2_3L1. . . . . . . . .  C ADDR   02D4H   A   
J2_3L2. . . . . . . . .  C ADDR   02E7H   A   
J2_4. . . . . . . . . .  C ADDR   02F2H   A   
J2_4L1. . . . . . . . .  C ADDR   02F8H   A   
J2_4L2. . . . . . . . .  C ADDR   030BH   A   
J2_4L3. . . . . . . . .  C ADDR   0316H   A   
J2_5. . . . . . . . . .  C ADDR   0321H   A   
J2_6. . . . . . . . . .  C ADDR   032CH   A   
KEY2. . . . . . . . . .  C ADDR   12B9H   A   
KEY3. . . . . . . . . .  C ADDR   12C8H   A   
KEY31 . . . . . . . . .  C ADDR   12CCH   A   
KEY4. . . . . . . . . .  C ADDR   12D1H   A   
KEY41 . . . . . . . . .  C ADDR   12D9H   A   
KEY42 . . . . . . . . .  C ADDR   12E1H   A   
KEY43 . . . . . . . . .  C ADDR   12E9H   A   
KEY44 . . . . . . . . .  C ADDR   12F1H   A   
KEY5. . . . . . . . . .  C ADDR   12F3H   A   
KEY6. . . . . . . . . .  C ADDR   12FEH   A   
KEY61 . . . . . . . . .  C ADDR   1300H   A   
KEY7. . . . . . . . . .  C ADDR   1307H   A   
KEY71 . . . . . . . . .  C ADDR   130CH   A   
KEY72 . . . . . . . . .  C ADDR   1312H   A   
KEY73 . . . . . . . . .  C ADDR   1319H   A   
KEY74 . . . . . . . . .  C ADDR   1321H   A   
KEY75 . . . . . . . . .  C ADDR   132AH   A   
KEY76 . . . . . . . . .  C ADDR   1334H   A   
KEY77 . . . . . . . . .  C ADDR   133FH   A   
KEY78 . . . . . . . . .  C ADDR   134BH   A   
KEY8. . . . . . . . . .  C ADDR   134DH   A   
KEYFNL. . . . . . . . .  C ADDR   135DH   A   
KEYPAD_ID . . . . . . .  C ADDR   12ACH   A   
L2. . . . . . . . . . .  C ADDR   032EH   A   
L2_1. . . . . . . . . .  C ADDR   0331H   A   
L2_1L1. . . . . . . . .  C ADDR   0344H   A   
L2_1L2. . . . . . . . .  C ADDR   0357H   A   
L2_2. . . . . . . . . .  C ADDR   035DH   A   
L2_3. . . . . . . . . .  C ADDR   0372H   A   
LCD_CMD . . . . . . . .  C ADDR   135EH   A   
LCD_DLY . . . . . . . .  C ADDR   136BH   A   
LCD_SET . . . . . . . .  C ADDR   1378H   A   
LCD_SHO . . . . . . . .  C ADDR   1385H   A   
LDAX_ . . . . . . . . .  C ADDR   0902H   A   
LDAX_L1 . . . . . . . .  C ADDR   090AH   A   
LDAX_L2 . . . . . . . .  C ADDR   091AH   A   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    71

LDAX_L3 . . . . . . . .  C ADDR   0920H   A   
LOOP. . . . . . . . . .  C ADDR   0F6FH   A   
LXI_. . . . . . . . . .  C ADDR   0926H   A   
LXI_L1. . . . . . . . .  C ADDR   092EH   A   
LXI_L2. . . . . . . . .  C ADDR   093EH   A   
LXI_L3. . . . . . . . .  C ADDR   0946H   A   
LXI_L4. . . . . . . . .  C ADDR   094EH   A   
LXI_L5. . . . . . . . .  C ADDR   0959H   A   
M2. . . . . . . . . . .  C ADDR   037DH   A   
M2_1. . . . . . . . . .  C ADDR   0380H   A   
M2_2. . . . . . . . . .  C ADDR   0393H   A   
MAIN. . . . . . . . . .  C ADDR   0030H   A   
MAIN1 . . . . . . . . .  C ADDR   0039H   A   
MAIN1_1 . . . . . . . .  C ADDR   0049H   A   
MAIN1_2 . . . . . . . .  C ADDR   005BH   A   
MAIN1_3 . . . . . . . .  C ADDR   0060H   A   
MAIN2 . . . . . . . . .  C ADDR   0071H   A   
MH_1. . . . . . . . . .  C ADDR   139DH   A   
MH_2. . . . . . . . . .  C ADDR   13A5H   A   
MH_3. . . . . . . . . .  C ADDR   13ADH   A   
MH_4. . . . . . . . . .  C ADDR   13AFH   A   
MH_5. . . . . . . . . .  C ADDR   13B9H   A   
MH_6. . . . . . . . . .  C ADDR   13BDH   A   
MH_7. . . . . . . . . .  C ADDR   13C4H   A   
MOV_. . . . . . . . . .  C ADDR   095FH   A   
MOV_A . . . . . . . . .  C ADDR   0967H   A   
MOV_AA. . . . . . . . .  C ADDR   097CH   A   
MOV_AB. . . . . . . . .  C ADDR   098CH   A   
MOV_AC. . . . . . . . .  C ADDR   0994H   A   
MOV_AD. . . . . . . . .  C ADDR   099CH   A   
MOV_AE. . . . . . . . .  C ADDR   09A4H   A   
MOV_AH. . . . . . . . .  C ADDR   09ACH   A   
MOV_AL. . . . . . . . .  C ADDR   09B4H   A   
MOV_AM. . . . . . . . .  C ADDR   09BCH   A   
MOV_A_EXIT. . . . . . .  C ADDR   09C2H   A   
MOV_A_EXTRA . . . . . .  C ADDR   0C2FH   A   
MOV_B . . . . . . . . .  C ADDR   09C8H   A   
MOV_BA. . . . . . . . .  C ADDR   09D5H   A   
MOV_BB. . . . . . . . .  C ADDR   09E5H   A   
MOV_BC. . . . . . . . .  C ADDR   09EDH   A   
MOV_BD. . . . . . . . .  C ADDR   09F5H   A   
MOV_BE. . . . . . . . .  C ADDR   09FDH   A   
MOV_BH. . . . . . . . .  C ADDR   0A05H   A   
MOV_BL. . . . . . . . .  C ADDR   0A0DH   A   
MOV_BM. . . . . . . . .  C ADDR   0A15H   A   
MOV_B_EXIT. . . . . . .  C ADDR   0A1BH   A   
MOV_C . . . . . . . . .  C ADDR   0A21H   A   
MOV_CA. . . . . . . . .  C ADDR   0A2EH   A   
MOV_CB. . . . . . . . .  C ADDR   0A3EH   A   
MOV_CC. . . . . . . . .  C ADDR   0A46H   A   
MOV_CD. . . . . . . . .  C ADDR   0A4EH   A   
MOV_CE. . . . . . . . .  C ADDR   0A56H   A   
MOV_CH. . . . . . . . .  C ADDR   0A5EH   A   
MOV_CL. . . . . . . . .  C ADDR   0A66H   A   
MOV_CM. . . . . . . . .  C ADDR   0A6EH   A   
MOV_C_EXIT. . . . . . .  C ADDR   0A74H   A   
MOV_D . . . . . . . . .  C ADDR   0A7AH   A   
MOV_DA. . . . . . . . .  C ADDR   0A87H   A   
MOV_DB. . . . . . . . .  C ADDR   0A97H   A   
MOV_DC. . . . . . . . .  C ADDR   0A9FH   A   
MOV_DD. . . . . . . . .  C ADDR   0AA7H   A   
MOV_DE. . . . . . . . .  C ADDR   0AAFH   A   
MOV_DH. . . . . . . . .  C ADDR   0AB7H   A   
MOV_DL. . . . . . . . .  C ADDR   0ABFH   A   
MOV_DM. . . . . . . . .  C ADDR   0AC7H   A   
MOV_D_EXIT. . . . . . .  C ADDR   0ACDH   A   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    72

MOV_E . . . . . . . . .  C ADDR   0AD3H   A   
MOV_EA. . . . . . . . .  C ADDR   0AE0H   A   
MOV_EB. . . . . . . . .  C ADDR   0AF0H   A   
MOV_EC. . . . . . . . .  C ADDR   0AF8H   A   
MOV_ED. . . . . . . . .  C ADDR   0B00H   A   
MOV_EE. . . . . . . . .  C ADDR   0B08H   A   
MOV_EH. . . . . . . . .  C ADDR   0B10H   A   
MOV_EL. . . . . . . . .  C ADDR   0B18H   A   
MOV_EM. . . . . . . . .  C ADDR   0B20H   A   
MOV_E_EXIT. . . . . . .  C ADDR   0B26H   A   
MOV_H . . . . . . . . .  C ADDR   0B2CH   A   
MOV_HA. . . . . . . . .  C ADDR   0B39H   A   
MOV_HB. . . . . . . . .  C ADDR   0B49H   A   
MOV_HC. . . . . . . . .  C ADDR   0B51H   A   
MOV_HD. . . . . . . . .  C ADDR   0B59H   A   
MOV_HE. . . . . . . . .  C ADDR   0B61H   A   
MOV_HH. . . . . . . . .  C ADDR   0B69H   A   
MOV_HL. . . . . . . . .  C ADDR   0B71H   A   
MOV_HM. . . . . . . . .  C ADDR   0B79H   A   
MOV_H_EXIT. . . . . . .  C ADDR   0B7FH   A   
MOV_L . . . . . . . . .  C ADDR   0B85H   A   
MOV_LA. . . . . . . . .  C ADDR   0B92H   A   
MOV_LB. . . . . . . . .  C ADDR   0BA2H   A   
MOV_LC. . . . . . . . .  C ADDR   0BAAH   A   
MOV_LD. . . . . . . . .  C ADDR   0BB2H   A   
MOV_LE. . . . . . . . .  C ADDR   0BBAH   A   
MOV_LH. . . . . . . . .  C ADDR   0BC2H   A   
MOV_LL. . . . . . . . .  C ADDR   0BCAH   A   
MOV_LM. . . . . . . . .  C ADDR   0BD2H   A   
MOV_L_EXIT. . . . . . .  C ADDR   0BD8H   A   
MOV_M . . . . . . . . .  C ADDR   0BDEH   A   
MOV_MA. . . . . . . . .  C ADDR   0BEBH   A   
MOV_MB. . . . . . . . .  C ADDR   0BFBH   A   
MOV_MC. . . . . . . . .  C ADDR   0C03H   A   
MOV_MD. . . . . . . . .  C ADDR   0C0BH   A   
MOV_ME. . . . . . . . .  C ADDR   0C13H   A   
MOV_MH. . . . . . . . .  C ADDR   0C1BH   A   
MOV_ML. . . . . . . . .  C ADDR   0C23H   A   
MOV_M_EXIT. . . . . . .  C ADDR   0C29H   A   
MVI_. . . . . . . . . .  C ADDR   0C31H   A   
MVI_L1. . . . . . . . .  C ADDR   0C39H   A   
MVI_L2. . . . . . . . .  C ADDR   0C49H   A   
MVI_L3. . . . . . . . .  C ADDR   0C51H   A   
MVI_L4. . . . . . . . .  C ADDR   0C59H   A   
MVI_L5. . . . . . . . .  C ADDR   0C61H   A   
MVI_L6. . . . . . . . .  C ADDR   0C69H   A   
MVI_L7. . . . . . . . .  C ADDR   0C71H   A   
MVI_L8. . . . . . . . .  C ADDR   0C79H   A   
MVI_L9. . . . . . . . .  C ADDR   0C7FH   A   
M_HEX . . . . . . . . .  C ADDR   1392H   A   
M_HEX_OUT_OF_RANGE. . .  C ADDR   00F7H   A   
NEXT. . . . . . . . . .  C ADDR   13DAH   A   
NEXT_4_OPCODE . . . . .  C ADDR   13FBH   A   
NEXT_4_SUB_MEM. . . . .  C ADDR   13DFH   A   
NEXT_OPERAND. . . . . .  C ADDR   1414H   A   
NEXT_OPERAND_AD_TYPE. .  C ADDR   1423H   A   
O2. . . . . . . . . . .  C ADDR   039EH   A   
O2_1. . . . . . . . . .  C ADDR   03A1H   A   
O2_1L1. . . . . . . . .  C ADDR   03AFH   A   
O2_1L2. . . . . . . . .  C ADDR   03BDH   A   
O2_2. . . . . . . . . .  C ADDR   03C8H   A   
ORA_. . . . . . . . . .  C ADDR   0C85H   A   
ORA_L1. . . . . . . . .  C ADDR   0C8DH   A   
ORA_L2. . . . . . . . .  C ADDR   0C9DH   A   
ORA_L3. . . . . . . . .  C ADDR   0CA5H   A   
ORA_L4. . . . . . . . .  C ADDR   0CADH   A   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    73

ORA_L5. . . . . . . . .  C ADDR   0CB5H   A   
ORA_L6. . . . . . . . .  C ADDR   0CBDH   A   
ORA_L7. . . . . . . . .  C ADDR   0CC5H   A   
ORA_L8. . . . . . . . .  C ADDR   0CCDH   A   
ORA_L9. . . . . . . . .  C ADDR   0CD3H   A   
OUT_OF_RANGE. . . . . .  C ADDR   11E9H   A   
P0. . . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . . .  D ADDR   00A0H   A   
P3. . . . . . . . . . .  D ADDR   00B0H   A   
PCON. . . . . . . . . .  D ADDR   0087H   A   
POP_. . . . . . . . . .  C ADDR   0CD9H   A   
POP_L1. . . . . . . . .  C ADDR   0CE1H   A   
POP_L2. . . . . . . . .  C ADDR   0CF1H   A   
POP_L3. . . . . . . . .  C ADDR   0CF9H   A   
POP_L4. . . . . . . . .  C ADDR   0D01H   A   
POP_L5. . . . . . . . .  C ADDR   0D11H   A   
PRINT_TEXT. . . . . . .  C ADDR   0F68H   A   
PUSH_ . . . . . . . . .  C ADDR   0D17H   A   
PUSH_L1 . . . . . . . .  C ADDR   0D1CH   A   
PUSH_L2 . . . . . . . .  C ADDR   0D2CH   A   
PUSH_L3 . . . . . . . .  C ADDR   0D34H   A   
PUSH_L4 . . . . . . . .  C ADDR   0D3CH   A   
PUSH_L5 . . . . . . . .  C ADDR   0D4CH   A   
RETURN. . . . . . . . .  C ADDR   0F76H   A   
ROW_1 . . . . . . . . .  C ADDR   14DAH   A   
ROW_2 . . . . . . . . .  C ADDR   14E2H   A   
ROW_3 . . . . . . . . .  C ADDR   14EAH   A   
ROW_4 . . . . . . . . .  C ADDR   14F2H   A   
S2. . . . . . . . . . .  C ADDR   0553H   A   
S2_1. . . . . . . . . .  C ADDR   0556H   A   
S2_1L1. . . . . . . . .  C ADDR   0564H   A   
S2_1L2. . . . . . . . .  C ADDR   0572H   A   
S2_2. . . . . . . . . .  C ADDR   057DH   A   
S2_3. . . . . . . . . .  C ADDR   0592H   A   
S2_4. . . . . . . . . .  C ADDR   05A2H   A   
S2_5. . . . . . . . . .  C ADDR   05B7H   A   
S2_5L1. . . . . . . . .  C ADDR   05BDH   A   
S2_5L1L1. . . . . . . .  C ADDR   05CBH   A   
S2_5L1L2. . . . . . . .  C ADDR   05DEH   A   
S2_5L2. . . . . . . . .  C ADDR   05E4H   A   
S2_6. . . . . . . . . .  C ADDR   05EFH   A   
S2_6L1. . . . . . . . .  C ADDR   05F5H   A   
S2_6L2. . . . . . . . .  C ADDR   0603H   A   
S2_7. . . . . . . . . .  C ADDR   060EH   A   
SBB_. . . . . . . . . .  C ADDR   0D52H   A   
SBB_L1. . . . . . . . .  C ADDR   0D5AH   A   
SBB_L2. . . . . . . . .  C ADDR   0D6AH   A   
SBB_L3. . . . . . . . .  C ADDR   0D72H   A   
SBB_L4. . . . . . . . .  C ADDR   0D7AH   A   
SBB_L5. . . . . . . . .  C ADDR   0D82H   A   
SBB_L6. . . . . . . . .  C ADDR   0D8AH   A   
SBB_L7. . . . . . . . .  C ADDR   0D92H   A   
SBB_L8. . . . . . . . .  C ADDR   0D9AH   A   
SBB_L9. . . . . . . . .  C ADDR   0DA0H   A   
SECOND_FUNCTION . . . .  C ADDR   0E72H   A   
SF_1. . . . . . . . . .  C ADDR   0E88H   A   
SF_2. . . . . . . . . .  C ADDR   0E90H   A   
SF_3. . . . . . . . . .  C ADDR   0E9CH   A   
SF_4. . . . . . . . . .  C ADDR   0EA4H   A   
SF_5. . . . . . . . . .  C ADDR   0EACH   A   
SF_6. . . . . . . . . .  C ADDR   0EB4H   A   
SP. . . . . . . . . . .  D ADDR   0081H   A   
STAX_ . . . . . . . . .  C ADDR   0DFAH   A   
STAX_L1 . . . . . . . .  C ADDR   0E02H   A   
STAX_L2 . . . . . . . .  C ADDR   0E12H   A   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    74

STAX_L3 . . . . . . . .  C ADDR   0E18H   A   
STEP. . . . . . . . . .  C ADDR   143EH   A   
SUB_. . . . . . . . . .  C ADDR   0DA6H   A   
SUB_L1. . . . . . . . .  C ADDR   0DAEH   A   
SUB_L2. . . . . . . . .  C ADDR   0DBEH   A   
SUB_L3. . . . . . . . .  C ADDR   0DC6H   A   
SUB_L4. . . . . . . . .  C ADDR   0DCEH   A   
SUB_L5. . . . . . . . .  C ADDR   0DD6H   A   
SUB_L6. . . . . . . . .  C ADDR   0DDEH   A   
SUB_L7. . . . . . . . .  C ADDR   0DE6H   A   
SUB_L8. . . . . . . . .  C ADDR   0DEEH   A   
SUB_L9. . . . . . . . .  C ADDR   0DF4H   A   
SUB_MEM . . . . . . . .  C ADDR   143FH   A   
VH_1. . . . . . . . . .  C ADDR   1461H   A   
VH_10 . . . . . . . . .  C ADDR   14BEH   A   
VH_11 . . . . . . . . .  C ADDR   14C2H   A   
VH_12 . . . . . . . . .  C ADDR   14C8H   A   
VH_13 . . . . . . . . .  C ADDR   14CAH   A   
VH_14 . . . . . . . . .  C ADDR   14D3H   A   
VH_2. . . . . . . . . .  C ADDR   1481H   A   
VH_3. . . . . . . . . .  C ADDR   1491H   A   
VH_4. . . . . . . . . .  C ADDR   1495H   A   
VH_5. . . . . . . . . .  C ADDR   149BH   A   
VH_6. . . . . . . . . .  C ADDR   149DH   A   
VH_7. . . . . . . . . .  C ADDR   14A3H   A   
VH_8. . . . . . . . . .  C ADDR   14ADH   A   
VH_9. . . . . . . . . .  C ADDR   14B5H   A   
V_HEX . . . . . . . . .  C ADDR   145BH   A   
X2. . . . . . . . . . .  C ADDR   0610H   A   
X2_1. . . . . . . . . .  C ADDR   0613H   A   
X2_2. . . . . . . . . .  C ADDR   0630H   A   
X2_2L1. . . . . . . . .  C ADDR   0636H   A   
X2_2L2. . . . . . . . .  C ADDR   0644H   A   
X2_3. . . . . . . . . .  C ADDR   064FH   A   
XRA_. . . . . . . . . .  C ADDR   0E1EH   A   
XRA_L1. . . . . . . . .  C ADDR   0E26H   A   
XRA_L2. . . . . . . . .  C ADDR   0E36H   A   
XRA_L3. . . . . . . . .  C ADDR   0E3EH   A   
XRA_L4. . . . . . . . .  C ADDR   0E46H   A   
XRA_L5. . . . . . . . .  C ADDR   0E4EH   A   
XRA_L6. . . . . . . . .  C ADDR   0E56H   A   
XRA_L7. . . . . . . . .  C ADDR   0E5EH   A   
XRA_L8. . . . . . . . .  C ADDR   0E66H   A   
XRA_L9. . . . . . . . .  C ADDR   0E6CH   A   
_P2 . . . . . . . . . .  C ADDR   03D8H   A   
_P2_1 . . . . . . . . .  C ADDR   03DBH   A   
_P2_2 . . . . . . . . .  C ADDR   03F8H   A   
_P2_3 . . . . . . . . .  C ADDR   0403H   A   
_R2 . . . . . . . . . .  C ADDR   0413H   A   
_R2_1 . . . . . . . . .  C ADDR   0416H   A   
_R2_10. . . . . . . . .  C ADDR   04EBH   A   
_R2_10L1. . . . . . . .  C ADDR   04FBH   A   
_R2_10L2. . . . . . . .  C ADDR   050BH   A   
_R2_10L3. . . . . . . .  C ADDR   0513H   A   
_R2_10L4. . . . . . . .  C ADDR   051BH   A   
_R2_10L5. . . . . . . .  C ADDR   0523H   A   
_R2_10L6. . . . . . . .  C ADDR   052BH   A   
_R2_10L7. . . . . . . .  C ADDR   0533H   A   
_R2_10L8. . . . . . . .  C ADDR   053BH   A   
_R2_10L9. . . . . . . .  C ADDR   0541H   A   
_R2_11. . . . . . . . .  C ADDR   0546H   A   
_R2_12. . . . . . . . .  C ADDR   0551H   A   
_R2_1L1 . . . . . . . .  C ADDR   0424H   A   
_R2_1L2 . . . . . . . .  C ADDR   0437H   A   
_R2_2 . . . . . . . . .  C ADDR   0442H   A   
_R2_3 . . . . . . . . .  C ADDR   044DH   A   
A51 MACRO ASSEMBLER  COMBINEDSBC                                                          02/14/2015 16:26:46 PAGE    75

_R2_4 . . . . . . . . .  C ADDR   045DH   A   
_R2_5 . . . . . . . . .  C ADDR   046DH   A   
_R2_6 . . . . . . . . .  C ADDR   047DH   A   
_R2_7 . . . . . . . . .  C ADDR   0488H   A   
_R2_7L1 . . . . . . . .  C ADDR   048EH   A   
_R2_7L2 . . . . . . . .  C ADDR   04A1H   A   
_R2_8 . . . . . . . . .  C ADDR   04ACH   A   
_R2_8L1 . . . . . . . .  C ADDR   04B2H   A   
_R2_8L2 . . . . . . . .  C ADDR   04C5H   A   
_R2_8L3 . . . . . . . .  C ADDR   04D0H   A   
_R2_9 . . . . . . . . .  C ADDR   04DBH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
