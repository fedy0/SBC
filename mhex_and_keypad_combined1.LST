A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     1


MACRO ASSEMBLER A51 V8.01
OBJECT MODULE PLACED IN C:\sbcHex\mhex_and_keypad_combined1.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE mhex_and_keypad_combined1.a51 SET(SMALL) DEBUG OBJECT(C:\sbcHex\mhex_and_k
                      eypad_combined1.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     CLR_LCD                         MACRO                                                      
                                          ; CLEAR LCD
                       2                                     MOV             A, #01H
                       3                                     LCALL           LCD_CMD                                    
                                                                                                                                          
                       4                                     ENDM  
                       5     ; -----------------------------------------------------------------------------------------
                             ---------------------------------------------
                       6     D_STR                           MACRO                                                      
                                          ; DISPLAY STRINGS OF CHARACTER
                       7                                     LCALL           LCD_CMD
                       8                                     LCALL           DISP_CHAR
                       9                                     ENDM
                      10     
                      11     
                      12     
                      13     
                      14     
                      15     
                      16     
                      17     
                      18     
                      19     
                      20     
                      21     
                      22     
                      23     
                      24     
                      25     
                      26     
                      27     
                      28     
                      29     
                      30     
                      31     
                      32     
                      33     
                      34     
                      35     
                      36     
                      37     
                      38     
                      39     
                      40     
                      41     
                      42     
                      43     
                      44     
                      45     
                      46     
                      47     
                      48     
                      49     
                      50     
                      51     
                      52     
                      53     
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     2

                      54     
                      55     
                      56     
                      57     
                      58     
                      59     
                      60     
                      61     
                      62     
                      63     
                      64     
                      65     
                      66     
                      67     
                      68     
                      69     
                      70     
                      71     
                      72     
                      73     
                      74     
                      75     
                      76     
                      77     
                      78     
                      79     ; =*=*=*=*=*=*=*=*=*=*=*=*=*   MACHINE LANGUAGE (IN HEX, MHEX) AS THE CODE/PROGRAMMING LANG
                             UAGE TYPE (CPLT)  =*=*=*=*=*=*=*=*=*=*=*=*=*=
                      80     ; THIS MANIS SEGMENT/SUBROUTINE IS DEDICATED FOR MHEX
                      81     ; THE CHOICE WOULD ALWAYS BE BETWEEN MACHINE LANGUAGE (IN HEX, MHEX) AND ASSEMBLY LANGUAGE 
                             (ASM)
                      82     ; A TEST FLAG SHOULD COME AFTER SUB MEM FLAG IN THE MAIN PROGRAM
                      83               
                      84     ; -----------------------------------------------------------------------------------------
                             ---------------------------------------------
0000                  85                                     ORG                     00
0000 802E             86                                     SJMP            FEDY
                      87     
                      88     
0030                  89                                     ORG                     30H
0030                  90     FEDY:
0030 7590FF           91                                     MOV             P1,#0FFH                                   
                                  ; MAKE PORT1 AN INPUT PORT
0033 75B008           92                                     MOV             P3, #00001000B
                      93     
0036 31CC             94                                     ACALL           LCD_SET
0038 7401             95                                     MOV             A, #01H
003A 1201B6           96                                     LCALL           LCD_CMD
                      97     
003D 753B02           98                                     MOV                     3BH, #02H                          
                                          ; MOVE '2' INTO THE MHEX COUNTER
                      99     
0040 753900          100                                     MOV                     39H, #00H
0043 753A20          101                                     MOV                     3AH, #20H
0046 1191            102                                     CALL            ADDRESS_DISPLAY_CONTROL                 ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
                     103                             
                     104     
0048                 105     M_HEX:                  
                     106     ; ELOO PLEASE INCLUDE THE INSTRUCTIONS TO CARRY OUT DISPLAY ON LINE 2 HERE
0048 314A            107                                     CALL            KEYPAD_ID                                  
                                          ; ENSURE A KEY(1ST KEY) IS DEPRESSED
004A 3001FB          108                                     JNB                     01H, M_HEX
004D C201            109                                     CLR                     01H                                
                                                          ; GET READY FOR NEXT KEY
004F F531            110                                     MOV                     31H, A
                     111     
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     3

0051 B43001          112                                     CJNE            A, #30H, MH_1                              
                                  ; THE CONTENT OF 'A' MUST SATISFY THE FOLLOWING INEQUALITY: 30H =< A =< 46H
0054 C3              113                                     CLR                     C                                  
                                                          ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                     114     
0055 40F1            115     MH_1:                   JC                      M_HEX                                      
                                          ; IF A > 30 CONTINUE ELSE GO BACK TO MHEX
0057 9430            116                                     SUBB            A, #30H                                    
                                          ; SUBTRACT 30H FROM A REGISTER
0059 B40A01          117                                     CJNE            A, #0AH, MH_2                              
                                  
005C C3              118                                     CLR                     C                                  
                                                          ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                     119     
005D 4008            120     MH_2:                   JC                      MH_4
005F 9407            121                                     SUBB            A, #07H                                    
                                          ; SUBTRACT 07H FROM 'A' REGISTER
0061 B40F01          122                                     CJNE            A, #0FH, MH_3                              
                                  ; CHECK IF THE RESULT OF THE SUBTRACTION IS GREATER THAN 0FH; IF SO EXIT THE SR ELSE CONTINUE
0064 D3              123                                     SETB            C                                          
                                                  ; ENSURE IT PASSES TO THE NEXT INSTRUCTION
                     124     
0065 50E1            125     MH_3:                   JNC                     M_HEX                                      
                                          ; START AFRESH (ie MHEX) IF THE KEYPAD INPUT DOES NOT SATISFY THE ABOVE INEQUALITY
                     126                                                                                                
                                                          ; ELSE CONTINUE
0067 B20A            127     MH_4:                   CPL                     0AH                                        
                                                  ; FORMAT THE DATA AND SAVE TEMPORARILY IN THE MEM LOC 33H
0069 300A05          128                                     JNB                     0AH, MH_5
006C C4              129                                     SWAP            A
006D F533            130                                     MOV                     33H, A                             
                                                  
006F 8004            131                                     SJMP            MH_6                                       
                                          ; SKIP OPERATIONS IN LABEL MHEX_5
                     132     
0071 4533            133     MH_5:                   ORL                     A, 33H                                     
                                          ; FORMAT COMPLETED
0073 F533            134                                     MOV                     33H, A                             
                                                  ; CARRY OUT THE FINAL SAVE
                     135                                     
0075 E531            136     MH_6:                   MOV                     A, 31H                                     
                                          ; LOAD THE ASCII CODE FOR THE CURRENT CHARARTER TO BE DISPLAYED
0077 31E1            137                                     CALL            LCD_SHO
                     138     
0079 D53BCC          139                                     DJNZ            3BH, M_HEX                                 
                                          ; DECREMENT AND JUMP TILL ZERO TO CONTINUE
                     140     
007C 314A            141     MH_7:                   CALL            KEYPAD_ID                                          
                                  ; ENSURE A KEY IS DEPRESSED
007E 3001FB          142                                     JNB                     01H, MH_7
0081 C201            143                                     CLR                     01H     
                     144     
0083 B42AF6          145                                     CJNE            A, #'*', MH_7                              
                                  ; WAIT FOR 'NEXT KEY' TO BE PRESSED
                     146     
0086 753B02          147                                     MOV                     3BH, #02H                          
                                                  ; LOAD ANOTHER TWO DIGIT COUNT INTO MHC FOR THE NEXT INPUT (INSTRUCTION SET)
                     148     
0089 C203            149                                     CLR                     03H                                
                                                          ; SELECT OPCODE TYPE IN THE 'NEXT SR'
008B 11E0            150                                     CALL            NEXT                                       
                                          ; CALL NEXT OSR TO PERMANENTLY SAVE THE HEX CODE IN THE EXTERNAL MEMORY
008D 1191            151                                     CALL            ADDRESS_DISPLAY_CONTROL                 ; C
                             ALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1
                     152     
008F 0148            153                                     AJMP            M_HEX                                      
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     4

                                          
                     154     
                     155                                     
0091                 156     ADDRESS_DISPLAY_CONTROL:
                     157     ; THIS SR IS USED BY FLY_OPCODE & FLY_OPERAND (ie DATA TYPE & ADDRESS TYPE) TO CONTROL THE 
                             ADDRESS DISPLAY IN LINE 1
                     158     ; WHENEVER ENTRY IN LINE 2 IS COMPLETE AND NEXT IS PRESSED.
                     159     ; ALSO IT IS USED BY V_HEX AND CANCEL SR TO CONTROL THE ADDRESS DISPLAY IN LINE 1
                     160     ; THE INPUT MEMORY LOCATIONS TO THIS SUBROUTINE ARE 3AH & 39H
                     161     
                     162     ; IT FIRST CLEARS THE SCREEN OF THE LCD BEFORE WRITING INTO ITS LINE 1 ONLY. ALSO INCLUDE '
                             :' AFTER THE ADDRESS
                     163     
0091 7401            164                                     MOV             A, #01H
0093 1201B6          165                             LCALL           LCD_CMD
                     166     
                     167                                     ; MOST SIGNIFICANT BYTE (MSB)
0096 853A36          168                                     MOV                     36H, 3AH                           
                                  ; PLACE THE HOB OF THE CURRENT ADDRESS INTO THE INPUT MEMORY LOC. (36H) OF H2A SR
0099 11BE            169                                     CALL            HEX_2_ASCII
                     170     
009B 7480            171                                     MOV                     A, #80H                            
                                  ; LOAD A COMMAND TO DISPLAY THE CONTENT OF 38H & 37H ON LINE 1, POSITION 1 & 2
009D 31B6            172                                     CALL            LCD_CMD
                     173     
009F E538            174                                     MOV                     A, 38H                             
                                  ; 1ST NIBBLE DISPLAYED IN HEX IN POSITION 1
00A1 31E1            175                                     CALL            LCD_SHO
                     176     
00A3 E537            177                                     MOV                     A, 37H                             
                                  ; 2ND NIBBLE DISPLAYED IN HEX IN POSITION 2
00A5 31E1            178                                     CALL            LCD_SHO
                     179     
                     180                                     ; LEAST SIGNIFICANT BYTE (LSB)
00A7 853936          181                                     MOV                     36H, 39H                           
                                  ; PLACE THE HOB OF THE CURRENT ADDRESS INTO THE INPUT MEMORY LOC. (36H) OF H2A SR
00AA 11BE            182                                     CALL            HEX_2_ASCII
                     183     
00AC E538            184                                     MOV                     A, 38H                             
                                  ; 3RD NIBBLE DISPLAYED IN HEX IN POSITION 3
00AE 31E1            185                                     CALL            LCD_SHO
                     186     
00B0 E537            187                                     MOV                     A, 37H                             
                                  ; 4TH (LAST) NIBBLE DISPLAYED IN HEX IN POSITION 4
00B2 31E1            188                                     CALL            LCD_SHO
                     189     
                     190     
00B4 743A            191                                     MOV                     A, #':'                            
                                  ; DISPLAY ':' PROBABLY ON LINE 1, POSITION 5 (SINCE FOUR DISPLAYS HAS BEEN CARRIED OUT)
00B6 31E1            192                                     CALL            LCD_SHO
                     193     
00B8 74C0            194                                     MOV             A, #0C0H
00BA 1201B6          195                                     LCALL           LCD_CMD
00BD 22              196                                     RET
                     197     
00BE                 198     HEX_2_ASCII:
                     199     ; THIS A SR THAT TAKES CARE OF GENERATING THE EQUIVALENT ASCII CODE FROM A HEX INPUT CODE
                     200                                     ; HIGH ORDER BYTE CONVERSION BEGINS     HERE
00BE E536            201                                     MOV                     A, 36H                             
                                  ; LOAD THE HEX BYTE TO BE CONVERTED INTO 'A'
00C0 54F0            202                                     ANL                     A, #0F0H                           
                                  ; MASK THE LOW ORDER BYTE
00C2 C4              203                                     SWAP            A                                          
                                  ; HOB <==> LOB
00C3 B40A01          204                                     CJNE            A, #0AH, H2A_1
00C6 C3              205                                     CLR                     C
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     5

                     206                                                                                                
                                          ; IF 'A' >= 0AH DO THE FOLLOWING INSTRUCTIONS
00C7 4002            207     H2A_1:                  JC                      H2A_2                                   ; A
                             DD 07H & LATER 30H 
00C9 2407            208                                     ADD                     A, #07H                            
                                  ; (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE)
                     209     
                     210                                                                                                
                                          ; IF 'A' < 0AH DO THE FOLLOWING INSTRUCTIONS
00CB 2430            211     H2A_2:                  ADD                     A, #30H                                 ; A
                             DD 30H (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE) 
                     212     
00CD F538            213                                     MOV                     38H, A                             
                                  ; SAVE THE ASCII CODE OF THE HIGH ORDER BYTE IN MEM. 38H
                     214                                                                                                
                                          ; HIGH ORDER BYTE CONVERSION ENDS HERE
                     215     
                     216                                     ; LOW ORDER BYTE CONVERSION BEGINS HERE
00CF E536            217                                     MOV                     A, 36H                             
                                  ; LOAD THE HEX BYTE TO BE CONVERTED INTO 'A'
00D1 540F            218                                     ANL                     A, #0FH                            
                                  ; MASK THE HIGH ORDER BYTE
00D3 B40A01          219                                     CJNE            A, #0AH, H2A_3
00D6 C3              220                                     CLR                     C
                     221                                                                                                
                                          ; IF 'A' >= 0AH DO THE FOLLOWING INSTRUCTIONS
00D7 4002            222     H2A_3:                  JC                      H2A_4                                   ; A
                             DD 07H & LATER 30H 
00D9 2407            223                                     ADD                     A, #07H                            
                                  ; (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE)
                     224     
                     225                                                                                                
                                          ; IF 'A' < 0AH DO THE FOLLOWING INSTRUCTIONS
00DB 2430            226     H2A_4:                  ADD                     A, #30H                                 ; A
                             DD 30H (RAISE THE CONTENT OF 'A' TO THE NUMERICAL VALUE OF ITS EQUIVALENT ASCII CODE) 
                     227     
00DD F537            228                                     MOV                     37H, A                             
                                  ; SAVE THE ASCII CODE OF THE LOWER ORDER BYTE IN MEM. 37H
                     229     
                     230                                                                                                
                                          ; LOW ORDER BYTE CONVERSION ENDS HERE
00DF 22              231                                     RET
                     232     
                     233     ; TESTED: QC PASSED SYNTAXICALLY AND SEMANTICALLY
                     234     
                     235     ; -----------------------------------------------------------------------------------------
                             ---------------------------------------------
                     236     ; THIS SUBROUTINE LOADS THE APPROPRIATE OPCODE OR OPERAND(ie DATA OR ADDRESS) INTO THEIR PE
                             RMANENT LOCATION
                     237     ; IT DIFFRENETIATES OPCODE CALL FROM AN OPERAND CALL BY USING THE NEXT TYPE FLAG (ie NCF 03
                             H)
                     238     ; WHEN IT IS SET IT CALLS THE OPERAND ELSE THE OPCODE, NCF IS TESTED AT THE ENTRANCE TO THE
                              SR 
                     239     ; IT ALSO HANDLES THE SUB MEM START ADDRESS INTIALIZATION 
                     240     
                     241     ; THIS IS THE SR WHERE MEMORY ADDRESS INCREMENT DISPLAY REGISTER IS TO BE CONFIGURED
                     242     ; ***ON ERROR AFTER TESTING THIS SR CHANGE DPH = 83H, & DPL = 82H(DIRECT ADDRESSING)
                     243     
                     244     ; ****REMEMBER TO SAVE REGS & FLAGS STILL RELEVANT TO THE CALLER PROGRAM TO AVOID DATA LOSS
                             ****
                     245     
00E0                 246     NEXT:                   
                     247     
00E0 200802          248                                     JB                      08H, NEXT_4_SUB_MEM                
                                  ; CHECK WHETHER CALLER PROGRAM IS SUB MEM OR OTHERS AND JUMP APTLY
00E3 801C            249                                     SJMP            NEXT_4_OPCODE
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     6

00E5                 250     NEXT_4_SUB_MEM:
                     251                                     ; LOAD THE USER'S DESIRED START CODE ADDRESS IN THE DATA PO
                             INTER'S HIGH AND LOWER ORDER REG.
                     252                                     
                     253     
00E5 85353A          254                                     MOV                     3AH, 35H                           
                                          ; LOAD THE HIGH ORDER BYTE INTO NEXT ADDRESS HOLDER/ADDRESS_DISPLAY_CONTROL'S INPUT MEM LOC 2 FOR DISPLAY 
00E8 853439          255                                     MOV                     39H, 34H                           
                                          ; LOAD THE LOW ORDER BYTE INTO NEXT ADDRESS HOLDER/ADDRESS_DISPLAY_CONTROL'S INPUT MEM LOC 1 FOR DISPLAY
                     256     
00EB 85353F          257                                     MOV                     3FH, 35H                           
                                          ; LOAD THE HIGH ORDER BYTE INTO THE V_HEX DISPLAY ADDRESS MEM LOC 2
00EE 85343E          258                                     MOV                     3EH, 34H                           
                                          ; LOAD THE LOWER ORDER BYTE     INTO THE V_HEX DISPLAY ADDRESS MEM LOC 1
                     259     
00F1 853543          260                                     MOV                     43H, 35H                           
                                          ; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
00F4 853442          261                                     MOV                     42H, 34H                           
                                          ;                                                                                         (LOB)
                     262     
00F7 853541          263                                     MOV                     41H, 35H                           
                                          ; THE END ADDRESS (PREPARE AN ADDRESS +1 GREATER THAN ITSELF) FOR AUTO EXAM REG... 
00FA 853440          264                                     MOV                     40H, 34H                           
                                          ; BY BOTH THE uC AND uP AFTER 'END' IS PRESSED
                     265     
                     266                                     ; THE MEM. LOCATIONS TO BE USED HERE ARE 34H & 35H (BECAUSE
                              THEY CONTAIN THE CURRENT LOW & HIGH ORDER ADDRESS RESPECTIVELY)
                     267                                     ; LOAD IT INTO A REGISTER (EXTERNAL TRANSFER REGISTER) THAT
                              CAN COMMUNICATE WITH THE OUTSIDE WORLD(I MEAN OUTSIDE THE MICROCONTROLLER)
                     268     
00FD C208            269                                     CLR                     08H                                
                                                  ; CLEAR THE NEXT SUB MEM FLAG (IS IT NECESSARY TO CLEAR THIS FLAG OR J
                             UST LEAVE IT TO CLEAR ON RESET)
00FF 803E            270                                     SJMP            EXIT_NEXT                                  
                                  ; ELOO CHECK AGAIN COS I THINK IT IS NECESSARY TO BE CLEARED ON MY FIRST LOOK/REVIEW 
0101                 271     NEXT_4_OPCODE:
0101 C083            272                                     PUSH            DPH                                        
                                          ; SAVE THE CONTENT OF THE DATA POINTER REGISTERS SINCE THEY WOULD BE USED HERE
0103 C082            273                                     PUSH            DPL
                     274     
0105 853A83          275                                     MOV                     DPH, 3AH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE DATA POINTER
0108 853982          276                                     MOV                     DPL, 39H
                     277     
010B 858341          278                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
010E 858240          279                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                     280     
0111 200306          281                                     JB                      03H, NEXT_OPERAND                  
                                  ; SELECT BETWEEN OPERAND AND OPCODE NEXT CALL (OPCODE TYPE 03H= 0, OPERAND TYPE 03H= 1)
                     282     
                     283                                     ; OPCODE NEXT CALL BEGINS HERE
                     284     
0114 E533            285                                     MOV                     A, 33H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 1 TEMPORARY STORE (ie 33H)
0116 F0              286                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
0117 A3              287                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                     288     
0118 8025            289                                     SJMP            EXIT_NEXT                                  
                                  ; 'NEXT SR' CALL ENDS HERE FOR THE OPCODE
011A                 290     NEXT_OPERAND:   
011A 200D12          291                                     JB                      0DH, NEXT_OPERAND_AD_TYPE       ; J
                             UMP TO THE LABEL IF IT IS CALL BY 8051
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     7

011D                 292     ___8051_SPECIAL_NEXT:
                     293                                     ; THE DATA TYPE OR BYTE 2 OPERAND(LOW ADDRESS BYTE) BEGINS 
                             HERE (FOR 8085)
011D 858341          294                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
0120 858240          295                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                     296     
0123 E534            297                                     MOV                     A, 34H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 2 TEMPORARY STORE (ie 34H)
0125 F0              298                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
0126 A3              299                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                     300                                     
0127 200D15          301                                     JB                      0DH, EXIT_NEXT
                     302     
012A 200702          303                                     JB                      07H, NEXT_OPERAND_AD_TYPE       ; S
                             ELECT BETWEEN DATA AND ADDRESS TYPE OPERAND (FOR 8085 HERE)
                     304                                                                                                
                                                  ; THE DATA TYPE CONTINUES WHILE ADDRESS TYPE JUMPS
012D 8010            305                                     SJMP            EXIT_NEXT                                  
                                  ; SR ENDS HERE FOR THE DATA TYPE OPERAND
                     306     
012F                 307     NEXT_OPERAND_AD_TYPE:
                     308                                     ; ADDRESS TYPE COMPLETES THE REMAINING HALF (ie BYTE 3)
012F 858341          309                                     MOV                     41H, DPH                           
                                          ; LOAD THE PREVIOUS ADDRESS INTO THE END ADDRESS WHICH PREPARE AN ADDRESS... 
0132 858240          310                                     MOV                     40H, DPL                           
                                          ; +1 GREATER THAN ITSELF FOR AUTO EXAM REG BY BOTH THE uC & uP AFTER 'END' IS PRESSED
                     311     
0135 E535            312                                     MOV                     A, 35H                             
                                          ; TRANSFER THE OPCODE'S HEX CODE FROM BYTE 3 TEMPORARY STORE (ie 35H)
0137 F0              313                                     MOVX            @DPTR, A                                   
                                  ; INTO THE EXTERNAL MEMORY SPECIFIED BY THE USER.
0138 A3              314                                     INC                     DPTR                               
                                          ; INCREMENT THE DATA POINTER FOR THE NEXT INSTRUCTION'S EXTERNAL TRANSFER
                     315                                     
0139 300D03          316                                     JNB                     0DH, EXIT_NEXT                     
                                  ; END TO ALL 8085 ACTIVITIES
013C 200EDE          317                                     JB                      0EH, ___8051_SPECIAL_NEXT       ; S
                             ELECT BETWEEN DATA(0EH=0) AND ADDRESS(0EH=1) TYPE OPERAND (FOR 8051 HERE)
                     318                                                                                                
                                                  ; TO STOP DATA OPERAND FROM JUMPING (FOR 8051)
                     319     
013F                 320     EXIT_NEXT:              ; SAVE THE NEXT INSTRUCTION'S EXTERNAL TRANSFER ADDRESS (CURRENT AD
                             DRESS)
013F 85833A          321                                     MOV                     3AH, DPH                           
                                          ; LOAD THE HIGH ORDER BYTE
0142 858239          322                                     MOV                     39H, DPL                           
                                          ; LOAD THE LOWER ORDER BYTE
                     323     
                     324     ;                               MOV                     43H, 3AH                           
                                          ; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
                     325     ;                               MOV                     42H, 39H                           
                                          ;                                                                                         (LOB)
                     326     
                     327                                     ; DISPLAY THE NEW ADDRESS IN LINE 1 OF THE LCD (THE NEW ADD
                             RESS ARE IN THE MEM LOC. 39H & 3AH)
0145 D082            328                                     POP             DPL                                        
                                          ; RETRIEVE THE FORMER CONTENT OF THE DATA POINTER REGISTER
0147 D083            329                             POP             DPH                                                
                                  ; REMEMBER 'FIFO' TECHGNIQUE IS USED WHEN PUSHING AND POPPING ON THE STACK
                     330                                     
0149 22              331                                     RET
                     332     
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     8

                     333     
                     334     
                     335     
                     336     
                     337     
                     338     
                     339     
                     340     
                     341     
                     342     
                     343     
                     344     
                     345     
                     346     
                     347     
                     348     
                     349     
                     350     
                     351     
                     352     
                     353     
                     354     
                     355     
                     356     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
                     357     
                     358     ; ELOO U MAY PUT UR FLAG FOR SUB MEM ASCII_2_HEX SR CALL HERE(NOTE SUCH FLAG MUST BE CLEAR 
                             AT THE SUB MEM SR ON RETURN IMMEDIATELY)
                     359     ; EXPECTED FLAG INSTRUCTION: JB         SubMem'sAscii2hexFlag, EXIT_A2H
                     360     
                     361     ; THE TEST IS COMPLETED. THE INEQUQLITY: 30H =< A =< 46H HAS BEEN SATISFIED AND CONVERSION 
                             HAS TAKEN PLACE!!!
                     362     
                     363     ; THIS SUBROUTINE RETRIEVES DATA FROM THE KEYPAD AND IDENTIFIES THE KEY PRESSED
                     364     
                     365     
                     366     
                     367                             
                     368     
                     369     
                     370     
                     371     
                     372     
                     373     
                     374     
                     375            
014A 31C3            376     KEYPAD_ID:                      ACALL           LCD_DLY                                    
                                  ; 20mS KEYBOARD/PAD DEBOUNCER
014C E590            377                                     MOV             A, P1
014E B4FF02          378                                     CJNE            A, #11111111B, K_ID_1
0151 8054            379                                             JMP             KEYFNL
                     380            
0153 31C3            381     K_ID_1:                         ACALL           LCD_DLY                                    
                                  ; 20mS KEYBOARD/PAD DEBOUNCER
0155 E590            382                                     MOV             A, P1
0157 B4FF02          383                                     CJNE            A, #11111111B, K_ID_2
015A 804B            384                                             JMP             KEYFNL
                     385            
015C 75B0FE          386     K_ID_2:                         MOV             P3, #11111110B
015F E590            387                                     MOV             A, P1
0161 B4FF1A          388                                     CJNE            A, #11111111B, ROW_0
                     389            
0164 75B0FD          390                                     MOV             P3, #11111101B
0167 E590            391                                     MOV             A, P1
0169 B4FF17          392                                     CJNE            A, #11111111B, ROW_1
                     393            
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE     9

016C 75B0EF          394                                     MOV             P3, #11101111B
016F E590            395                                     MOV             A, P1
0171 B4FF14          396                                     CJNE            A, #11111111B, ROW_2
                     397            
0174 75B0DF          398                                     MOV             P3, #11011111B
0177 E590            399                                             MOV             A, P1
0179 B4FF11          400                                             CJNE            A, #11111111B, ROW_3
                     401           
017C 8029            402                                             JMP             KEYFNL
                     403            
017E 900200          404     ROW_0:                          MOV             DPTR, #LT_ROW_1
0181 800D            405                                     SJMP            K_ID_3                                     
                                  ; FIND ROW 1
                     406             
0183 900208          407     ROW_1:                          MOV             DPTR, #LT_ROW_2
0186 8008            408                                     SJMP            K_ID_3                                     
                                  ; FIND ROW 2
                     409     
0188 900210          410     ROW_2:                          MOV             DPTR, #LT_ROW_3
018B 8003            411                                     SJMP            K_ID_3                                     
                                  ; FIND ROW 3
                     412     
018D 900218          413     ROW_3:                          MOV             DPTR, #LT_ROW_4
                     414                                                                                                
                                                          ; FIND ROW 4
0190 13              415     K_ID_3:                         RRC             A
0191 5003            416                                     JNC             K_ID_4                                     
                                  ; MATCH
0193 A3              417                                     INC             DPTR
0194 80FA            418                                     SJMP            K_ID_3
                     419           
0196 31C3            420     K_ID_4:                         ACALL           LCD_DLY                                    
                                  ; THIS SR IS TO ENSURE THAT THE USER RELEASES THE KEY TO AVOID KEY REPETITION
0198 7590FF          421                                             MOV             P1,#0FFH                           
                                          ; MAKE PORT 1 AN INPUT PORT
019B 75B008          422                                             MOV             P3, #00001000B
019E E590            423                                             MOV             A, P1
01A0 B4FFF3          424                                     CJNE            A, #11111111B, K_ID_4
                     425                                             
01A3 E4              426                                             CLR             A
01A4 93              427                                     MOVC            A, @A+DPTR
                     428                             
01A5 D201            429                                             SETB            01H
                     430                                             
01A7 22              431     KEYFNL:                         RET                                                        
                                                  ; RETURN TO KEYPAD_ID
                     432            
                     433     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
01A8                 434     GET_READY:
                     435     ; THIS SUBROUTINE CHECKS BUSY FLAG (P0.7=D7) TO ENABLE COMMAND OR DATA LATCH-IN
                     436     ; SFR BITS: P0.7 (D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
01A8 D287            437                                             SETB            P0.7                               
                                          ; MAKE P0.7 INPUT PORT
01AA C2A5            438                                             CLR             P2.5                               
                                          ; RS=0 ACCESS LCD COMMAND REG
01AC D2A6            439                                             SETB            P2.6                               
                                          ; R/W=1 READ COMMAND REG
                     440                                                                                                
                                                          ; READ COMMAND REG AND CHECK BUSY FLAG
01AE                 441     BACK:   
01AE C2B3            442                                             CLR             P3.3                               
                                          ; E=0 L-TO-H PULSE
01B0 D2B3            443                                             SETB            P3.3                               
                                          ; E=1 FOR L-TO-H PULSE
01B2 2087F9          444                                             JB                      P0.7, BACK                 
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE    10

                                                  ; STAY UNTIL BUSY FLAG=0
01B5 22              445                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
                     446     
                     447     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
01B6                 448     LCD_CMD:
                     449     ; THIS SUBROUTINE SENDS THE ASCII CODE FOR THE COMMAND CHARATER TO BE DISPLAYED ON THE LCD
                     450     ; IT CALLS READY (OSR) TO CHECK BUSY FLAG FOR COMMAND TO BE LATCHED-IN
                     451     ; OPERATING REGISTER: A
                     452     ; SFR BITS: P0 (LCD DATA PORT D0-D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
                     453      
01B6 31A8            454                                             ACALL           GET_READY                          
                                          ; IS LCD READY?
01B8 F580            455                                             MOV             P0, A                              
                                          ; LATCH COMMAND INTO LCD DATA PORT        
01BA C2A5            456                                             CLR             P2.5                               
                                          ; RS=0 ACCESS LCD COMMAND REG
01BC C2A6            457                                             CLR                     P2.6                       
                                                  ; WRITE
01BE D2B3            458                                             SETB            P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
01C0 C2B3            459                                             CLR             P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
01C2 22              460                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
                     461     
                     462     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
01C3                 463     LCD_DLY:
01C3 7E3B            464                                             MOV             R6,#3BH
01C5                 465     HERE2:
01C5 7FA8            466                                             MOV             R7,#0A8H
01C7                 467     HERE1:
01C7 DFFE            468                                             DJNZ            R7,HERE1        
01C9 DEFA            469                                             DJNZ            R6,HERE2
01CB 22              470                                             RET
                     471     
                     472     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
01CC                 473     LCD_SET:
                     474     ; THIS SUBROUTINE SETS THE MODE OF OPERATION OF THE LCD
                     475     ; IT CALLS LCD_CMD OSR TO LATCH-IN THE COMMAND
                     476     ; OPERATING REGISTER: A
01CC 7438            477                                             MOV     A, #38H                                    
                                          ; 2 LINES, 5 X 7 MATRIX DISPLAY
01CE 31B6            478                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
01D0 74C0            479                                             MOV     A, #0C0H                                   
                                          ; DISPLAY ON SECOND LINE
01D2 31B6            480                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
01D4 7406            481                                             MOV     A, #06H                                    
                                          ; INCREMENT FROM LEFT TO RIGHT
01D6 31B6            482                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
01D8 740E            483                                     MOV     A, #0EH                                            
                                  ; DISPLAY ON, CURSOR BLINKING
01DA 31B6            484                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
01DC 7401            485                                     MOV     A, #01H                                            
                                  ; CLEAR AND RETURN TO HOME
01DE 31B6            486                                             CALL    LCD_CMD                                    
                                          ; LATCH COMMAND JUST ABOVE INTO THE LCD
01E0 22              487                                             RET                                                
                                                          ; RETURN TO THE CALLER PROGRAM
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE    11

                     488     
                     489     
                     490     ; -----------------------------------------------------------------------------------------
                             ----------------------------------------------
01E1                 491     LCD_SHO:
                     492     ; THIS SUBROUTINE SENDS THE ASCII CODE FOR THE DATA CHARATER TO BE DISPLAYED ON THE LCD
                     493     ; IT CALLS READY (OSR) TO CHECK BUSY FLAG FOR DATA TO BE LATCHED-IN
                     494     ; OPERATING REGISTER: A
                     495     ; SFR BITS: P0 (LCD DATA PORT D0-D7), P2.5 (RS), P2.6 (R/!W), P3.3 (EN)
01E1 31A8            496                                             ACALL           GET_READY                          
                                          ; IS LCD READY?
01E3 F580            497                                             MOV             P0, A                              
                                          ; LATCH DATA INTO LCD DATA PORT 
01E5 D2A5            498                                             SETB            P2.5                               
                                          ; RS=1, ACCESS LCD DATA REG
01E7 C2A6            499                                             CLR                     P2.6                       
                                                  ; R/!W=0, WRITE
01E9 D2B3            500                                             SETB            P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
01EB C2B3            501                                             CLR             P3.3                               
                                          ; H-TO-L PULSE TO LATCH-IN
01ED 22              502                                             RET
                     503     
                     504     ; **********************************************
0200                 505                                     ORG             200H
                     506     
0200 30313233        507     LT_ROW_1:                       DB                      '0','1','2','3','4','5','6','7'    
                                  ; DATA STORED IN ASCII CODE
0204 34353637                
0208 45525455        508     LT_ROW_2:                       DB                      'E','R','T','U','I','O','P','8'
020C 494F5038                
0210 41534446        509     LT_ROW_3:                       DB                      'A','S','D','F','H','J','L','9'
0214 484A4C39                
0218 5A584356        510     LT_ROW_4:                       DB                      'Z','X','C','V','B','N','M','*'    
                                  ; '*' IS RESERVED FOR THE FUNCTION 'NEXT'
021C 424E4D2A                
                     511     
                     512                                             END
A51 MACRO ASSEMBLER  MHEX_AND_KEYPAD_COMBINED1                                            11/26/2015 11:00:24 PAGE    12

SYMBOL TABLE LISTING
------ ----- -------


N A M E                  T Y P E  V A L U E   ATTRIBUTES

ADDRESS_DISPLAY_CONTROL  C ADDR   0091H   A   
BACK. . . . . . . . . .  C ADDR   01AEH   A   
DPH . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . .  D ADDR   0082H   A   
EXIT_NEXT . . . . . . .  C ADDR   013FH   A   
FEDY. . . . . . . . . .  C ADDR   0030H   A   
GET_READY . . . . . . .  C ADDR   01A8H   A   
H2A_1 . . . . . . . . .  C ADDR   00C7H   A   
H2A_2 . . . . . . . . .  C ADDR   00CBH   A   
H2A_3 . . . . . . . . .  C ADDR   00D7H   A   
H2A_4 . . . . . . . . .  C ADDR   00DBH   A   
HERE1 . . . . . . . . .  C ADDR   01C7H   A   
HERE2 . . . . . . . . .  C ADDR   01C5H   A   
HEX_2_ASCII . . . . . .  C ADDR   00BEH   A   
KEYFNL. . . . . . . . .  C ADDR   01A7H   A   
KEYPAD_ID . . . . . . .  C ADDR   014AH   A   
K_ID_1. . . . . . . . .  C ADDR   0153H   A   
K_ID_2. . . . . . . . .  C ADDR   015CH   A   
K_ID_3. . . . . . . . .  C ADDR   0190H   A   
K_ID_4. . . . . . . . .  C ADDR   0196H   A   
LCD_CMD . . . . . . . .  C ADDR   01B6H   A   
LCD_DLY . . . . . . . .  C ADDR   01C3H   A   
LCD_SET . . . . . . . .  C ADDR   01CCH   A   
LCD_SHO . . . . . . . .  C ADDR   01E1H   A   
LT_ROW_1. . . . . . . .  C ADDR   0200H   A   
LT_ROW_2. . . . . . . .  C ADDR   0208H   A   
LT_ROW_3. . . . . . . .  C ADDR   0210H   A   
LT_ROW_4. . . . . . . .  C ADDR   0218H   A   
MH_1. . . . . . . . . .  C ADDR   0055H   A   
MH_2. . . . . . . . . .  C ADDR   005DH   A   
MH_3. . . . . . . . . .  C ADDR   0065H   A   
MH_4. . . . . . . . . .  C ADDR   0067H   A   
MH_5. . . . . . . . . .  C ADDR   0071H   A   
MH_6. . . . . . . . . .  C ADDR   0075H   A   
MH_7. . . . . . . . . .  C ADDR   007CH   A   
M_HEX . . . . . . . . .  C ADDR   0048H   A   
NEXT. . . . . . . . . .  C ADDR   00E0H   A   
NEXT_4_OPCODE . . . . .  C ADDR   0101H   A   
NEXT_4_SUB_MEM. . . . .  C ADDR   00E5H   A   
NEXT_OPERAND. . . . . .  C ADDR   011AH   A   
NEXT_OPERAND_AD_TYPE. .  C ADDR   012FH   A   
P0. . . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . . .  D ADDR   00A0H   A   
P3. . . . . . . . . . .  D ADDR   00B0H   A   
ROW_0 . . . . . . . . .  C ADDR   017EH   A   
ROW_1 . . . . . . . . .  C ADDR   0183H   A   
ROW_2 . . . . . . . . .  C ADDR   0188H   A   
ROW_3 . . . . . . . . .  C ADDR   018DH   A   
___8051_SPECIAL_NEXT. .  C ADDR   011DH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
