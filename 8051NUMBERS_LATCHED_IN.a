; THIS SR IS USED TO DETECT THE PARTICULAR NUMBER PRESSED
; BY THE USER WHEN QUEING IN DATA IN TO THE SYSTEM
; FLAG USED: 0FH, 10H, 11H, 12H, 13H, 01H, 03H, 0EH	, 14H, 15H, 16H, 17H
; MEM USED:	51H, 33H, 34H, 35H, 53H, 54H, 55H


; FOR OPCODE XX   AND   OPCODE A, #XX
___8051NUMBERS_LATCHED_IN:	JB			25H, ___8051_N3				; THIS FLAG IS USED FOR ONLY WITH OPERAND '@R0/1, A' INSTRUCTION FOR A PECULIAR JUMP HERE
							JB			20H, ___8051NUMBERS_EXIT_	; IT HELPS TO LATCH-IN CODES FROM OTHER SRs TO THE EXT. MEM
							JB			16H, ___8051NUMBERS_EXIT_	; THE LABEL & FLAG FOR PURE OPCODE (FLAG CLEARED IN 8051Rn SR)
							JB			15H, ___8051_N1_1_			; THE LABEL & FLAG FOR OPERAND OF THE TYPE '@Ri' NOTED
							JNB			14H, ___SKIP_END			; THE LABEL & FLAG FOR OPERAND OF THE TYPE ..., #XX NOTED
___START_SKIP:				CALL		KEYPAD_ID
							JNB			01H, ___START_SKIP
							CLR			01H
							CALL		___8051NUMBERS_EX
							JNB			0FH, ___START_SKIP
							CLR			0FH		   
							CALL		LCD_SHO
							CALL		ASCII_2_HEX 
							DJNZ		50H, ___START_SKIP 
							MOV			35H, 34H					; SAVE THE 2ND BYTE OF INSTRUCTION
							AJMP		___8051NUMBERS_EXIT_		; JUMP TO INSTRUTION TAHT LATCH-IN THE USER'S DATA INPUT

___SKIP_END:				CALL		___8051NUMBERS_EX
							JNB			0FH, ___8051NUMBERS_EXIT	; JUMP IF NOT A HEX NUMBER

							CALL 		LCD_SHO

							CALL		ASCII_2_HEX

							CPL			10H
							JB			10H, ___8051NUMBERS_EXIT

							MOV			35H, 34H					; SAVE THE HIGH ORDER BYTE
							MOV			51H, #02H					; LOAD 2 FOR THE REMANING TWO NIBBLE/FIGURES THE USER WOULD ENTER
																	; ie FOR XXXX & XX, XX OPERAND TYPE
							JB			11H, ___8051_N1				; FOR INSTRUCTION WITH OPERANDS OF THE FORM: XX, XX or XX, A or XX, #XX
							JB			12H, ___8051_N2				; FOR INSTRUCTION WITH OPERAND OF THE FORM: XXXX (16BIT)

							SETB		14H							; USED AS DATA FLAG ONLY
							SJMP		___8051NUMBERS_EXIT_		; JUMP TO INSTRUTION THAT LATCH-IN THE USER'S DATA INPUT



; FOR OPCODE XX, #XX OR	OPCODE XX, @XX	ETC

___8051_N1:					MOV			A, #','						
							CALL 		LCD_SHO
							MOV			A, #' '
							CALL 		LCD_SHO
												
___8051_N1_1:				CALL		KEYPAD_ID 
							JNB			01H, ___8051_N1_1
							CLR			01H
																	 
							CJNE		A, #'@', ___8051_N1_2			; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE		
___8051_N1_1_:				MOV			A, #'@'
							CALL 		LCD_SHO
							MOV			A, #'R'
							CALL		LCD_SHO

___8051_N1_1_1:				CALL		KEYPAD_ID 
							JNB			01H, ___8051_N1_1_1
							CLR			01H
							
							CJNE		A, #'0', ___8051_N1_1_2
							CALL 		LCD_SHO
							ANL			33H, #0FEH						; AN EXCEPT TO THIS IS 'MOV  XX, @R0' SO TAKE NOTE
							SJMP		___8051_N1_1_F
___8051_N1_1_2:				CJNE		A, #'1', ___8051_N1_1_1
							CALL		LCD_SHO
							ORL			33H, #01H						; AN EXCEPT TO THIS IS 'MOV  XX, @R1' SO TAKE NOTE	
___8051_N1_1_F:				SETB		13H								; INDICATES A 1-BYTE INSTR. ie IT USES 33H FOR LATCHING TO EXTERNAL MEM
							SJMP		___8051NUMBERS_EXIT_


___8051_N1_2:			   	CJNE		A, #'A', ___8051_N1_3
							CALL 		LCD_SHO
							SETB		14H								; FLAG INDICATES DATA OR 2-BYTE INSTR. (IT HELPS IN DATA LATCH_IN)
							MOV			33H, 53H						; LOAD THE OPCODE THAT WAS TEMPORARILY STORED
							SJMP		___8051NUMBERS_EXIT_

___8051_N1_3:				CJNE		A, #'C', ___8051_N1_4
							CALL 		LCD_SHO

___8051_N1_4:				CJNE		A, #'R', ___8051_N1_5
							CALL 		LCD_SHO

___8051_N1_5:				CJNE		A, #'/', ___8051_N1_6			 ; REMEMBER THAT THIS GUY '/' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE		
							MOV			A, #'/'
							CALL 		LCD_SHO

___8051_N1_6:				CJNE		A, #'#', ___8051_N1_7			; REMEMBER THAT THIS GUY '#' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE		
							MOV			A, #'#'
							CALL 		LCD_SHO
							SETB		17H								; (FLAG USED FOR INDICATING & CAUSING SKIP FOR INSTR. OF THE TYPE XX, #XX IN THE CODE SEGMENT FOLLOWING)
							MOV			33H, 54H						; LOAD THE OPCODE THAT WAS TEMPORARILY STORED
																		; CONTINUE TO NEXT CODE TO GET THE REMAINING IMMEDIATE DATA ie #XX
___8051_N1_7:				CLR			0FH								; PREPARE THE TEST FLAG FOR A TEST
							CALL		___8051NUMBERS_EX
							JNB			0FH, ___8051_N1_1
							CALL 		LCD_SHO

							CALL		ASCII_2_HEX
							DJNZ		51H, ___8051_N1_1
							JB			17H, ___8051NUMBERS_EXIT_		; JUMP IF THE PORGRAM SEQUENCE ORIGINATED FROM '#' ABOVE
							MOV			33H, 55H						; LOAD THE OPCODE THAT WAS TEMPORARILY STORED FOR THIS TYPE OF INSTR. 'XX, XX' ONLY
							SJMP		___8051NUMBERS_EXIT_			; JUMP FOR THAT SEGMENT OF THIS SR TO ENSURE THAT THE 'NEXT KEY' ie '*' 
																		; IS PRESSED BY THE USER


							
___8051_N2:					CALL		KEYPAD_ID 
							JNB			01H, ___8051_N2
							CLR			01H

							CLR			0FH
							CALL		___8051NUMBERS_EX
							JNB			0FH, ___8051_N2

							CALL 		LCD_SHO

							CALL		ASCII_2_HEX
							DJNZ		51H, ___8051_N2

							SJMP		___8051NUMBERS_EXIT_			; JUMP FOR THAT SEGMENT OF THIS SR TO ENSURE THAT THE 'NEXT KEY' ie '*' 
																		; IS PRESSED BY THE USER
; THIS CODE SEGMENT IS FOR ONLY MISCELLANOUS 'MOV' INSTRUCTIONS
___8051_N3:					MOV			A,','							; FOR INSTRUCTION WITH OPERAND '@R0/1, A' IN MOV ONLY
							CALL		LCD_SHO
							MOV			A,'A'
							CALL		LCD_SHO
							CLR			26H
							CLR			18H
							SJMP		___8051NUMBERS_EXIT_			; JUMP FOR THAT SEGMENT OF THIS SR TO ENSURE THAT THE 'NEXT KEY' ie '*' 
																		; IS PRESSED BY THE USER				

;							JB			32H,

;							JB			33H,

							; THIS SEGMENT OF THE PROGRAM IS MAJORLY FOR CALLING THE NEXT SR TO LACHT-IN THE DATA INPUT BY THE USER
___8051NUMBERS_EXIT_:		CALL		KEYPAD_ID 					
							JNB			01H, ___8051NUMBERS_EXIT_
							CLR			01H							; GET RESDY FOR ANOTHER KEY
							
							CJNE		A, #'*', ___8051NUMBERS_EXIT_
							; --- OPCODES
							CLR			03H							; SELECT OPCODE TYPE IN THE 'NEXT SR' (NOT OPERAND TYPE)
							CALL		NEXT						; OPCODE LATCH-IN
							JB			13H, ___8051NUMBERS_EXIT_3	; END FOR INSTRUCTION THAT ARE 1-BYTE (OPCODE TYPE INSTR.) 

							SETB		03H							; SELECT OPERAND TYPE IN THE 'NEXT SR' (NOT OPCODE TYPE)
							; --- DATA TYPE OPERAND
							JB			14H, ___8051NUMBERS_EXIT_1	; JUMP TO DATA TYPE OPERAND LATCH-IN

							; --- ADDRESS TYPE OPERAND
							SETB		0EH							; SELECT ADDRESS TYPE OPERAND IN THE 'NEXT SR' FOR 8051 ONLY
							SJMP		___8051NUMBERS_EXIT_2		; JUMP TO ADDRESS TYPE OPERAND LATCH-IN

___8051NUMBERS_EXIT_1:		CLR			0EH							; SELECT DATA TYPE OPERAND IN THE 'NEXT SR' FOR 8051 ONLY

___8051NUMBERS_EXIT_2:		CALL		NEXT						; CALL NEXT OSR TO PERMANENTLY SAVE THE OPERAND CODES

___8051NUMBERS_EXIT_3:		MOV			43H, 3AH					; SAVE THE CURRENT ADDRESS IN THE PAGE MEMORY (HOB)
							MOV			42H, 39H					;											  (LOB)

							CALL		ADDRESS_DISPLAY_CONTROL		; CALL THIS OSR TO CLEAR THE LCD SCREEN AND WRITE THE NEW ADDRESS IN LINE 1

							CLR			11H							; (USED FOR 3-BYTE INSTR.) PREPARE THE OPERAND TYPE FLAGS FOR NEXT INSTRUCTION/ NEXT TIME OF USAGE
							CLR			12H							; (USED FOR 3-BYTE INSTR.)
							CLR			13H							; (USED FOR 1-BYTE INSTR.)
							CLR			14H			   				; (USED FOR 2-BYTE INSTR.)
							CLR			17H							; (FLAG USED FOR INDICATING & CAUSING SKIP FOR INSTR. OF THE TYPE XX, #XX)
							; NOTICE THAT AT THE END OF ENTERING ANY OPERAND TYPE THE TEST FLAG, 0FH ALWAYS REMAINS SET BEFORE LEAVING THE SR
							CLR			20H							; '___8051OPERAND_d_R_A' SR ID FLAG READY FOR THE NEXT USAGE
___8051NUMBERS_EXIT:		
							RET