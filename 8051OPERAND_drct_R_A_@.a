; THIS A SUBROUTINE THAT HANDLE DATA MANIPULATION OF FIRST OPERAND IN A THREE BYTE INSTRUCTIONS SUCH AS THE FOLLOWING:
; OPCODE A, ... or OPCODE Rn, ... or OPCODE @Ri, ... or OPCODE drct, ...
; MEMORY LOCATIONS USED: 33H
; REGISTERS USED: A
; FLAGS USED: 18H (USED FOR 2 DIFFERENT CASES: 'A' & '@' )

___8051OPERAND_d_R_A:	 	CALL		KEYPAD_ID
							JNB			01H, ___8051OPERAND_d_R_A
							CLR			01H
							 
							CJNE		A, #'A', ___8051OPERAND_d_R_A_1
							CALL		LCD_SHO
							MOV			33H, 53H				; GOOD/OK	; LOAD 1ST BYTE FOR INSTR. OF THE TYPE: OPCODE A, XX (ONLY)
							SETB		18H
							SJMP		___8051OPERAND_d_R_A_4				; 

___8051OPERAND_d_R_A_1:		CJNE		A, #'@', ___8051OPERAND_d_R_A_2		  ; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
							MOV			A, #'@'
							CALL		LCD_SHO
							SETB		18H									; USED TO IDENTIFY THIS ('@') SEGMENT OF THE SUBROUTINE
							MOV			A, #'R'								  ; THE 'R' WOUL BE DISPLAY BY THE FOLLOWING SR ie ___8051Rn
							MOV			33H, 56H							  ; LOAD THE NUMBER COMMON TO THE Rn(8) INSTRUCTION SETS
							CALL		___8051Rn
							CLR			18H									  ; GET FLAG READY FOR THE NEXT USAGE
							SJMP		___8051OPERAND_d_R_A_4
				
___8051OPERAND_d_R_A_2:		CJNE		A, #'R', ___8051OPERAND_d_R_A_3				
							MOV			33H, 57H							  ; LOAD THE 1ST BYTE FOR THE Rn(8) INSTRUCTION SETS
							CALL		___8051Rn
							SJMP		___8051OPERAND_d_R_A_4

___8051OPERAND_d_R_A_3:		CALL		___8051NUMBERS_EX				
							JNB			0FH, ___8051OPERAND_d_R_A_4
							CLR			0FH
							CALL		ASCII_2_HEX
							DJNZ		50H, ___8051OPERAND_d_R_A_4
							MOV			35H, 34H								; SAVE THE HIGH ORDER BYTE
							SJMP		___8051OPERAND_d_R_A_4

; ---------------------------
___8051OPERAND_d_R_A_4:		CLR			0FH									   ; GENERAL FLAG RESET (PREPARES FLAG FOR THE NEXT INSTRUCTION)
							MOV			A, #','
							CALL		LCD_SHO
							MOV			A, #' '
							CALL		LCD_SHO

___8051OPERAND_d_R_A_6:		CALL		KEYPAD_ID
							JNB			01H, ___8051OPERAND_d_R_A_6
							CLR			01H

							CJNE		A, #'#', ___8051OPERAND_d_R_A_7			; REMEMBER THAT THIS GUY '#' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE		
							MOV			A, #'#'
							CALL		LCD_SHO
							JNB			18H, ___8051OPERAND_d_R_A_6_L1			; THIS IS DONE TO SEPARATE THE TWO POSSIBLE INSTRUCTIONS: OPCODE A, #XX & OPCODE ..., #XX
							MOV			33H, 52H					; GOOD/OK	; LOAD 1ST BYTE FOR INSTR. OF THE TYPE: OPCODE A, #XX (ONLY)
							SJMP		___8051OPERAND_d_R_A_6_L2

___8051OPERAND_d_R_A_6_L1:	MOV			33H, 54H					; GOOD/OK
							
___8051OPERAND_d_R_A_6_L2:	SETB		18H										; THIS FLAG COMBINES SOME FORMS OF INSTRUCTIONS
																				; SET TO SKIP CODE THAT CHANGES THE CONTENT OF 33H AT THE CODE SEGMENT BELOW
___8051OPERAND_d_R_A_7:		CALL		___8051NUMBERS_EX				
							JNB			0FH, ___8051OPERAND_d_R_A_6
							CLR			0FH
							CALL		ASCII_2_HEX
							DJNZ		50H, ___8051OPERAND_d_R_A_6

							CPL			10H
							JB			10H, ___8051OPERAND_d_R_A_8				; CHANGE PROGRAM SEQUENCE
							 
							SJMP		___8051OPERAND_d_R_A_9


___8051OPERAND_d_R_A_8:		MOV			35H, 34H								; SAVE THE HIGH ORDER BYTE ie BYTE 2
							JB			24H, ___8051OPERAND_d_R_A_E				; ONLY 'DJNZ Rn, XX' INSTR. CAN JUMP TO LABEL
							; ---- I THINK THIS IS THE PROPER PLACE WHERE THE MOV'S FLAG SHOULD BE PLACED
							MOV			50H, #02H								; REFILL COUNTER TO COUNT THE 3RD BYTE
							MOV			A, #','
							CALL		LCD_SHO
							MOV			A, #' '
							CALL		LCD_SHO
							SJMP		___8051OPERAND_d_R_A_6

___8051OPERAND_d_R_A_E:		CLR			24H										; GET FLAG READY FOR NEXT TIME OF USAGE
							CLR			10H										; RESET THE AFFECTED FLAG (PROGRAM BI-SEQUENCE SWITCH FLAG)
							SETB		14H										; 2-BYTE INSTR. FLAG ID
							SJMP		___8051OPERAND_d_R_A_EXIT

___8051OPERAND_d_R_A_9:		JB			18H, ___8051OPERAND_d_R_A_EXIT			; CHANGE THE CONTENT OF 33H IF INSTRUCTION IS IF THE FORM OPCODE ..., XX, XX
							MOV			33H, 55H					; GOOD/OK

___8051OPERAND_d_R_A_EXIT:	CLR			18H										 ; GET FLAG READY FOR THE NEXT USAGE (CLEARED FOR CODE SEGMENTS MISTAKENLY AFFECTED)
							SETB		20H										; SUBROUTINE'S IDENTIFICATION FLAG.
																				; IT HELPS TO LATCH-IN CODES TO THE EXT. MEM (ie IN '___8051NUMBERS_LATCHED_IN' SR)
							CALL		___8051NUMBERS_LATCHED_IN
							RET