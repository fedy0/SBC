; THIS A SUBROUTINE THAT HANDLE DATA MANIPULATION OF FIRST OPERAND IN A THREE BYTE INSTRUCTIONS SUCH AS THE FOLLOWING:
; OPCODE A (53H) or OPCODE drct or OPCODE C
; MEMORY LOCATIONS USED: 33H
; REGISTERS USED: A
; FLAGS USED: 18H (USED FOR 2 DIFFERENT CASES: 'A' & '@' )

___8051OPERAND_A_drct_C: 	CALL		LCD_SHO									; SHOW CHARATER STORED IN ACC FROM THE CALLER PROGRAM
___8051OPERAND_A_drct_:		CALL		KEYPAD_ID
							JNB			01H, ___8051OPERAND_A_drct_
							CLR			01H										; GET READY FOR THE NEXT KEY

							CJNE		A, #'A', ___8051OPERAND_A_drct_C_1
							CALL		LCD_SHO
							MOV			33H, 53H								; LOAD BYTE 1 THAT WAS TEMPORARILY SAVED
							SETB		13H										; THIS IS A FLAG THAT INDICATES A 1-BYTE INSTR. (USED DURING LATCH-IN)
							SJMP		___8051OPERAND_A_drct_C_EXT

___8051OPERAND_A_drct_C_1:	CJNE		A, #'C', ___8051OPERAND_A_drct_C_2
							CALL		LCD_SHO
							MOV			33H, 52H								; LOAD BYTE 1 THAT WAS TEMPORARILY SAVED
							SETB		13H										; THIS IS A FLAG THAT INDICATES A 1-BYTE INSTR. (USED DURING LATCH-IN)
							SJMP		___8051OPERAND_A_drct_C_EXT

___8051OPERAND_A_drct_C_2:	JB			21H, ___8051OPERAND_A_drct_C_4			; DON'T CARRY OUT COMPARISON IN THIS SEGMENT IF THE CALLER INSTR. IS 'CPL or CLR')
							CJNE		A, #'@', ___8051OPERAND_A_drct_C_3		; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE		
							MOV			A, #'@'
							CALL		LCD_SHO
							MOV			A, #'R'
							SETB		18H										; USED TO SKIP SOME COMPARISON SEGMENT IN THE  ___8051Rn SR (ONLY FOR @Ri)
							MOV			33H, 56H								; LOAD BYTE 1 THAT WAS TEMPORARILY SAVED
							CALL		___8051Rn
							CLR			18H										; GET REDY FOR THE NEXT TIME OF USAGE
							CLR			0FH										; GET REDY FOR THE NEXT TIME OF USAGE 
																				; (IT WAS CLEAR BECOS IT WAS SET INSIDE ___8051Rn SR JUST ABOVE)
							SETB		13H										; THIS IS A FLAG THAT INDICATES A 1-BYTE INSTR. (USED DURING LATCH-IN)
							SJMP		___8051OPERAND_A_drct_C_EXT

___8051OPERAND_A_drct_C_3:	CJNE		A, #'R', ___8051OPERAND_A_drct_C_4
							MOV			33H, 57H								; LOAD BYTE 1 THAT WAS TEMPORARILY SAVED
							SETB		22H										; MISCELLENOUS ONCE IDENTIFIIER FLAG SET TO JUMP A SEGMENT IN THE ___8051Rn SR
							CALL		___8051Rn
							CLR			0FH										; GET REDY FOR THE NEXT TIME OF USAGE 
																				; (IT WAS CLEAR BECOS IT WAS SET INSIDE ___8051Rn SR JUST ABOVE)
							SETB		13H										; THIS IS A FLAG THAT INDICATES A 1-BYTE INSTR. (USED DURING LATCH-IN)
							CLR			22H										; MISCELLENOUS ONCE IDENTIFIIER FLAG CLEAERED
							CLR			13H										; ITS NOT A 2-BYTE INSTRUCTION IF THE PROGRAM SEQUENCE PASSES UP TO HERE
							MOV			A, #','									; OPCODE Rn,
							CALL		LCD_SHO
							MOV			A, #' '									 
							CALL		LCD_SHO									; OF COURSE THE CONTENT OF THE ACC. NOW WOULD CAUSE THE NEXT 
																				; PROGRAM CODE FOLLOWINGS TO BOUNCE BACK TO THE BEGINNING 
___8051OPERAND_A_drct_C_4:	CALL		___8051NUMBERS_EX				
							JNB			0FH, ___8051OPERAND_A_drct_				; RETURN TO THE BEGINNIG IF INPUT DATA IS NOT BTW 0 - F (HEX)
							CLR			0FH										; GET READY FOR THE NEXT USAGE
							CALL		ASCII_2_HEX
							DJNZ		50H, ___8051OPERAND_A_drct_

							MOV			35H, 34H								; SAVE THE HIGH ORDER BYTE ie BYTE 2
							MOV			33H, 55H								; LOAD BYTE 1 THAT WAS TEMPORARILY SAVED
							SETB		14H										; THIS IS A FLAG THAT INDICATES A 2-BYTE INSTR. (USED DURING LATCH-IN)

___8051OPERAND_A_drct_C_EXT:
							SETB		20H										; SUBROUTINE'S IDENTIFICATION FLAG.
																				; IT HELPS TO LATCH-IN CODES TO THE EXT. MEM (ie IN '___8051NUMBERS_LATCHED_IN' SR)
							CLR			21H										; GET READY FOR THE NEXT TIME OF USAGE (CPL or CLR INSTRUCTION IDENTIFICATION FLAG)
							CALL		___8051NUMBERS_LATCHED_IN
							RET