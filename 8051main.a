; THIS SUBROUTINE TAKES CARE OF THE PROGRAMMING OF THE 80C51 FAMILY
;					EXRB1		EQU		44H					; EXAMINED REGISTER B (LOB ADDRESS)
;					EXRB2		EQU		45H					; EXAMINED REGISTER B (HOB ADDRESS)
;					EXRC1		EQU		46H					; EXAMINED REGISTER C (LOB ADDRESS)
;					EXRC2		EQU		47H					; EXAMINED REGISTER C (HOB ADDRESS)
;					EXRD1		EQU		48H					; EXAMINED REGISTER D (LOB ADDRESS)
;					EXRD2		EQU		49H					; EXAMINED REGISTER D (HOB ADDRESS)
;					EXRE1		EQU		4AH					; EXAMINED REGISTER E (LOB ADDRESS)
;					EXRE2		EQU		4BH					; EXAMINED REGISTER E (HOB ADDRESS)
;					EXRH1		EQU		4CH					; EXAMINED REGISTER H (LOB ADDRESS)
;					EXRH2		EQU		4DH					; EXAMINED REGISTER H (HOB ADDRESS)
;					EXRL1		EQU		4EH					; EXAMINED REGISTER L (LOB ADDRESS)
;					EXRL2		EQU		4FH					; EXAMINED REGISTER L (HOB ADDRESS)
;					DML1		EQU		50H					; DELAY'S MEM LOCATION 1	I'M USING IT AS COUNTER(2 BYTE) IN 8051
;					DML2		EQU		51H					; DELAY'S MEM LOCATION 2	I'M USING IT AS COUNTER(4 BYTE) IN 8051
;					DML3		EQU		52H					; DELAY'S MEM LOCATION 3	(FOR OPCODE A, #XX, XX & OPCODE C)		
;					TML1		EQU		53H					; TEMPORARY MEM LOCATION 1	(FOR 'XX, A' OPCODE INSTRUCTION SET) OPCODE A, XX, XX & OPCODE A
;					TML2		EQU		54H					; TEMPORARY MEM LOCATION 2	(FOR 'XX, #XX' OPCODE INSTRUCTION SET)	
;					TML3		EQU		55H					; TEMPORARY MEM LOCATION 3	(FOR 'XX, XX' OPCODE INSTRUCTION SET)	OPCODE XX
;					TML4		EQU		56H					; TEMPORARY MEM LOCATION 4	(FOR 'XX, @Ri' OPCODE INSTRUCTION SET)	OPCODE @Ri
;					TML5		EQU		57H					; TEMPORARY MEM LOCATION 5	(FOR 'XX, Rn' OPCODE INSTRUCTION SET)	OPCODE Rn

; ---------------------------------------------- EXTRA FLAGS USED -----------------------------------------------------
;					CPUTF		BIT		0DH					; CPU TYPE FLAG
;					NOTF___		BIT		0EH					; NEXT OPERAND TYPE FLAG
;					VNF___		BIT		0FH					; VALID NUMBER FLAG
;					OTF1___		BIT		10H					; OPERAND TYPE FLAG 1	 
;					OTF2___		BIT		11H					; OPERAND TYPE FLAG 2
;					OTF3___		BIT		12H					; OPERAND TYPE FLAG 3
;					OTF4___		BIT		13H					; OPERAND TYPE FLAG 4
;					OTF5___		BIT		14H					; OPERAND TYPE FLAG 5
;					OTF6___		BIT		15H					; OPERAND TYPE FLAG 6
;					OTF7___		BIT		16H					; OPERAND TYPE FLAG 7
;					OTF8___		BIT		17H					; OPERAND TYPE FLAG 8
;					OTF9___		BIT		18H					; OPERAND TYPE FLAG 9
;					OTF10___	BIT		19H					; OPERAND TYPE FLAG 10
;					OTF11___	BIT		20H					; OPERAND TYPE FLAG 11
;					OTF12___	BIT		21H					; OPERAND TYPE FLAG 12			CPL or CLR INSTRUCTION IDENTIFICATION FLAG)
;					OTF13___	BIT		22H					; OPERAND TYPE FLAG 13
;					OTF14___	BIT		23H					; OPERAND TYPE FLAG 14
;					OTF15___	BIT		24H					; OPERAND TYPE FLAG 15
;					OTF16___	BIT		25H					; OPERAND TYPE FLAG 16
;					OTF16___	BIT		26H					; OPERAND TYPE FLAG 17
;					OTF16___	BIT		27H					; OPERAND TYPE FLAG 18
;					OTF16___	BIT		28H					; OPERAND TYPE FLAG 19
;					OTF16___	BIT		29H					; OPERAND TYPE FLAG 20
;					OTF16___	BIT		30H					; OPERAND TYPE FLAG 21
;					OTF16___	BIT		31H					; OPERAND TYPE FLAG 22

; ---------------------------------------------------------------------------------------------------
___8051:			
					JNB			09H, M_HEX						; USE MACHINE LANGUAGE FOR 09H = 0 ELSE USE ASM FOR 09H = 1

___MAIN2:			MOV			A, #0C0H						; INSTRUCTION/COMMAND TO CARRY OUT DISPLAY ON LINE 2
					CALL		LCD_CMD
					; INCLUDE CODE TO REFRESH SOME MEMORY LOCATION USED AS COUNTER IN THE PROGRAM
					MOV			50H, #02H						; RE-INITIALIZING COUNTERS

; =*=*=*=*=*=*=*=*=*=*=*=*=*        ASSEMBLY LANGUAGE AS THE CODE/PROGRAMMING LANGUAGE TYPE (CPLT)        =*=*=*=*=*=*=*=*=*=*=*=*=*=
; ---------------------------------------------- FIRST CHARATER KEY COMBINATION -----------------------------------------------------


___ASM:				CALL		KEYPAD_ID						; ENSURE A KEY (1ST KEY) IS DEPRESSED
					JNB			01H, ___ASM
					CLR			01H								; GET READY FOR NEXT KEY

					CJNE		A, #'A', ___ASM1_1				; JUMP TO A'S SECOND CHARACTER ELSE CONTINUE
					JMP			___A2
___ASM1_1:			CJNE		A, #'C', ___ASM1_2				; JUMP TO C'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___C2
___ASM1_2:			CJNE		A, #'D', ___ASM1_3				; JUMP TO D'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___D2
___ASM1_3:			CJNE		A, #'I', ___ASM1_4				; JUMP TO I'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___I2
___ASM1_4:			CJNE		A, #'J', ___ASM1_5				; JUMP TO J'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___J2
___ASM1_5:			CJNE		A, #'L', ___ASM1_6				; JUMP TO L'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___L2
___ASM1_6:			CJNE		A, #'M', ___ASM1_7				; JUMP TO M'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___M2
___ASM1_7:			CJNE		A, #'N', ___ASM1_8				; JUMP TO N'S SECOND CHARACTER ELSE CONTINUE
					D_STR
					DB			'NOP',0
					MOV			33H, #00H						; NOP's 8051 INSTR SET
					SETB		13H								; FLAG ID FOR 1-BYTE INSTR.
					SETB		20H								; FOR QUICK JUMP INSIDE THE FOLLOWING SR
					CALL		___8051NUMBERS_LATCHED_IN
					JMP			___MAIN2
___ASM1_8:			CJNE		A, #'O', ___ASM1_9				; JUMP TO O'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___O2
___ASM1_9:			CJNE		A, #'P', ___ASM1_10				; JUMP TO P'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___P2
___ASM1_10:			CJNE		A, #'R', ___ASM1_11				; JUMP TO R'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___R2
___ASM1_11:			CJNE		A, #'S', ___ASM1_12				; JUMP TO S'S SECOND CHARACTER ELSE CONTINUE 
					JMP			___S2							
___ASM1_12:			CJNE		A, #'X', ___ASM					; JUMP TO X'S SECOND CHARACTER ELSE START AFRESH 
					JMP			___X2

; ------------------------------------------ SECOND, THIRD & FOURTH CHARACTER KEY COMBINATION -----------------------------------------------------------
; FOR 'A' AS FIRST CHARACTER
___A2:				CALL 		LCD_SHO
___A2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___A2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'C', ___A2_2			; ACALL
					D_STR
					DB			'CALL ',0					
					MOV			33H, #00010001B				; LOAD ITS 8051 INST. SET
					CALL		___FLY_11BIT_ADDRESS		; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
					AJMP		___MAIN2

___A2_2:			CJNE		A, #'D', ___A2_3			; ADD or ADDC ? 
					CALL 		LCD_SHO
					MOV			A, #'D'
					CALL		LCD_SHO

___A2_2_L1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___A2_2_L1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'*', ___A2_2_L2			; SPACE BAR	(ADD A,)
					D_STR
					DB			' A, ',0					
___A2_2_L1_L1:		CALL		KEYPAD_ID
					JNB			01H, ___A2_2_L1_L1
					CLR			01H
					
					CJNE		A, #'#', ___A2_2_L1_L2		; REMEMBER THAT THIS GUY '#' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A, #'#'
					CALL		LCD_SHO
					MOV			33H, #24H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___A2_2_L1_L2:		CJNE		A, #'@', ___A2_2_L1_L3		; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			33H, #26H					; LOAD ITS 8051 INST. SET 
					SETB		15H							; FLAG FOR JUMP TO THE PART OF THE SR THAT DISPLAYS '@R' & CALLS KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___A2_2_L1_L3:		CJNE		A, #'R', ___A2_2_L1_L4
					MOV			33H, #28H					; LOAD ITS 8051 INST. SET 
					CALL		___8051Rn
					AJMP		___MAIN2

___A2_2_L1_L4:		CALL		___8051NUMBERS_LATCHED_IN
					JNB			0FH, ___A2_2_L1_L1			; JUMP IF NOT A HEX NUMBER
					CLR			0FH		    
					MOV			33H, #25H					; LOAD ITS 8051 INST. SET 
					DJNZ		50H, ___A2_2_L1_L1
					AJMP		___MAIN2

___A2_2_L2:			CJNE		A, #'C', ___A2_2_L1			; ADDC A,
					D_STR
					DB			'C A, ',0
___A2_2_L2_L1:		CALL		KEYPAD_ID
					JNB			01H, ___A2_2_L2_L1
					CLR			01H
					
					CJNE		A, #'#', ___A2_2_L2_L2		; REMEMBER THAT THIS GUY '#' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A, #'#'
					CALL		LCD_SHO
					MOV			33H, #34H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___A2_2_L2_L2:		CJNE		A, #'@', ___A2_2_L2_L3		; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			33H, #36H					; LOAD ITS 8051 INST. SET 
					SETB		15H							; FLAG FOR JUMP TO THE PART OF THE SR THAT DISPLAYS '@R' & CALLS KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___A2_2_L2_L3:		CJNE		A, #'R', ___A2_2_L2_L4
					MOV			33H, #38H					; LOAD ITS 8051 INST. SET 
					CALL		___8051Rn
					AJMP		___MAIN2

___A2_2_L2_L4:		CALL		___8051NUMBERS_LATCHED_IN
					JNB			0FH, ___A2_2_L2_L1			; JUMP IF NOT A HEX NUMBER
					CLR			0FH		    
					MOV			33H, #35H					; LOAD ITS 8051 INST. SET 
					DJNZ		50H, ___A2_2_L2_L1
					AJMP		___MAIN2
					
___A2_3:			CJNE		A, #'J', ___A2_4			; AJMP 
					D_STR
					DB			'JMP ',0
					MOV			33H, #00000001B				; LOAD ITS 8051 INST. SET
					CALL		___FLY_11BIT_ADDRESS		; CALL A SUBROUTINE THAT WOULD HANDLE ADDRESS OPERAND IN-TAKE
					AJMP		___MAIN2

___A2_4:			CJNE		A, #'N', ___A2_1			; ANL A or ANL C or ANL XX ?
					CALL		LCD_SHO
					MOV			A, #'L'
					CALL		LCD_SHO
					MOV			A, #' '
					CALL		LCD_SHO

___A2_4_L1:			CALL		KEYPAD_ID					; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___A2_4_L1
					CLR			01H							; GET READY FOR THE NEXT KEY

					CJNE		A, #'A', ___A2_4_L2			; ANL A,
					CALL		LCD_SHO
					MOV			A, #','
					CALL		LCD_SHO
					MOV			A, #' '
					CALL		LCD_SHO
___A2_4_L1_L1:		CALL		KEYPAD_ID
					JNB			01H, ___A2_4_L1_L1
					CLR			01H
					
					CJNE		A, #'#', ___A2_4_L1_L2		; REMEMBER THAT THIS GUY '#' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A, #'#'
					CALL		LCD_SHO
					MOV			33H, #54H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___A2_4_L1_L2:		CJNE		A, #'@', ___A2_4_L1_L3		; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			33H, #56H					; LOAD ITS 8051 INST. SET 
					SETB		15H							; FLAG FOR JUMP TO THE PART OF THE SR THAT DISPLAYS '@R' & CALLS KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___A2_4_L1_L3:		CJNE		A, #'R', ___A2_4_L1_L4
					MOV			33H, #58H					; LOAD ITS 8051 INST. SET 
					CALL		___8051Rn
					AJMP		___MAIN2

___A2_4_L1_L4:		CALL		___8051NUMBERS_LATCHED_IN
					JNB			0FH, ___A2_4_L1_L1			; JUMP IF NOT A HEX NUMBER
					CLR			0FH		    
					MOV			33H, #55H					; LOAD ITS 8051 INST. SET 
					DJNZ		50H, ___A2_4_L1_L1
					AJMP		___MAIN2

___A2_4_L2:		   	CJNE		A, #'C', ___A2_4_L3			; ANL C,
					CALL		LCD_SHO
					MOV			A, #','
					CALL		LCD_SHO
___A2_4_L2_L1:		CALL		KEYPAD_ID					; ENSURE A KEY IS DEPRESSED
					JNB			01H, ___A2_4_L2_L1
					CLR			01H							; GET READY FOR THE NEXT KEY

					CJNE		A, #' ', ___A2_4_L2_L2
					CALL		LCD_SHO
					MOV			33H, #82H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN	    
					AJMP		___MAIN2

___A2_4_L2_L2:		CJNE		A, #'/', ___A2_4_L2_L1		; REMEMBER THAT THIS GUY '/' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A, #'/'
					CALL		LCD_SHO
					MOV			33H, #0B0H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___A2_4_L3:			CALL		___8051NUMBERS_LATCHED_IN	; ANL XX, (A or #XX) 
					JNB			0FH, ___A2_4_L1				; JUMP IF NOT A HEX NUMBER
					CLR			0FH	
					MOV			53H, #52H					; ANL XX, A	 (LOAD ITS 8051 OPCODE INST. SET)
					MOV			54H, #53H					; ANL XX, #XX (LOAD ITS 8051 OPCODE INST. SET)
					SETB		11H	    					; FOR INSTRUCTION WITH OPERANDS OF THE FORM: XX, XX or XX, A or XX, #XX
					DJNZ		50H, ___A2_4_L1		   	
					CLR			11H							; PREPARE FLAG FOR NEXT TIME OF USAGE
					AJMP		___MAIN2

; FOR 'C' AS FIRST CHARACTER
___C2:				CALL 		LCD_SHO
___C2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___C2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'J', ___C2_2			; CJNE
					D_STR
					DB			'JNE ',0
					MOV			52H, #0B4H
					MOV			53H, #0B5H
					MOV			56H, #0B6H
					MOV			57H, #0B8H
					CALL		___8051OPERAND_d_R_A
					AJMP		___MAIN2

___C2_2:			CJNE		A, #'L', ___C2_3			; CLR 
					CALL		LCD_SHO
					MOV			A, #'R'
					SETB		21H										; USED TO SKIP SOME COMPARISON SEGMENT IN THE  ___8051OPERAND_A_drct_C SR
					MOV			53H, #0E4H					; CLR A
					MOV			52H, #0C3H					; CLR C
					MOV			55H, #0C2H 					; CLR bit (drct)
					CALL		___8051OPERAND_A_drct_C
					AJMP		___MAIN2

___C2_3:			CJNE		A, #'P', ___C2_1			; CPL 
					CALL		LCD_SHO
					MOV			A, #'L'
					SETB		21H										; USED TO SKIP SOME COMPARISON SEGMENT IN THE  ___8051OPERAND_A_drct_C SR
					MOV			53H, #0F4H					; CPL A
					MOV			52H, #0B3H					; CPL C
					MOV			55H, #0B2H 					; CPL bit (drct)
					CALL		___8051OPERAND_A_drct_C
					AJMP		___MAIN2

; FOR 'D' AS FIRST CHARACTER
___D2:				CALL 		LCD_SHO
___D2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___D2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'A', ___D2_2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					CALL		LCD_SHO
					MOV			A, #' '
					CALL		LCD_SHO
					MOV			A, #'A'
					CALL		LCD_SHO
					MOV			33H, #0D4H
					SETB		13H
					SETB		20H
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___D2_2:			CJNE		A, #'E', ___D2_3			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					CALL		LCD_SHO
					MOV			A, #'C'
					CALL		LCD_SHO
					MOV			A, #' '
					MOV			53H, #14H					; DEC A
					MOV			55H, #15H					; DEC drct
					MOV			56H, #16H					; DEC @Ri
					MOV			57H, #18H					; DEC Rn  
					CALL		___8051OPERAND_A_drct_C
					AJMP		___MAIN2
													
___D2_3:			CJNE		A, #'I', ___D2_4			; JUMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'IV AB',0
					MOV			33H, #84H
					SETB		13H
					SETB		20H
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___D2_4:			CJNE		A, #'J', ___D2_1			; JUMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'JNZ ',0
					SETB		23H
					MOV			55H, #0D5H					; DJNZ XX,XX
					MOV			57H, #0D8H					; DJNZ Rn,XX
					CALL		___8051OPERAND_d_R_A
					CLR			23H
					AJMP		___MAIN2

; FOR 'I' AS FIRST CHARACTER
___I2:				D_STR
					DB			'INC ',0					; INC ...

___I2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___I2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'D', ___I2_2			; INC DPTR
					D_STR
					DB			'DPTR',0
					MOV			33H, #0A3H					; LOAD ITS 8051 INSTR. SET 					
					SETB		13H							; INDICATES A 1-BTYE INSTR.
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2
							   
___I2_2:			MOV			53H, #04H					; INC A
					MOV			55H, #05H					; INC drct
					MOV			56H, #06H					; INC @Ri
					MOV			57H, #08H					; INC Rn  
					CALL		___8051OPERAND_A_drct_		; NOTE: THIS IS THE LABEL THAT WAS BELOW ___8051OPERAND_A_drct_C SR	
					AJMP		___MAIN2		

; FOR 'J' AS FIRST CHARACTER
___J2:				CALL 		LCD_SHO
___J2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___J2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'B', ___J2_2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					CALL		LCD_SHO

___J2_1_L1:			CALL		KEYPAD_ID
					JNB			01H, ___J2_1_L1
					CLR			01H		

					CJNE		A, #'*', ___J2_1_L2			; SPACE BAR	(ADD A,)
					MOV			A, #' '
					CALL		LCD_SHO
					MOV			55H, #20H					; LOAD ITS 8051 INSTR. SET
					SJMP		___J2_1_L3
___J2_1_L2:			CJNE		A, #'C', ___J2_1_L1			; SPACE BAR	(ADD A,)
					CALL		LCD_SHO
					MOV			55H, #10H					; LOAD ITS 8051 INSTR. SET

___J2_1_L3:			CALL		KEYPAD_ID
					JNB			01H, ___J2_1_L3
					CLR			01H		

					CALL		___8051NUMBERS_LATCHED_IN
					JNB			0FH, ___J2_1_L3				; JUMP IF NOT A HEX NUMBER
					SETB		11H	    					; FOR INSTRUCTION WITH OPERANDS OF THE FORM: XX, XX or XX, A or XX, #XX
					DJNZ		50H, ___J2_1_L3		   	
					CLR			11H							; PREPARE FLAG FOR NEXT TIME OF USAGE
					AJMP		___MAIN2

___J2_2:			CJNE		A, #'C', ___J2_3			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					MOV			55H, #40H					; JC OFFSET
					AJMP		___J2_6
													
___J2_3:			CJNE		A, #'M', ___J2_4			; JUMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'MP @A, DPTR ',0
					MOV			33H, #73H					; LOAD ITS 8051 INSTR. SET 					
					SETB		13H							; INDICATES A 1-BTYE INSTR.
					CALL		___8051NUMBERS_LATCHED_IN	
					AJMP		___MAIN2

___J2_4:			CJNE		A, #'N', ___J2_5			; JUMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
					CALL		LCD_SHO

___J2_4_L1:			CALL		KEYPAD_ID
					JNB			01H, ___J2_4_L1
					CLR			01H		
			
					CJNE		A, #'B', ___J2_4_L2			; JUMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
					CALL		LCD_SHO
					MOV			A, #' '
					CALL		LCD_SHO
					MOV			55H, #30H					; JNB BIT, OFFSET
					AJMP		___J2_1_L3

___J2_4_L2:			CJNE		A, #'C', ___J2_4_L3			; JUMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
					MOV			55H, #50H					; JNC OFFSET
					SJMP		___J2_6

___J2_4_L3:			CJNE		A, #'Z', ___J2_4_L1			; JUMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
					MOV			55H, #70H					; JNZ OFFSET
					SJMP		___J2_6

___J2_5:			CJNE		A, #'Z', ___J2_1			; JUMP TO AN'S THIRD CHARACTER ELSE CONTINUE 
					MOV			55H, #60H					; JZ OFFSET

___J2_6:			CALL		___8051OPERAND_A_drct_C
					AJMP		___MAIN2

; FOR 'L' AS FIRST CHARACTER
___L2:				CALL 		LCD_SHO
___L2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___L2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'C', ___L2_2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					CALL		LCD_SHO
					D_STR
					DB			'CALL ',0
					MOV			33H, #12H					; LCALL's 8051 INSTR SET
					SETB		12H							; FLAG ID FOR XXXX (ie 16bit OPERAND)
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___L2_2:			CJNE		A, #'J', ___L2_1			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'JMP ',0
					MOV			33H, #02H					; LJMP's 8051 INSTR SET
					SETB		12H							; FLAG ID FOR XXXX (ie 16bit OPERAND)
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

; FOR 'M' AS FIRST CHARACTER
___M2:				CALL 		LCD_SHO
___M2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___M2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'O', ___M2_2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					CALL		LCD_SHO
					MOV			A, #'V'
					CALL		LCD_SHO

___M2_1_L1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___M2_1_L1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'*', ___M2_1_L2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					MOV			A, #' '
					CALL		LCD_SHO

___M2_1_L1_:		CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___M2_1_L1_
					CLR			01H							; GET READY FOR NEXT KEY
					; -------STOPPED HERE



					AJMP		___MAIN2

___M2_1_L2:			CJNE		A, #'C', ___M2_1_L3			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					D_STR
					DB			'C A, @A+',0
___M2_1_L2_L1:		CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___M2_1_L2_L1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'D', ___M2_1_L2_L2
					D_STR
					DB			'DPTR',0
					MOV			33H, #93H
					SJMP		___M2_1_L2_END

___M2_1_L2_L2:		CJNE		A, #'P', ___M2_1_L2_L1
					CALL		LCD_SHO
					MOV			A, #'C'
					CALL		LCD_SHO
					MOV			33H, #83H

___M2_1_L2_END:		SETB		13H
					SETB		20H
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___M2_1_L3:			CJNE		A, #'X', ___M2_1_L1			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					CALL		LCD_SHO
					MOV			A, #' '
					CALL		LCD_SHO

___M2_1_L3_L1:		CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___M2_1_L3_L1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'A', ___M2_1_L3_L2
					D_STR
					DB			'A, ',0
					
___M2_1_L3_L1_L1:	CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___M2_1_L3_L1_L1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'D', ___M2_1_L3_L1_L2
					D_STR
					DB			'DPTR',0
					MOV			33H, #0E0H					; MOVX A, @DPTR
					SETB		13H
					SETB		20H
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___M2_1_L3_L1_L2:	CJNE		A, #'@', ___M2_1_L3_L1_L1
					MOV			A,#'@'
					CALL		LCD_SHO
					MOV			A,#'R'
					MOV			33H, #0E2H					; MOVX A,@Ri
					SETB		13H							; THIS IS A FLAG THAT INDICATES A 1-BYTE INSTR. (USED DURING LATCH-IN)
					SETB		18H							; USED TO SKIP SOME COMPARISON SEGMENT IN THE  ___8051Rn SR (ONLY FOR @Ri)
					SETB		25H							; THIS FLAG IS USED FOR ONLY THIS INSTRUCTION FOR A PECULIAR JUMP IN THE FOLLOWING SR (CLEARED INTERNALLY)
					CALL		___8051Rn
					CLR			0FH							; GET REDY FOR THE NEXT TIME OF USAGE 
															; (IT WAS CLEAR BECOS IT WAS SET INSIDE ___8051Rn SR JUST ABOVE)
					CLR			18H
					AJMP		___MAIN2
							
___M2_1_L3_L2:		CJNE		A, #'@', ___M2_1_L3_L1		; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A,#'@'
					CALL		LCD_SHO
					MOV			A,#'R'
					MOV			33H, #0F2H					; MOVX @Ri,A
					SETB		13H							; THIS IS A FLAG THAT INDICATES A 1-BYTE INSTR. (USED DURING LATCH-IN)
					SETB		18H							; USED TO SKIP SOME COMPARISON SEGMENT IN THE  ___8051Rn SR (ONLY FOR @Ri)
					SETB		26H							; THIS FLAG IS USED FOR ONLY THIS INSTRUCTION FOR A PECULIAR JUMP IN THE FOLLOWING SR (CLEARED INTERNALLY)
					CALL		___8051Rn
						
					CLR			0FH							; GET REDY FOR THE NEXT TIME OF USAGE 
					; ------ CONTINUED HERE AFTER LONG-LEFT
					CLR			18H
					AJMP		___MAIN2

___M2_2:			CJNE		A, #'U', ___M2_1			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'UL AB',0					; MUL AB
					MOV			33H, #0A4H
					SETB		13H
					SETB		20H
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

; FOR 'O' AS FIRST CHARACTER
___O2:				D_STR
					DB			'ORL ',0					; ORL ...

___O2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___O2_1
					CLR			01H							; GET READY FOR THE NEXT KEY

					CJNE		A, #'A', ___O2_2			; ORL A,
					D_STR
					DB			'A, ',0					

___O2_1_L1:			CALL		KEYPAD_ID
					JNB			01H, ___O2_1_L1
					CLR			01H
					
					CJNE		A, #'#', ___O2_1_L2			; REMEMBER THAT THIS GUY '#' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A, #'#'
					CALL		LCD_SHO
					MOV			33H, #44H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___O2_1_L2:			CJNE		A, #'@', ___O2_1_L3			; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			33H, #46H					; LOAD ITS 8051 INST. SET 
					SETB		15H							; FLAG FOR JUMP TO THE PART OF THE SR THAT DISPLAYS '@R' & CALLS KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___O2_1_L3:			CJNE		A, #'R', ___O2_1_L4
					MOV			33H, #48H					; LOAD ITS 8051 INST. SET 
					CALL		___8051Rn
					AJMP		___MAIN2

___O2_1_L4:			CALL		___8051NUMBERS_LATCHED_IN
					JNB			0FH, ___O2_1_L1				; JUMP IF NOT A HEX NUMBER
					CLR			0FH		    
					MOV			33H, #45H					; LOAD ITS 8051 INST. SET 
					DJNZ		50H, ___O2_1_L1
					AJMP		___MAIN2

___O2_2:		   	CJNE		A, #'C', ___O2_3			; ORL C,
					CALL		LCD_SHO
					MOV			A, #','
					CALL		LCD_SHO
___O2_2_L1:			CALL		KEYPAD_ID					; ENSURE A KEY IS DEPRESSED
					JNB			01H, ___O2_2_L1
					CLR			01H							; GET READY FOR THE NEXT KEY

					CJNE		A, #' ', ___O2_2_L2
					CALL		LCD_SHO
					MOV			33H, #72H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN	    
					AJMP		___MAIN2

___O2_2_L2:			CJNE		A, #'/', ___O2_2_L1			; REMEMBER THAT THIS GUY '/' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A, #'/'
					CALL		LCD_SHO
					MOV			33H, #0A0H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___O2_3:			CALL		___8051NUMBERS_LATCHED_IN	; ORL XX, (A or #XX) 
					JNB			0FH, ___O2_1				; JUMP IF NOT A HEX NUMBER
					CLR			0FH	
					MOV			53H, #42H					; ORL XX, A	 (LOAD ITS 8051 OPCODE INST. SET)
					MOV			54H, #43H					; ORL XX, #XX (LOAD ITS 8051 OPCODE INST. SET)
					SETB		11H	    					; FOR INSTRUCTION WITH OPERANDS OF THE FORM: XX, XX or XX, A or XX, #XX
					DJNZ		50H, ___O2_1		   	
					CLR			11H							; PREPARE FLAG FOR NEXT TIME OF USAGE
					AJMP		___MAIN2

; FOR 'P' AS FIRST CHARACTER
___P2:				CALL 		LCD_SHO
___P2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___P2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'O', ___P2_2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					CALL		LCD_SHO
					MOV			A, #'P'
					CALL		LCD_SHO
					MOV			A, #' '
					MOV			55H, #0D0H					; LOAD ITS 8051 INSTR. SET 					
					CALL		___8051OPERAND_A_drct_C
					AJMP		___MAIN2

___P2_2:			CJNE		A, #'U', ___P2_1			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'USH ',0
					MOV			55H, #0C0H					; LOAD ITS 8051 INSTR. SET 					
					CALL		___8051OPERAND_A_drct_
					AJMP		___MAIN2

; FOR 'R' AS FIRST CHARACTER
___R2:				CALL 		LCD_SHO
___R2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___R2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'E', ___R2_2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					CALL		LCD_SHO
					MOV			A, #'T'
					CALL		LCD_SHO

___R2_1_L1:			CALL		KEYPAD_ID
					JNB			01H, ___R2_1_L1
					CLR			01H

					CJNE		A, #'*', ___R2_1_L2			  ; RET
					MOV			33H, #22H
					SJMP		___R_END
___R2_1_L2:			CJNE		A, #'I', ___R2_1_L1			  ; RETI
					CALL		LCD_SHO
					MOV			33H, #32H
					SJMP		___R_END 
					
___R2_2:			CJNE		A, #'L', ___R2_3			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					CALL		LCD_SHO						; RL ...
___R2_2_L1:			CALL		KEYPAD_ID
					JNB			01H, ___R2_2_L1
					CLR			01H

					CJNE		A, #'*', ___R2_2_L2			  
					D_STR
					DB			' A',0					; RL A
					MOV			33H, #23H
					SJMP		___R_END
___R2_2_L2:			CJNE		A, #'C', ___R2_2_L1			  
					D_STR
					DB			'C A',0					; RLC A
					MOV			33H, #33H
					SJMP		___R_END
					
___R2_3:			CJNE		A, #'R', ___R2_1			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					CALL		LCD_SHO
___R2_3_L1:			CALL		KEYPAD_ID
					JNB			01H, ___R2_3_L1
					CLR			01H

					CJNE		A, #'*', ___R2_3_L2			  
					D_STR
					DB			' A',0					; RR A
					MOV			33H, #03H
					SJMP		___R_END
___R2_3_L2:			CJNE		A, #'C', ___R2_3_L1			  
					D_STR
					DB			'C A',0					; RRC A
					MOV			33H, #13H

___R_END:			SETB		13H
					SETB		20H
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

; FOR 'S' AS FIRST CHARACTER
___S2:				CALL 		LCD_SHO
___S2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___S2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'E', ___S2_2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					D_STR
					DB			'ETB ',0	
					SETB		21H										; USED TO SKIP SOME COMPARISON SEGMENT IN THE  ___8051OPERAND_A_drct_C SR
					MOV			52H, #0D3H					; CLR C
					MOV			55H, #0D2H 					; CLR bit (drct)
					CALL		___8051OPERAND_A_drct_		; A LABEL JUST BELOW ___8051OPERAND_A_drct_C. I USED IT TO AVOID DISPLAY
					AJMP		___MAIN2	 

___S2_2:			CJNE		A, #'J', ___S2_3			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'JMP ',0	
					MOV			55H, #80H
					CALL		___8051OPERAND_A_drct_		; A LABEL JUST BELOW ___8051OPERAND_A_drct_C. I USED IT TO AVOID DISPLAY
					AJMP		___MAIN2

___S2_3:			CJNE		A, #'U', ___S2_4			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'UBB A, ',0
___S2_3_L1:			CALL		KEYPAD_ID
					JNB			01H, ___S2_3_L1
					CLR			01H
					
					CJNE		A, #'#', ___S2_3_L2			; REMEMBER THAT THIS GUY '#' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A, #'#'
					CALL		LCD_SHO
					MOV			33H, #94H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___S2_3_L2:			CJNE		A, #'@', ___S2_3_L3			; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			33H, #96H					; LOAD ITS 8051 INST. SET 
					SETB		15H							; FLAG FOR JUMP TO THE PART OF THE SR THAT DISPLAYS '@R' & CALLS KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___S2_3_L3:			CJNE		A, #'R', ___S2_3_L4
					MOV			33H, #98H					; LOAD ITS 8051 INST. SET 
					CALL		___8051Rn
					AJMP		___MAIN2

___S2_3_L4:			CALL		___8051NUMBERS_LATCHED_IN
					JNB			0FH, ___S2_3_L1				; JUMP IF NOT A HEX NUMBER
					CLR			0FH		    
					MOV			33H, #95H					; LOAD ITS 8051 INST. SET 
					DJNZ		50H, ___S2_3_L1
					AJMP		___MAIN2

___S2_4:			CJNE		A, #'W', ___S2_1			; MAY BE MAKE THE KEYPAD TO IDENTIFY 'Z' HERE FOR 'W' TO BE DISPLAYED ALSO PUT IN THE KEYBOARD W/Z			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'WAP A',0					; SWAP A
					MOV			33H, #0C4H
					SETB		13H
					SETB		20H
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

; FOR 'X' AS FIRST CHARACTER
___X2:				CALL 		LCD_SHO
___X2_1:			CALL		KEYPAD_ID					; ENSURE A KEY(2ND ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___X2_1
					CLR			01H							; GET READY FOR NEXT KEY

					CJNE		A, #'C', ___X2_2			; JUMP TO DA'S THIRD CHARACTER ELSE CONTINUE
					CALL		LCD_SHO
					MOV			A, #'H'
					CALL		LCD_SHO

___X2_1_L1:			CALL		KEYPAD_ID
					JNB			01H, ___X2_1_L1
					CLR			01H

					CJNE		A, #'*', ___X2_1_L2
					D_STR
					DB			' A, ',0					; XCH A,

___X2_1_L1_L1:		CALL		KEYPAD_ID
					JNB			01H, ___X2_1_L1_L1
					CLR			01H
					
					CJNE		A, #'@', ___X2_1_L1_L2		; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			33H, #0C6H					; LOAD ITS 8051 INST. SET 
					SETB		15H							; FLAG FOR JUMP TO THE PART OF THE SR THAT DISPLAYS '@R' & CALLS KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___X2_1_L1_L2:		CJNE		A, #'R', ___X2_1_L1_L3
					MOV			33H, #0C8H					; LOAD ITS 8051 INST. SET 
					CALL		___8051Rn
					AJMP		___MAIN2

___X2_1_L1_L3:		CALL		___8051NUMBERS_LATCHED_IN
					JNB			0FH, ___X2_1_L1_L1			; JUMP IF NOT A HEX NUMBER
					CLR			0FH		    
					MOV			33H, #0C5H					; LOAD ITS 8051 INST. SET 
					DJNZ		50H, ___X2_1_L1_L1
					AJMP		___MAIN2

___X2_1_L2:			CJNE		A, #'D', ___X2_1_L1
					D_STR
					DB			'D A, @R',0					; RR A
					MOV			56H, #0D6H					; XCHD A, @Ri
					CALL		___8051OPERAND_A_drct_C
					AJMP		___MAIN2


___X2_2:			CJNE		A, #'R', ___X2_1			; JUMP TO DC'S THIRD CHARACTER ELSE CONTINUE 
					D_STR
					DB			'RL ',0						; XRL
___X2_2_L1:			CALL		KEYPAD_ID					; ENSURE A KEY(3RD ALPHABET KEY) IS DEPRESSED
					JNB			01H, ___X2_2_L1
					CLR			01H							; GET READY FOR THE NEXT KEY

					CJNE		A, #'A', ___X2_2_L2			; XRL A,
					D_STR
					DB			'A, ',0					

___X2_2_L1_L1:		CALL		KEYPAD_ID
					JNB			01H, ___X2_2_L1_L1
					CLR			01H
					
					CJNE		A, #'#', ___X2_2_L1_L2		; REMEMBER THAT THIS GUY '#' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			A, #'#'
					CALL		LCD_SHO
					MOV			33H, #64H					; LOAD ITS 8051 INST. SET 
					SETB		14H							; FLAG FOR JUMP TO THE PART OF THE SR THAT FIRST CALLS FOR KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___X2_2_L1_L2:		CJNE		A, #'@', ___X2_2_L1_L3		; REMEMBER THAT THIS GUY '@' IS TO BE REPLACES WITH AN APT SYMBOL ON THIS LINE
					MOV			33H, #66H					; LOAD ITS 8051 INST. SET 
					SETB		15H							; FLAG FOR JUMP TO THE PART OF THE SR THAT DISPLAYS '@R' & CALLS KEYPAD_ID
					CALL		___8051NUMBERS_LATCHED_IN
					AJMP		___MAIN2

___X2_2_L1_L3:		CJNE		A, #'R', ___X2_2_L1_L4
					MOV			33H, #68H					; LOAD ITS 8051 INST. SET 
					CALL		___8051Rn
					AJMP		___MAIN2

___X2_2_L1_L4:		CALL		___8051NUMBERS_LATCHED_IN
					JNB			0FH, ___X2_2_L1_L1			; JUMP IF NOT A HEX NUMBER
					CLR			0FH		    
					MOV			33H, #65H					; LOAD ITS 8051 INST. SET 
					DJNZ		50H, ___X2_2_L1_L1
					AJMP		___MAIN2

___X2_2_L2:			CALL		___8051NUMBERS_LATCHED_IN	; XRL XX, (A or #XX) 
					JNB			0FH, ___X2_2_L1				; JUMP IF NOT A HEX NUMBER
					CLR			0FH	
					MOV			53H, #62H					; ORL XX, A	 (LOAD ITS 8051 OPCODE INST. SET)
					MOV			54H, #63H					; ORL XX, #XX (LOAD ITS 8051 OPCODE INST. SET)
					SETB		11H	    					; FOR INSTRUCTION WITH OPERANDS OF THE FORM: XX, XX or XX, A or XX, #XX
					DJNZ		50H, ___X2_2_L1		   	
					CLR			11H							; PREPARE FLAG FOR NEXT TIME OF USAGE
					AJMP		___MAIN2